{
  "version": 3,
  "sources": ["empty-module:./pool.server", "empty-module:./sql-sanitizer.server", "../../../app/utils/api.ts", "../../../app/components/PageContainer.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/api.ts\"\n);\nimport.meta.hot.lastModified = \"1732577029224.791\";\n}\n// REMIX HMR END\n\nimport type { TableDataResponse, TableSchema, QueryResult } from '~/types';\nimport { pool } from './pool.server';\nimport { sanitizeTableName } from './sql-sanitizer.server';\n\ninterface RawSchemaResponse {\n  table_name: string;\n  columns: Array<{\n    column_name: string;\n    data_type: string;\n    is_nullable: string;\n    column_default: string | null;\n  }>;\n  primary_key: string[] | null;\n}\n\nexport async function fetchSchema(): Promise<TableSchema[]> {\n  console.log('Attempting to fetch schema...');\n  const client = await pool.connect();\n  try {\n    console.log('Connected to database, executing query...');\n    const result = await client.query<{\n      table_name: string;\n      columns: Array<{\n        name: string;\n        type: string;\n        nullable: boolean;\n        defaultValue?: string;\n      }>;\n      primary_key: string[] | null;\n      row_count: string;\n      size_bytes: string;\n    }>(`\n      WITH table_sizes AS (\n        SELECT \n          n.nspname as schema_name,\n          c.relname as table_name,\n          pg_total_relation_size(quote_ident(n.nspname) || '.' || quote_ident(c.relname)) as total_bytes,\n          c.reltuples::bigint as row_estimate\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relkind = 'r'\n          AND n.nspname = 'public'\n      )\n      SELECT \n        t.table_name,\n        array_agg(\n          json_build_object(\n            'name', c.column_name,\n            'type', c.data_type,\n            'nullable', c.is_nullable = 'YES',\n            'defaultValue', c.column_default\n          )\n        ) as columns,\n        array_agg(\n          CASE WHEN tc.constraint_type = 'PRIMARY KEY' \n          THEN c.column_name \n          ELSE NULL \n          END\n        ) FILTER (WHERE tc.constraint_type = 'PRIMARY KEY') as primary_key,\n        COALESCE(ts.row_estimate::text, '0') as row_count,\n        COALESCE(ts.total_bytes::text, '0') as size_bytes\n      FROM information_schema.tables t\n      JOIN information_schema.columns c ON t.table_name = c.table_name\n        AND t.table_schema = c.table_schema\n      LEFT JOIN information_schema.table_constraints tc \n        ON t.table_name = tc.table_name \n        AND t.table_schema = tc.table_schema\n        AND tc.constraint_type = 'PRIMARY KEY'\n      LEFT JOIN information_schema.key_column_usage kcu\n        ON tc.constraint_name = kcu.constraint_name\n        AND c.column_name = kcu.column_name\n      LEFT JOIN table_sizes ts ON t.table_name = ts.table_name\n      WHERE t.table_schema = 'public'\n        AND t.table_type = 'BASE TABLE'\n      GROUP BY t.table_name, ts.row_estimate, ts.total_bytes\n    `);\n\n    console.log('Query executed successfully, found tables:', result.rows.length);\n    return result.rows.map(row => ({\n      name: row.table_name,\n      columns: row.columns,\n      primaryKey: row.primary_key ?? undefined,\n      rowCount: parseInt(row.row_count || '0', 10),\n      sizeInBytes: parseInt(row.size_bytes || '0', 10)\n    }));\n  } catch (error) {\n    console.error('Error fetching schema:', error);\n    throw error;\n  } finally {\n    console.log('Releasing database connection');\n    client.release();\n  }\n}\n\nexport async function fetchTableData(\n  tableName: string,\n  sortBy?: string,\n  sortOrder?: 'asc' | 'desc'\n): Promise<TableDataResponse> {\n  const client = await pool.connect();\n  try {\n    let query = `SELECT * FROM ${sanitizeTableName(tableName)}`;\n    \n    if (sortBy) {\n      query += ` ORDER BY ${sanitizeTableName(sortBy)} ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;\n    }\n    \n    const result = await client.query(query);\n\n    return {\n      data: result.rows,\n      totalRows: result.rows.length\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function executeQuery(sql: string): Promise<QueryResult> {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(sql);\n    return {\n      rows: result.rows,\n      fields: result.fields.map(f => ({\n        name: f.name,\n        dataTypeID: f.dataTypeID\n      }))\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function updateTableSchema(\n  tableName: string,\n  schema: TableSchema\n): Promise<void> {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n\n    // Get current schema\n    const currentSchema = (await fetchSchema()).find(s => s.name === tableName);\n    if (!currentSchema) {\n      throw new Error(`Table ${tableName} not found`);\n    }\n\n    // Find columns to add, modify, and remove\n    const currentColumns = new Map(currentSchema.columns.map(c => [c.name, c]));\n    const newColumns = new Map(schema.columns.map(c => [c.name, c]));\n\n    // Columns to add\n    for (const [name, column] of newColumns) {\n      if (!currentColumns.has(name)) {\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          ADD COLUMN ${sanitizeTableName(name)} ${column.type}\n          ${column.nullable ? '' : 'NOT NULL'}\n          ${column.defaultValue ? `DEFAULT ${column.defaultValue}` : ''}\n        `);\n      }\n    }\n\n    // Columns to modify\n    for (const [name, column] of newColumns) {\n      const currentColumn = currentColumns.get(name);\n      if (currentColumn) {\n        // Modify column type if different\n        if (currentColumn.type !== column.type) {\n          await client.query(`\n            ALTER TABLE ${sanitizeTableName(tableName)}\n            ALTER COLUMN ${sanitizeTableName(name)}\n            TYPE ${column.type}\n            USING ${sanitizeTableName(name)}::${column.type}\n          `);\n        }\n\n        // Modify nullable constraint if different\n        if (currentColumn.nullable !== column.nullable) {\n          await client.query(`\n            ALTER TABLE ${sanitizeTableName(tableName)}\n            ALTER COLUMN ${sanitizeTableName(name)}\n            ${column.nullable ? 'DROP NOT NULL' : 'SET NOT NULL'}\n          `);\n        }\n\n        // Modify default value if different\n        if (currentColumn.defaultValue !== column.defaultValue) {\n          if (column.defaultValue) {\n            await client.query(`\n              ALTER TABLE ${sanitizeTableName(tableName)}\n              ALTER COLUMN ${sanitizeTableName(name)}\n              SET DEFAULT ${column.defaultValue}\n            `);\n          } else {\n            await client.query(`\n              ALTER TABLE ${sanitizeTableName(tableName)}\n              ALTER COLUMN ${sanitizeTableName(name)}\n              DROP DEFAULT\n            `);\n          }\n        }\n      }\n    }\n\n    // Columns to remove\n    for (const [name] of currentColumns) {\n      if (!newColumns.has(name)) {\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          DROP COLUMN ${sanitizeTableName(name)}\n        `);\n      }\n    }\n\n    // Update primary key if changed\n    if (JSON.stringify(currentSchema.primaryKey) !== JSON.stringify(schema.primaryKey)) {\n      // Drop existing primary key\n      await client.query(`\n        DO $$ \n        BEGIN \n          IF EXISTS (\n            SELECT 1 FROM information_schema.table_constraints \n            WHERE table_name = '${tableName}'\n            AND constraint_type = 'PRIMARY KEY'\n          ) THEN\n            EXECUTE (\n              SELECT 'ALTER TABLE ' || quote_ident('${tableName}') || \n                     ' DROP CONSTRAINT ' || quote_ident(constraint_name)\n              FROM information_schema.table_constraints\n              WHERE table_name = '${tableName}'\n              AND constraint_type = 'PRIMARY KEY'\n            );\n          END IF;\n        END $$;\n      `);\n\n      // Add new primary key if specified\n      if (schema.primaryKey && schema.primaryKey.length > 0) {\n        const primaryKeyColumns = schema.primaryKey\n          .map(col => sanitizeTableName(col))\n          .join(', ');\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          ADD PRIMARY KEY (${primaryKeyColumns})\n        `);\n      }\n    }\n\n    await client.query('COMMIT');\n  } catch (error) {\n    await client.query('ROLLBACK');\n    console.error('Error updating schema:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\nexport async function createTableRow(\n  tableName: string,\n  data: Record<string, any>\n): Promise<void> {\n  const client = await pool.connect();\n  try {\n    const columns = Object.keys(data);\n    const values = Object.values(data);\n    const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');\n    \n    const query = `\n      INSERT INTO ${sanitizeTableName(tableName)} \n      (${columns.map(sanitizeTableName).join(', ')})\n      VALUES (${placeholders})\n    `;\n    \n    await client.query(query, values);\n  } catch (error) {\n    console.error('Error creating row:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/PageContainer.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/PageContainer.tsx\");\n  import.meta.hot.lastModified = \"1732570749392.1968\";\n}\n// REMIX HMR END\n\nexport function PageContainer({\n  children\n}) {\n  return <div className=\"h-screen p-4 bg-gray-100 dark:bg-gray-950\">\n      <div className=\"h-full bg-white dark:bg-gray-900 rounded-lg shadow-sm overflow-hidden flex flex-col\">\n        {children}\n      </div>\n    </div>;\n}\n_c = PageContainer;\nvar _c;\n$RefreshReg$(_c, \"PageContainer\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACAlB;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACYlB,kBAAqB;AACrB,2BAAkC;AAXlC,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAkBA,eAAsB,cAAsC;AAC1D,UAAQ,IAAI,+BAA+B;AAC3C,QAAM,SAAS,MAAM,iBAAK,QAAQ;AAClC,MAAI;AACF,YAAQ,IAAI,2CAA2C;AACvD,UAAM,SAAS,MAAM,OAAO,MAWzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA4CF;AAED,YAAQ,IAAI,8CAA8C,OAAO,KAAK,MAAM;AAC5E,WAAO,OAAO,KAAK,IAAI,SAAI;AAzF/B;AAyFmC;AAAA,QAC7B,MAAM,IAAI;AAAA,QACV,SAAS,IAAI;AAAA,QACb,aAAY,SAAI,gBAAJ,YAAmB;AAAA,QAC/B,UAAU,SAAS,IAAI,aAAa,KAAK,EAAE;AAAA,QAC3C,aAAa,SAAS,IAAI,cAAc,KAAK,EAAE;AAAA,MACjD;AAAA,KAAE;AAAA,EACJ,SAAS,OAAP;AACA,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,UAAM;AAAA,EACR,UAAE;AACA,YAAQ,IAAI,+BAA+B;AAC3C,WAAO,QAAQ;AAAA,EACjB;AACF;AA0BA,eAAsB,aAAa,KAAmC;AACpE,QAAM,SAAS,MAAM,iBAAK,QAAQ;AAClC,MAAI;AACF,UAAM,SAAS,MAAM,OAAO,MAAM,GAAG;AACrC,WAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,QAAQ,OAAO,OAAO,IAAI,QAAM;AAAA,QAC9B,MAAM,EAAE;AAAA,QACR,YAAY,EAAE;AAAA,MAChB,EAAE;AAAA,IACJ;AAAA,EACF,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,kBACpB,WACA,QACe;AACf,QAAM,SAAS,MAAM,iBAAK,QAAQ;AAClC,MAAI;AACF,UAAM,OAAO,MAAM,OAAO;AAG1B,UAAM,iBAAiB,MAAM,YAAY,GAAG,KAAK,OAAK,EAAE,SAAS,SAAS;AAC1E,QAAI,CAAC,eAAe;AAClB,YAAM,IAAI,MAAM,SAAS,qBAAqB;AAAA,IAChD;AAGA,UAAM,iBAAiB,IAAI,IAAI,cAAc,QAAQ,IAAI,OAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AAC1E,UAAM,aAAa,IAAI,IAAI,OAAO,QAAQ,IAAI,OAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AAG/D,eAAW,CAAC,MAAM,MAAM,KAAK,YAAY;AACvC,UAAI,CAAC,eAAe,IAAI,IAAI,GAAG;AAC7B,cAAM,OAAO,MAAM;AAAA,4BACH,wCAAkB,SAAS;AAAA,2BAC5B,wCAAkB,IAAI,KAAK,OAAO;AAAA,YAC7C,OAAO,WAAW,KAAK;AAAA,YACvB,OAAO,eAAe,WAAW,OAAO,iBAAiB;AAAA,SAC5D;AAAA,MACH;AAAA,IACF;AAGA,eAAW,CAAC,MAAM,MAAM,KAAK,YAAY;AACvC,YAAM,gBAAgB,eAAe,IAAI,IAAI;AAC7C,UAAI,eAAe;AAEjB,YAAI,cAAc,SAAS,OAAO,MAAM;AACtC,gBAAM,OAAO,MAAM;AAAA,8BACH,wCAAkB,SAAS;AAAA,+BAC1B,wCAAkB,IAAI;AAAA,mBAC9B,OAAO;AAAA,wBACN,wCAAkB,IAAI,MAAM,OAAO;AAAA,WAC5C;AAAA,QACH;AAGA,YAAI,cAAc,aAAa,OAAO,UAAU;AAC9C,gBAAM,OAAO,MAAM;AAAA,8BACH,wCAAkB,SAAS;AAAA,+BAC1B,wCAAkB,IAAI;AAAA,cACnC,OAAO,WAAW,kBAAkB;AAAA,WACvC;AAAA,QACH;AAGA,YAAI,cAAc,iBAAiB,OAAO,cAAc;AACtD,cAAI,OAAO,cAAc;AACvB,kBAAM,OAAO,MAAM;AAAA,gCACH,wCAAkB,SAAS;AAAA,iCAC1B,wCAAkB,IAAI;AAAA,4BACvB,OAAO;AAAA,aACtB;AAAA,UACH,OAAO;AACL,kBAAM,OAAO,MAAM;AAAA,gCACH,wCAAkB,SAAS;AAAA,iCAC1B,wCAAkB,IAAI;AAAA;AAAA,aAEtC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAGA,eAAW,CAAC,IAAI,KAAK,gBAAgB;AACnC,UAAI,CAAC,WAAW,IAAI,IAAI,GAAG;AACzB,cAAM,OAAO,MAAM;AAAA,4BACH,wCAAkB,SAAS;AAAA,4BAC3B,wCAAkB,IAAI;AAAA,SACrC;AAAA,MACH;AAAA,IACF;AAGA,QAAI,KAAK,UAAU,cAAc,UAAU,MAAM,KAAK,UAAU,OAAO,UAAU,GAAG;AAElF,YAAM,OAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,kCAKS;AAAA;AAAA;AAAA;AAAA,sDAIoB;AAAA;AAAA;AAAA,oCAGlB;AAAA;AAAA;AAAA;AAAA;AAAA,OAK7B;AAGD,UAAI,OAAO,cAAc,OAAO,WAAW,SAAS,GAAG;AACrD,cAAM,oBAAoB,OAAO,WAC9B,IAAI,aAAO,wCAAkB,GAAG,CAAC,EACjC,KAAK,IAAI;AACZ,cAAM,OAAO,MAAM;AAAA,4BACH,wCAAkB,SAAS;AAAA,6BACtB;AAAA,SACpB;AAAA,MACH;AAAA,IACF;AAEA,UAAM,OAAO,MAAM,QAAQ;AAAA,EAC7B,SAAS,OAAP;AACA,UAAM,OAAO,MAAM,UAAU;AAC7B,YAAQ,MAAM,0BAA0B,KAAK;AAC7C,UAAM;AAAA,EACR,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;;;ACrPM;AAvBN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,uCAAyC,EAAE;AAAA,EACpF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAkC;AAClC,cAAY,IAAI,eAAe;AACjC;AAGO,SAAS,cAAc;AAAA,EAC5B;AACF,GAAG;AACD,SAAO,mDAAC,SAAI,WAAU,6CAClB,6DAAC,SAAI,WAAU,uFACZ,YADH;AAAA;AAAA;AAAA;AAAA,SAEA,KAHG;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,eAAe;AAEhC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
