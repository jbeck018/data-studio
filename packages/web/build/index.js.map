{
  "version": 3,
  "sources": ["../app/utils/pool.server.ts", "../app/utils/sql-sanitizer.server.ts", "../app/utils/api.server.ts", "../app/entry.server.tsx", "../app/root.tsx", "../app/utils/theme.tsx", "../app/components/Layout.tsx", "../app/lib/auth/session.server.ts", "../app/env.server.ts", "../app/lib/db/db.server.ts", "../app/lib/db/schema.ts", "../app/routes/organizations.$orgId.connections.tsx", "../app/lib/db/schema/organizations.ts", "../app/lib/db/schema/auth.ts", "../app/lib/organizations/organizations.server.ts", "../app/lib/db/schema/connections.ts", "../app/lib/db/connection-manager.server.ts", "../app/components/NewConnectionModal.tsx", "../app/lib/db/test-connection.server.ts", "../app/routes/organizations.$id.tsx", "../app/routes/organizations.new.tsx", "../app/routes/api.connections.ts", "../app/routes/_auth.register.tsx", "../app/lib/auth/auth.server.ts", "../app/routes/organizations.tsx", "../app/routes/_auth.login.tsx", "../app/routes/$tableName.tsx", "../app/components/TabView.tsx", "../app/utils/cn.ts", "../app/components/DataView.tsx", "../app/components/EmptyState.tsx", "../app/components/RowDetailsSidebar.tsx", "../app/hooks/useClient.ts", "../app/routes/api.query.ts", "../app/routes/_index.tsx", "../app/components/TableList.tsx", "../app/components/PageContainer.tsx", "../app/routes/signup.tsx", "../app/services/auth.server.ts", "../app/routes/query.tsx", "../app/components/LoadingSpinner.tsx", "../app/components/Alert.tsx", "../app/lib/db/query-engine.server.ts", "../app/components/SQLEditor.tsx", "../app/hooks/useTheme.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import pkg from 'pg';\nconst { Pool } = pkg;\n\nexport const pool = new Pool({\n  user: process.env.PGUSER || 'postgres',\n  host: process.env.PGHOST || 'localhost',\n  database: process.env.PGDATABASE || 'postgres',\n  password: process.env.PGPASSWORD || 'postgres',\n  port: parseInt(process.env.PGPORT || '5432'),\n});\n\n// Add error handler\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n", "import { format } from \"sql-formatter\";\n\n/**\n * Sanitizes table and column names to prevent SQL injection.\n * Only allows alphanumeric characters and underscores.\n * Removes any other characters that could be used for SQL injection.\n */\nexport function sanitizeTableName(name: string): string {\n  if (!name) {\n    throw new Error('Table or column name cannot be empty');\n  }\n\n  // Remove any characters that aren't alphanumeric or underscores\n  const sanitized = name.replace(/[^a-zA-Z0-9_]/g, '');\n\n  // Ensure the name starts with a letter\n  if (!/^[a-zA-Z]/.test(sanitized)) {\n    throw new Error('Table or column name must start with a letter');\n  }\n\n  // Ensure we still have a valid name after sanitization\n  if (sanitized.length === 0) {\n    throw new Error('Invalid table or column name');\n  }\n\n  // Convert to lowercase for consistency\n  return sanitized.toLowerCase();\n}\n\n/**\n * Validates and formats a schema name.\n * By default, uses 'public' schema if none is provided.\n */\nexport function sanitizeSchemaName(schema: string = 'public'): string {\n  const sanitized = sanitizeTableName(schema);\n  return sanitized;\n}\n\n/**\n * Validates and formats column names for SELECT statements.\n */\nexport function sanitizeColumnList(columns: string[]): string {\n  if (!columns || columns.length === 0) {\n    return '*';\n  }\n\n  return columns\n    .map(col => {\n      // Handle special case for *\n      if (col === '*') return col;\n      return sanitizeTableName(col);\n    })\n    .join(', ');\n}\n\n/**\n * Creates a safe parameterized WHERE clause.\n * Returns both the clause string and the values array for parameterized queries.\n */\nexport function createWhereClause(\n  conditions: Record<string, any>\n): { clause: string; values: any[] } {\n  const values: any[] = [];\n  const clauses: string[] = [];\n\n  Object.entries(conditions).forEach(([key, value], index) => {\n    const sanitizedKey = sanitizeTableName(key);\n    clauses.push(`${sanitizedKey} = $${index + 1}`);\n    values.push(value);\n  });\n\n  return {\n    clause: clauses.length > 0 ? `WHERE ${clauses.join(' AND ')}` : '',\n    values,\n  };\n}\n\n/**\n * Creates a safe ORDER BY clause.\n */\nexport function createOrderByClause(\n  orderBy: { column: string; direction?: 'ASC' | 'DESC' }[]\n): string {\n  if (!orderBy || orderBy.length === 0) return '';\n\n  const orderClauses = orderBy.map(({ column, direction = 'ASC' }) => {\n    const sanitizedColumn = sanitizeTableName(column);\n    const sanitizedDirection = direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC';\n    return `${sanitizedColumn} ${sanitizedDirection}`;\n  });\n\n  return `ORDER BY ${orderClauses.join(', ')}`;\n}\n\n/**\n * Validates and formats a LIMIT clause value.\n */\nexport function sanitizeLimit(limit?: number): string {\n  if (!limit || limit <= 0) return '';\n  return `LIMIT ${Math.floor(limit)}`;\n}\n\nclass SQLSanitizer {\n  private readonly allowedTableNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n  private readonly allowedColumnNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n\n  private validateTableName(tableName: string): boolean {\n    return this.allowedTableNamePattern.test(tableName);\n  }\n\n  private validateColumnName(columnName: string): boolean {\n    return this.allowedColumnNamePattern.test(columnName);\n  }\n\n  private escapeValue(value: any): string {\n    if (value === null) return \"NULL\";\n    if (typeof value === \"number\") return value.toString();\n    if (typeof value === \"boolean\") return value ? \"TRUE\" : \"FALSE\";\n    return `'${value.toString().replace(/'/g, \"''\")}'`;\n  }\n\n  sanitizeTableQuery(tableName: string, filters?: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    let query = `SELECT * FROM \"${tableName}\"`;\n\n    if (filters && Object.keys(filters).length > 0) {\n      const whereConditions = Object.entries(filters)\n        .filter(([column]) => this.validateColumnName(column))\n        .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n        .join(\" AND \");\n\n      if (whereConditions) {\n        query += ` WHERE ${whereConditions}`;\n      }\n    }\n\n    return format(query + \";\");\n  }\n\n  sanitizeSchemaQuery(tableName: string): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    const query = `\n      SELECT \n        column_name,\n        data_type,\n        is_nullable,\n        column_default,\n        CASE \n          WHEN pk.constraint_type = 'PRIMARY KEY' THEN true\n          ELSE false\n        END as is_primary_key\n      FROM information_schema.columns c\n      LEFT JOIN (\n        SELECT kcu.column_name, tc.constraint_type\n        FROM information_schema.table_constraints tc\n        JOIN information_schema.key_column_usage kcu\n          ON tc.constraint_name = kcu.constraint_name\n          AND tc.table_schema = kcu.table_schema\n        WHERE tc.table_name = '${tableName}'\n          AND tc.constraint_type = 'PRIMARY KEY'\n      ) pk ON c.column_name = pk.column_name\n      WHERE table_name = '${tableName}'\n      ORDER BY ordinal_position;\n    `;\n\n    return format(query);\n  }\n\n  sanitizeUpdateQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any },\n    data: Record<string, any>\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new Error(\"Invalid primary key column name\");\n    }\n\n    const setClauses = Object.entries(data)\n      .filter(([column]) => this.validateColumnName(column))\n      .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n      .join(\", \");\n\n    const query = `\n      UPDATE \"${tableName}\"\n      SET ${setClauses}\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)}\n      RETURNING *;\n    `;\n\n    return format(query);\n  }\n\n  sanitizeDeleteQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any }\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new Error(\"Invalid primary key column name\");\n    }\n\n    const query = `\n      DELETE FROM \"${tableName}\"\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)};\n    `;\n\n    return format(query);\n  }\n\n  sanitizeInsertQuery(tableName: string, data: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    const columns = Object.keys(data).filter((column) =>\n      this.validateColumnName(column)\n    );\n    const values = columns.map((column) => this.escapeValue(data[column]));\n\n    const query = `\n      INSERT INTO \"${tableName}\" (${columns.map((c) => `\"${c}\"`).join(\", \")})\n      VALUES (${values.join(\", \")})\n      RETURNING *;\n    `;\n\n    return format(query);\n  }\n}\n\nexport const sqlSanitizer = new SQLSanitizer();\n", "import type { TableDataResponse, TableSchema, QueryResult } from '~/types';\nimport { pool } from './pool.server';\nimport { sanitizeTableName } from './sql-sanitizer.server';\n\nexport async function fetchSchema(): Promise<TableSchema[]> {\n  console.log('Attempting to fetch schema...');\n  const client = await pool.connect();\n  try {\n    console.log('Connected to database, executing query...');\n    const result = await client.query<{\n      table_name: string;\n      columns: Array<{\n        column_name: string;\n        data_type: string;\n        is_nullable: string;\n        column_default: string | null;\n      }>;\n      primary_key: string[] | null;\n    }>(`\n      SELECT \n        tables.table_name,\n        json_agg(\n          json_build_object(\n            'column_name', columns.column_name,\n            'data_type', columns.data_type,\n            'is_nullable', columns.is_nullable,\n            'column_default', columns.column_default\n          )\n        ) as columns,\n        json_agg(\n          CASE WHEN pk.column_name IS NOT NULL \n          THEN columns.column_name \n          END\n        ) FILTER (WHERE pk.column_name IS NOT NULL) as primary_key\n      FROM \n        information_schema.tables\n        JOIN information_schema.columns ON tables.table_name = columns.table_name\n        LEFT JOIN (\n          SELECT \n            tc.table_name, kcu.column_name\n          FROM \n            information_schema.table_constraints tc\n            JOIN information_schema.key_column_usage kcu \n              ON tc.constraint_name = kcu.constraint_name\n          WHERE tc.constraint_type = 'PRIMARY KEY'\n        ) pk ON tables.table_name = pk.table_name \n          AND columns.column_name = pk.column_name\n      WHERE \n        tables.table_schema = 'public'\n      GROUP BY \n        tables.table_name;\n    `);\n\n    return result.rows.map(row => ({\n      name: row.table_name,\n      columns: row.columns.map(col => ({\n        name: col.column_name,\n        type: col.data_type,\n        nullable: col.is_nullable === 'YES',\n        defaultValue: col.column_default || undefined\n      })),\n      primaryKey: row.primary_key || undefined,\n      rowCount: 0, // This would need a separate query to get accurate count\n      sizeInBytes: 0 // This would need a separate query to get accurate size\n    }));\n  } finally {\n    client.release();\n  }\n}\n\nexport async function fetchTableData(\n  tableName: string,\n  sortBy?: string,\n  sortOrder: 'asc' | 'desc' = 'asc'\n): Promise<TableDataResponse> {\n  const sanitizedTableName = sanitizeTableName(tableName);\n  const sanitizedSortBy = sortBy ? sanitizeTableName(sortBy) : null;\n  \n  const orderClause = sanitizedSortBy \n    ? `ORDER BY \"${sanitizedSortBy}\" ${sortOrder}`\n    : '';\n\n  const client = await pool.connect();\n  try {\n    const result = await client.query(\n      `SELECT * FROM \"${sanitizedTableName}\" ${orderClause}`\n    );\n    \n    return {\n      data: result.rows,\n      totalRows: result.rowCount || 0\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function executeQuery(sql: string): Promise<QueryResult> {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(sql);\n    return {\n      rows: result.rows,\n      fields: result.fields.map(field => ({\n        name: field.name,\n        dataTypeID: field.dataTypeID\n      }))\n    };\n  } finally {\n    client.release();\n  }\n}\n", "import { PassThrough } from \"node:stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n): Promise<Response> {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n): Promise<Response> {\n  return new Promise<Response>((resolve, reject) => {\n    let didError = false;\n    \n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n      />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body as unknown as ReadableStream, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n): Promise<Response> {\n  return new Promise<Response>((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n      />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body as unknown as ReadableStream, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData } from\n\"@remix-run/react\";\nimport { LinksFunction, LoaderFunctionArgs, json } from \"@remix-run/node\";\nimport stylesheet from \"./tailwind.css?url\";\nimport { ThemeProvider } from \"./utils/theme\";\nimport Layout from \"./components/Layout\";\nimport { getUser } from \"./lib/auth/session.server\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: stylesheet }];\n\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  return json({\n    user: await getUser(request),\n    ENV: {\n      NODE_ENV: process.env.NODE_ENV\n    }\n  });\n}\n\nexport default function App() {\n  const { user, ENV } = useLoaderData<typeof loader>();\n\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full bg-light-bg-primary text-light-text-primary dark:bg-dark-bg-primary dark:text-dark-text-primary\">\n        <ThemeProvider>\n          <Layout user={user}>\n            <Outlet />\n          </Layout>\n        </ThemeProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n        <script\n          dangerouslySetInnerHTML={{\n            __html: `window.ENV = ${JSON.stringify(ENV)}`\n          }} />\n\n      </body>\n    </html>);\n\n}", "import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Only check localStorage and media query on the client side\n    if (typeof window === \"undefined\") return \"light\";\n    \n    const saved = localStorage.getItem(\"theme\") as Theme;\n    if (saved) return saved;\n    \n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    // Remove both classes first\n    root.classList.remove(\"light\", \"dark\");\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    \n    // Store the theme preference\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    console.log(\"Toggle theme\");\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  // Set initial theme class on the client side\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.add(theme);\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n", "import { Form, Link, useLocation } from \"@remix-run/react\";\nimport { useTheme } from \"~/utils/theme\";\nimport {\n  TableCellsIcon as TableIcon,\n  CircleStackIcon as DatabaseIcon,\n  SunIcon,\n  MoonIcon,\n  UserCircleIcon,\n  Cog6ToothIcon,\n  BuildingLibraryIcon,\n} from \"@heroicons/react/24/outline\";\nimport { Menu, Transition } from '@headlessui/react';\nimport { Fragment } from \"react\";\nimport clsx from \"clsx\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n}\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  user?: User | null;\n}\n\nexport default function Layout({ children, user }: LayoutProps) {\n  const { theme, toggleTheme } = useTheme();\n  const location = useLocation();\n\n  const navigation = [\n    { name: 'Tables', href: '/', icon: TableIcon },\n    { name: 'Databases', href: '/databases', icon: DatabaseIcon },\n    { name: 'Run Query', href: '/query', icon: DatabaseIcon },\n  ];\n\n  const userNavigation = [\n    { name: 'Your Profile', href: '/profile' },\n    { name: 'Organizations', href: '/organizations' },\n    { name: 'Settings', href: '/settings' },\n  ];\n\n  return (\n    <div className=\"flex h-screen bg-light-bg-secondary dark:bg-dark-bg-primary\">\n      {/* Sidebar */}\n      <div className=\"w-[297px] p-4\">\n        <div className=\"flex h-full flex-col rounded-2xl bg-light-bg-primary dark:bg-dark-bg-secondary shadow-lg\">\n          <div className=\"flex flex-1 flex-col overflow-y-auto pt-5 pb-4\">\n            <div className=\"flex flex-shrink-0 items-center px-4\">\n              <h1 className=\"text-xl font-bold text-light-text-primary dark:text-dark-text-primary\">Data Studio</h1>\n            </div>\n            <nav className=\"mt-5 flex-1 space-y-1 px-2\">\n              {navigation.map((item) => {\n                const isActive = location.pathname === item.href;\n                return (\n                  <Link\n                    key={item.name}\n                    to={item.href}\n                    className={clsx(\n                      isActive\n                        ? 'bg-light-bg-tertiary dark:bg-dark-bg-tertiary text-light-text-primary dark:text-dark-text-primary'\n                        : 'text-light-text-secondary dark:text-dark-text-secondary hover:bg-light-bg-secondary dark:hover:bg-dark-bg-tertiary',\n                      'group flex items-center px-3 py-2 text-sm font-medium rounded-xl transition-colors'\n                    )}\n                  >\n                    <item.icon\n                      className={clsx(\n                        isActive\n                          ? 'text-light-text-primary dark:text-dark-text-primary'\n                          : 'text-light-text-secondary dark:text-dark-text-secondary group-hover:text-light-text-primary dark:group-hover:text-dark-text-primary',\n                        'mr-3 flex-shrink-0 h-5 w-5'\n                      )}\n                      aria-hidden=\"true\"\n                    />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          <div className=\"flex flex-shrink-0 border-t border-light-border dark:border-dark-border p-4 space-y-3 flex-col\">\n            {user ? (\n              <Menu as=\"div\" className=\"relative\">\n                <Menu.Button className=\"flex items-center w-full px-4 py-2 text-sm font-medium text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\">\n                  <UserCircleIcon className=\"h-5 w-5 mr-2\" />\n                  <span className=\"flex-1 text-left\">{user.name}</span>\n                </Menu.Button>\n                <Transition\n                  as={Fragment}\n                  enter=\"transition ease-out duration-100\"\n                  enterFrom=\"transform opacity-0 scale-95\"\n                  enterTo=\"transform opacity-100 scale-100\"\n                  leave=\"transition ease-in duration-75\"\n                  leaveFrom=\"transform opacity-100 scale-100\"\n                  leaveTo=\"transform opacity-0 scale-95\"\n                >\n                  <Menu.Items className=\"absolute left-0 right-0 mt-2 origin-top-right rounded-md bg-white dark:bg-dark-bg-tertiary shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                    <div className=\"py-1\">\n                      {userNavigation.map((item) => (\n                        <Menu.Item key={item.name}>\n                          {({ active }) => (\n                            <Link\n                              to={item.href}\n                              className={clsx(\n                                active ? 'bg-gray-100 dark:bg-dark-bg-secondary' : '',\n                                'block px-4 py-2 text-sm text-gray-700 dark:text-dark-text-primary'\n                              )}\n                            >\n                              {item.name}\n                            </Link>\n                          )}\n                        </Menu.Item>\n                      ))}\n                      <Menu.Item>\n                        {({ active }) => (\n                          <Form action=\"/logout\" method=\"post\">\n                            <button\n                              type=\"submit\"\n                              className={clsx(\n                                active ? 'bg-gray-100 dark:bg-dark-bg-secondary' : '',\n                                'block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-dark-text-primary'\n                              )}\n                            >\n                              Sign out\n                            </button>\n                          </Form>\n                        )}\n                      </Menu.Item>\n                    </div>\n                  </Menu.Items>\n                </Transition>\n              </Menu>\n            ) : (\n              <div className=\"space-y-2\">\n                <Link\n                  to=\"/login\"\n                  className=\"flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\"\n                >\n                  Sign in\n                </Link>\n                <Link\n                  to=\"/register\"\n                  className=\"flex items-center justify-center w-full px-4 py-2 text-sm font-medium bg-blue-600 text-white hover:bg-blue-500 rounded-lg transition-colors\"\n                >\n                  Sign up\n                </Link>\n              </div>\n            )}\n            <button\n              onClick={toggleTheme}\n              className=\"flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\"\n            >\n              {theme === 'dark' ? (\n                <SunIcon className=\"h-5 w-5 mr-2\" />\n              ) : (\n                <MoonIcon className=\"h-5 w-5 mr-2\" />\n              )}\n              {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 min-w-0 p-4\">\n        <main className=\"w-full h-full bg-light-bg-primary dark:bg-dark-bg-secondary rounded-2xl shadow-lg overflow-hidden\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n", "import { createCookieSessionStorage, redirect } from '@remix-run/node';\nimport { env } from '~/env.server';\nimport { db } from '~/lib/db/db.server';\nimport { users } from '~/lib/db/schema';\nimport { eq } from 'drizzle-orm';\n\n// Session configuration\nconst sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: '__session',\n    httpOnly: true,\n    path: '/',\n    sameSite: 'lax',\n    secrets: [env.SESSION_SECRET],\n    secure: env.NODE_ENV === 'production',\n  },\n});\n\n// Get the user session\nexport async function getUserSession(request: Request) {\n  return sessionStorage.getSession(request.headers.get('Cookie'));\n}\n\n// Get the logged-in user\nexport async function getUser(request: Request) {\n  const session = await getUserSession(request);\n  const userId = session.get('userId');\n  if (!userId) return null;\n\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId),\n    columns: {\n      id: true,\n      email: true,\n      name: true,\n    },\n  });\n\n  if (!user) {\n    throw await logout(request);\n  }\n\n  return user;\n}\n\n// Create a new session\nexport async function createUserSession(userId: string, redirectTo: string) {\n  const session = await sessionStorage.getSession();\n  session.set('userId', userId);\n  return redirect(redirectTo, {\n    headers: {\n      'Set-Cookie': await sessionStorage.commitSession(session),\n    },\n  });\n}\n\n// Log out the user\nexport async function logout(request: Request) {\n  const session = await getUserSession(request);\n  return redirect('/', {\n    headers: {\n      'Set-Cookie': await sessionStorage.destroySession(session),\n    },\n  });\n}\n\n// Require authentication\nexport async function requireUser(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname,\n) {\n  const user = await getUser(request);\n  if (!user) {\n    const searchParams = new URLSearchParams([['redirectTo', redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return user;\n}\n", "import { z } from 'zod';\n\nconst envSchema = z.object({\n  // Node environment\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n\n  // System database settings\n  SYSTEM_DB_HOST: z.string().default('localhost'),\n  SYSTEM_DB_PORT: z.coerce.number().default(5432),\n  SYSTEM_DB_USER: z.string().default('postgres'),\n  SYSTEM_DB_PASSWORD: z.string().default('postgres'),\n  SYSTEM_DB_NAME: z.string().default('data_studio_system'),\n\n  // Session configuration\n  SESSION_SECRET: z.string().min(32).default('at-least-32-characters-long-session-secret'),\n\n  // Encryption settings for database credentials\n  ENCRYPTION_KEY: z.string().min(32).default('at-least-32-characters-long-encryption-key'),\n  ENCRYPTION_IV: z.string().default('16-chars-enc-iv'),\n});\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv extends z.infer<typeof envSchema> {}\n  }\n}\n\nexport const env = envSchema.parse(process.env);\n", "import { drizzle } from 'drizzle-orm/node-postgres';\nimport pkg from 'pg';\nconst { Pool } = pkg;\n\nimport { env } from '~/env.server';\n\n// Create system database connection pool\nconst pool = new Pool({\n  host: env.SYSTEM_DB_HOST,\n  port: env.SYSTEM_DB_PORT,\n  user: env.SYSTEM_DB_USER,\n  password: env.SYSTEM_DB_PASSWORD,\n  database: env.SYSTEM_DB_NAME,\n});\n\n// Create drizzle database instance\nexport const db = drizzle(pool, {\n  logger: env.NODE_ENV === 'development',\n});\n", "import { pgTable, text, timestamp, uuid, boolean, jsonb } from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema, createSelectSchema } from 'drizzle-zod';\n\n// Organizations table\nexport const organizations = pgTable('organizations', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  name: text('name').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Users table\nexport const users = pgTable('users', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  email: text('email').notNull().unique(),\n  name: text('name').notNull(),\n  passwordHash: text('password_hash').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Organization members table (many-to-many relationship)\nexport const organizationMembers = pgTable('organization_members', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  organizationId: uuid('organization_id').notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  userId: uuid('user_id').notNull().references(() => users.id, { onDelete: 'cascade' }),\n  role: text('role').notNull(), // 'admin', 'member'\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Database connections table\nexport const databaseConnections = pgTable('database_connections', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  organizationId: uuid('organization_id').notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text('name').notNull(),\n  type: text('type').notNull(), // 'postgresql', etc.\n  // Encrypted connection details stored as JSON\n  credentials: jsonb('credentials').notNull(),\n  isActive: boolean('is_active').default(true).notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n  lastConnectedAt: timestamp('last_connected_at'),\n});\n\n// Saved queries table\nexport const savedQueries = pgTable('saved_queries', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  organizationId: uuid('organization_id').notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  connectionId: uuid('connection_id').notNull().references(() => databaseConnections.id, { onDelete: 'cascade' }),\n  name: text('name').notNull(),\n  description: text('description'),\n  query: text('query').notNull(),\n  createdBy: uuid('created_by').notNull().references(() => users.id),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n  updatedAt: timestamp('updated_at').defaultNow().notNull(),\n});\n\n// Query history table\nexport const queryHistory = pgTable('query_history', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  organizationId: uuid('organization_id').notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  connectionId: uuid('connection_id').notNull().references(() => databaseConnections.id, { onDelete: 'cascade' }),\n  userId: uuid('user_id').notNull().references(() => users.id),\n  query: text('query').notNull(),\n  executionTimeMs: text('execution_time_ms'),\n  status: text('status').notNull(), // 'success', 'error'\n  error: text('error'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Define relationships\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  members: many(organizationMembers),\n  connections: many(databaseConnections),\n  savedQueries: many(savedQueries),\n  queryHistory: many(queryHistory),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  organizations: many(organizationMembers),\n  savedQueries: many(savedQueries),\n  queryHistory: many(queryHistory),\n}));\n\n// Zod schemas for validation\nexport const insertOrganizationSchema = createInsertSchema(organizations);\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertDatabaseConnectionSchema = createInsertSchema(databaseConnections);\nexport const insertSavedQuerySchema = createInsertSchema(savedQueries);\n\n// Export select schemas\nexport const selectOrganizationSchema = createSelectSchema(organizations);\nexport const selectUserSchema = createSelectSchema(users);\nexport const selectDatabaseConnectionSchema = createSelectSchema(databaseConnections);\nexport const selectSavedQuerySchema = createSelectSchema(savedQueries);\n", "import { json, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"~/lib/auth/session.server\";\nimport { getOrganizationRole } from \"~/lib/organizations/organizations.server\";\nimport { db } from \"~/lib/db/db.server\";\nimport { databaseConnections } from \"~/lib/db/schema/connections\";\nimport { eq } from \"drizzle-orm\";\nimport { ConnectionManager } from \"~/lib/db/connection-manager.server\";\nimport { z } from \"zod\";\nimport { useState } from \"react\";\nimport NewConnectionModal from \"~/components/NewConnectionModal\";\nimport { testPostgresConnection } from \"~/lib/db/test-connection.server\";\n\nconst ConnectionSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.coerce.number().int().min(1).max(65535),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.boolean().optional(),\n});\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  const role = await getOrganizationRole(params.orgId!, user.id);\n  \n  if (!role) {\n    throw new Response(\"Unauthorized\", { status: 403 });\n  }\n\n  const connections = await db.query.databaseConnections.findMany({\n    where: eq(databaseConnections.organizationId, params.orgId!),\n  });\n\n  return json({ connections, role });\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const role = await getOrganizationRole(params.orgId!, user.id);\n  \n  if (!role || role === \"member\") {\n    throw new Response(\"Unauthorized\", { status: 403 });\n  }\n\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n\n  switch (intent) {\n    case \"create\": {\n      const result = ConnectionSchema.safeParse({\n        name: formData.get(\"name\"),\n        host: formData.get(\"host\"),\n        port: formData.get(\"port\"),\n        database: formData.get(\"database\"),\n        username: formData.get(\"username\"),\n        password: formData.get(\"password\"),\n        ssl: formData.get(\"ssl\") === \"true\",\n      });\n\n      if (!result.success) {\n        return json({ errors: result.error.flatten() }, { status: 400 });\n      }\n\n      const { name, ...config } = result.data;\n\n      // Test the connection before saving\n      try {\n        await testPostgresConnection(config);\n      } catch (error) {\n        return json({ error: `Failed to connect: ${error.message}` }, { status: 400 });\n      }\n\n      await db.insert(databaseConnections).values({\n        name,\n        type: \"postgresql\",\n        organizationId: params.orgId!,\n        createdById: user.id,\n        config,\n      });\n\n      return null;\n    }\n\n    case \"delete\": {\n      const connectionId = formData.get(\"connectionId\");\n      if (typeof connectionId !== \"string\") {\n        return json({ error: \"Invalid connection ID\" }, { status: 400 });\n      }\n\n      // Close the connection if it's active\n      await ConnectionManager.getInstance().closeConnection(connectionId);\n\n      // Delete the connection from the database\n      await db.delete(databaseConnections)\n        .where(eq(databaseConnections.id, connectionId));\n\n      return null;\n    }\n\n    case \"test\": {\n      const connectionId = formData.get(\"connectionId\");\n      if (typeof connectionId !== \"string\") {\n        return json({ error: \"Invalid connection ID\" }, { status: 400 });\n      }\n\n      try {\n        const pool = await ConnectionManager.getInstance().getConnection(connectionId);\n        const client = await pool.connect();\n        client.release();\n        return json({ success: true });\n      } catch (error) {\n        return json({ error: error.message }, { status: 400 });\n      }\n    }\n\n    default:\n      throw new Response(\"Invalid intent\", { status: 400 });\n  }\n}\n\nexport default function ConnectionsPage() {\n  const { connections, role } = useLoaderData<typeof loader>();\n  const canManage = role === \"owner\" || role === \"admin\";\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-2xl font-semibold\">Database Connections</h1>\n          {canManage && (\n            <button\n              type=\"button\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n              onClick={() => setIsModalOpen(true)}\n            >\n              New Connection\n            </button>\n          )}\n        </div>\n\n        <div className=\"space-y-4\">\n          {connections.map((connection) => (\n            <div\n              key={connection.id}\n              className=\"bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg p-6\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h2 className=\"text-lg font-medium mb-1\">{connection.name}</h2>\n                  <p className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n                    {connection.config.host}:{connection.config.port}/{connection.config.database}\n                  </p>\n                </div>\n                {canManage && (\n                  <div className=\"flex space-x-4\">\n                    <Form method=\"post\">\n                      <input type=\"hidden\" name=\"intent\" value=\"test\" />\n                      <input type=\"hidden\" name=\"connectionId\" value={connection.id} />\n                      <button\n                        type=\"submit\"\n                        className=\"text-blue-600 hover:text-blue-500\"\n                      >\n                        Test Connection\n                      </button>\n                    </Form>\n                    <Form method=\"post\">\n                      <input type=\"hidden\" name=\"intent\" value=\"delete\" />\n                      <input type=\"hidden\" name=\"connectionId\" value={connection.id} />\n                      <button\n                        type=\"submit\"\n                        className=\"text-red-600 hover:text-red-500\"\n                        onClick={(e) => {\n                          if (!confirm(\"Are you sure you want to delete this connection?\")) {\n                            e.preventDefault();\n                          }\n                        }}\n                      >\n                        Delete\n                      </button>\n                    </Form>\n                  </div>\n                )}\n              </div>\n              <div className=\"mt-4 text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n                <p>Created by {connection.createdBy.name}</p>\n                <p>Last used: {connection.lastUsedAt ? new Date(connection.lastUsedAt).toLocaleString() : 'Never'}</p>\n              </div>\n            </div>\n          ))}\n\n          {connections.length === 0 && (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium mb-2\">No database connections</h3>\n              <p className=\"text-light-text-secondary dark:text-dark-text-secondary mb-4\">\n                Add your first database connection to get started\n              </p>\n              {canManage && (\n                <button\n                  type=\"button\"\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n                  onClick={() => setIsModalOpen(true)}\n                >\n                  New Connection\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <NewConnectionModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />\n    </div>\n  );\n}\n", "import { text, timestamp, pgTable, uuid } from \"drizzle-orm/pg-core\";\nimport { createId } from \"@paralleldrive/cuid2\";\nimport { users } from \"./auth\";\n\nexport const organizations = pgTable(\"organizations\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => createId()),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const organizationMembers = pgTable(\"organization_members\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => createId()),\n  organizationId: uuid(\"organization_id\")\n    .notNull()\n    .references(() => organizations.id, { onDelete: \"cascade\" }),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  role: text(\"role\", { enum: [\"owner\", \"admin\", \"member\"] }).notNull().default(\"member\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport type Organization = typeof organizations.$inferSelect;\nexport type NewOrganization = typeof organizations.$inferInsert;\nexport type OrganizationMember = typeof organizationMembers.$inferSelect;\nexport type NewOrganizationMember = typeof organizationMembers.$inferInsert;\n", "import { text, timestamp, pgTable, uuid } from \"drizzle-orm/pg-core\";\nimport { createId } from \"@paralleldrive/cuid2\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => createId()),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  hashedPassword: text(\"hashed_password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => createId()),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\n", "import { db } from \"~/lib/db/db.server\";\nimport { organizations, organizationMembers } from \"~/lib/db/schema/organizations\";\nimport { eq, and } from \"drizzle-orm\";\nimport { createId } from \"@paralleldrive/cuid2\";\n\ninterface CreateOrganizationInput {\n  name: string;\n  userId: string;\n}\n\ninterface UpdateOrganizationInput {\n  name?: string;\n}\n\nexport async function createOrganization({ name, userId }: CreateOrganizationInput) {\n  const slug = `${name.toLowerCase().replace(/[^a-z0-9]+/g, \"-\")}-${createId().slice(0, 8)}`;\n\n  const [organization] = await db.insert(organizations)\n    .values({ name, slug })\n    .returning();\n\n  await db.insert(organizationMembers)\n    .values({\n      organizationId: organization.id,\n      userId,\n      role: \"owner\",\n    });\n\n  return organization;\n}\n\nexport async function updateOrganization(id: string, { name }: UpdateOrganizationInput) {\n  const [organization] = await db.update(organizations)\n    .set({ name, updatedAt: new Date() })\n    .where(eq(organizations.id, id))\n    .returning();\n\n  return organization;\n}\n\nexport async function deleteOrganization(id: string) {\n  await db.delete(organizations)\n    .where(eq(organizations.id, id));\n}\n\nexport async function getOrganization(id: string) {\n  return db.query.organizations.findFirst({\n    where: eq(organizations.id, id),\n    with: {\n      members: {\n        with: {\n          user: true,\n        },\n      },\n    },\n  });\n}\n\nexport async function getUserOrganizations(userId: string) {\n  return db.query.organizationMembers.findMany({\n    where: eq(organizationMembers.userId, userId),\n    with: {\n      organization: true,\n    },\n  });\n}\n\nexport async function addOrganizationMember(organizationId: string, userId: string, role: \"admin\" | \"member\" = \"member\") {\n  const [member] = await db.insert(organizationMembers)\n    .values({ organizationId, userId, role })\n    .returning();\n\n  return member;\n}\n\nexport async function updateOrganizationMemberRole(organizationId: string, userId: string, role: \"admin\" | \"member\") {\n  const [member] = await db.update(organizationMembers)\n    .set({ role, updatedAt: new Date() })\n    .where(\n      and(\n        eq(organizationMembers.organizationId, organizationId),\n        eq(organizationMembers.userId, userId)\n      )\n    )\n    .returning();\n\n  return member;\n}\n\nexport async function removeOrganizationMember(organizationId: string, userId: string) {\n  await db.delete(organizationMembers)\n    .where(\n      and(\n        eq(organizationMembers.organizationId, organizationId),\n        eq(organizationMembers.userId, userId)\n      )\n    );\n}\n\nexport async function getOrganizationRole(organizationId: string, userId: string) {\n  const member = await db.query.organizationMembers.findFirst({\n    where: and(\n      eq(organizationMembers.organizationId, organizationId),\n      eq(organizationMembers.userId, userId)\n    ),\n  });\n\n  return member?.role;\n}\n", "import { text, timestamp, pgTable, jsonb, uuid } from \"drizzle-orm/pg-core\";\nimport { createId } from \"@paralleldrive/cuid2\";\nimport { organizations } from \"./organizations\";\nimport { users } from \"./auth\";\n\nexport const databaseConnections = pgTable(\"database_connections\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => createId()),\n  name: text(\"name\").notNull(),\n  type: text(\"type\", { enum: [\"postgresql\"] }).notNull(),\n  organizationId: uuid(\"organization_id\")\n    .notNull()\n    .references(() => organizations.id, { onDelete: \"cascade\" }),\n  createdById: uuid(\"created_by_id\")\n    .notNull()\n    .references(() => users.id),\n  config: jsonb(\"config\").notNull(),\n  lastUsedAt: timestamp(\"last_used_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport type DatabaseConnection = typeof databaseConnections.$inferSelect;\nexport type NewDatabaseConnection = typeof databaseConnections.$inferInsert;\n\nexport interface PostgresConnectionConfig {\n  host: string;\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n  ssl?: boolean;\n}\n\nexport const queryHistory = pgTable(\"query_history\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => createId()),\n  connectionId: uuid(\"connection_id\")\n    .notNull()\n    .references(() => databaseConnections.id, { onDelete: \"cascade\" }),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id),\n  query: text(\"query\").notNull(),\n  status: text(\"status\", { enum: [\"success\", \"error\"] }).notNull(),\n  error: text(\"error\"),\n  executionTimeMs: text(\"execution_time_ms\"),\n  rowCount: text(\"row_count\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport type QueryHistory = typeof queryHistory.$inferSelect;\nexport type NewQueryHistory = typeof queryHistory.$inferInsert;\n", "import pkg from 'pg';\nconst { Pool } = pkg;\ntype PoolConfig = pkg.PoolConfig;\n\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { eq } from 'drizzle-orm';\nimport { createHash } from 'crypto';\nimport { databaseConnections } from './schema';\nimport { db } from './db.server';\n\ninterface ConnectionPool {\n  pool: Pool;\n  lastUsed: number;\n}\n\nexport class ConnectionManager {\n  private static instance: ConnectionManager;\n  private pools: Map<string, ConnectionPool> = new Map();\n  private readonly maxIdleTime = 5 * 60 * 1000; // 5 minutes\n  private readonly cleanupInterval = 60 * 1000; // 1 minute\n\n  private constructor() {\n    this.startCleanupInterval();\n  }\n\n  public static getInstance(): ConnectionManager {\n    if (!ConnectionManager.instance) {\n      ConnectionManager.instance = new ConnectionManager();\n    }\n    return ConnectionManager.instance;\n  }\n\n  private startCleanupInterval() {\n    setInterval(() => {\n      this.cleanupIdlePools();\n    }, this.cleanupInterval);\n  }\n\n  private cleanupIdlePools() {\n    const now = Date.now();\n    for (const [key, { pool, lastUsed }] of this.pools.entries()) {\n      if (now - lastUsed > this.maxIdleTime) {\n        pool.end();\n        this.pools.delete(key);\n      }\n    }\n  }\n\n  private getPoolKey(config: PoolConfig): string {\n    const configString = JSON.stringify(config);\n    return createHash('sha256').update(configString).digest('hex');\n  }\n\n  private decryptCredentials(encryptedCredentials: any): PoolConfig {\n    // TODO: Implement proper decryption\n    return encryptedCredentials as PoolConfig;\n  }\n\n  async getConnection(connectionId: string): Promise<Pool> {\n    // Get connection details from the system database\n    const connection = await db.query.databaseConnections.findFirst({\n      where: eq(databaseConnections.id, connectionId),\n    });\n\n    if (!connection) {\n      throw new Error(`Connection not found: ${connectionId}`);\n    }\n\n    if (!connection.isActive) {\n      throw new Error(`Connection is not active: ${connectionId}`);\n    }\n\n    // Decrypt credentials\n    const config = this.decryptCredentials(connection.credentials);\n    const poolKey = this.getPoolKey(config);\n\n    // Check if we have an existing pool\n    const existingPool = this.pools.get(poolKey);\n    if (existingPool) {\n      existingPool.lastUsed = Date.now();\n      return existingPool.pool;\n    }\n\n    // Create a new pool\n    const pool = new Pool(config);\n\n    // Test the connection\n    try {\n      const client = await pool.connect();\n      client.release();\n    } catch (error) {\n      pool.end();\n      throw new Error(`Failed to connect to database: ${error.message}`);\n    }\n\n    // Store the pool\n    this.pools.set(poolKey, {\n      pool,\n      lastUsed: Date.now(),\n    });\n\n    // Update last connected timestamp\n    await db\n      .update(databaseConnections)\n      .set({ lastConnectedAt: new Date() })\n      .where(eq(databaseConnections.id, connectionId));\n\n    return pool;\n  }\n\n  async closeConnection(connectionId: string): Promise<void> {\n    const connection = await db.query.databaseConnections.findFirst({\n      where: eq(databaseConnections.id, connectionId),\n    });\n\n    if (!connection) {\n      return;\n    }\n\n    const config = this.decryptCredentials(connection.credentials);\n    const poolKey = this.getPoolKey(config);\n    const existingPool = this.pools.get(poolKey);\n\n    if (existingPool) {\n      await existingPool.pool.end();\n      this.pools.delete(poolKey);\n    }\n  }\n\n  async closeAllConnections(): Promise<void> {\n    const closePromises = Array.from(this.pools.values()).map(({ pool }) => pool.end());\n    await Promise.all(closePromises);\n    this.pools.clear();\n  }\n}\n", "import { Dialog, Transition } from \"@headlessui/react\";\nimport { Form } from \"@remix-run/react\";\nimport { Fragment } from \"react\";\n\ninterface NewConnectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function NewConnectionModal({ isOpen, onClose }: NewConnectionModalProps) {\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as=\"div\" className=\"relative z-50\" onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 overflow-y-auto\">\n          <div className=\"flex min-h-full items-center justify-center p-4\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-md transform overflow-hidden rounded-2xl bg-light-bg-primary dark:bg-dark-bg-secondary p-6 shadow-xl transition-all\">\n                <Dialog.Title as=\"h3\" className=\"text-lg font-medium mb-4\">\n                  New Database Connection\n                </Dialog.Title>\n\n                <Form method=\"post\" className=\"space-y-4\">\n                  <input type=\"hidden\" name=\"intent\" value=\"create\" />\n\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\">\n                      Connection Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"host\" className=\"block text-sm font-medium mb-1\">\n                      Host\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"host\"\n                      name=\"host\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"port\" className=\"block text-sm font-medium mb-1\">\n                      Port\n                    </label>\n                    <input\n                      type=\"number\"\n                      id=\"port\"\n                      name=\"port\"\n                      defaultValue={5432}\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"database\" className=\"block text-sm font-medium mb-1\">\n                      Database Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"database\"\n                      name=\"database\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"username\" className=\"block text-sm font-medium mb-1\">\n                      Username\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"username\"\n                      name=\"username\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium mb-1\">\n                      Password\n                    </label>\n                    <input\n                      type=\"password\"\n                      id=\"password\"\n                      name=\"password\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"ssl\"\n                      name=\"ssl\"\n                      className=\"h-4 w-4 rounded border-light-border dark:border-dark-border text-blue-600 focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"ssl\" className=\"ml-2 block text-sm\">\n                      Use SSL\n                    </label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4 mt-6\">\n                    <button\n                      type=\"button\"\n                      className=\"px-4 py-2 text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\"\n                      onClick={onClose}\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n                    >\n                      Create Connection\n                    </button>\n                  </div>\n                </Form>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n", "import pkg from 'pg';\nconst { Pool } = pkg;\n\nexport async function testPostgresConnection(config: {\n  host: string;\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n  ssl?: boolean;\n}) {\n  const pool = new Pool(config);\n  try {\n    const client = await pool.connect();\n    client.release();\n    await pool.end();\n    return true;\n  } catch (error) {\n    throw error;\n  }\n}\n", "import { json, redirect, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"~/lib/auth/session.server\";\nimport {\n  getOrganization,\n  getOrganizationRole,\n  updateOrganization,\n  deleteOrganization,\n  addOrganizationMember,\n  updateOrganizationMemberRole,\n  removeOrganizationMember,\n} from \"~/lib/organizations/organizations.server\";\nimport { z } from \"zod\";\n\nconst UpdateOrganizationSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n});\n\nconst AddMemberSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  role: z.enum([\"admin\", \"member\"]),\n});\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  const organization = await getOrganization(params.id!);\n  \n  if (!organization) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  const role = await getOrganizationRole(organization.id, user.id);\n  if (!role) {\n    throw new Response(\"Unauthorized\", { status: 403 });\n  }\n\n  return json({ organization, role });\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n\n  const organization = await getOrganization(params.id!);\n  if (!organization) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  const role = await getOrganizationRole(organization.id, user.id);\n  if (!role || role === \"member\") {\n    throw new Response(\"Unauthorized\", { status: 403 });\n  }\n\n  switch (intent) {\n    case \"update\": {\n      if (role !== \"owner\") {\n        throw new Response(\"Unauthorized\", { status: 403 });\n      }\n\n      const name = formData.get(\"name\");\n      const result = UpdateOrganizationSchema.safeParse({ name });\n      if (!result.success) {\n        return json({ errors: result.error.flatten() }, { status: 400 });\n      }\n\n      await updateOrganization(organization.id, { name: result.data.name });\n      return null;\n    }\n\n    case \"delete\": {\n      if (role !== \"owner\") {\n        throw new Response(\"Unauthorized\", { status: 403 });\n      }\n\n      await deleteOrganization(organization.id);\n      return redirect(\"/organizations\");\n    }\n\n    case \"add-member\": {\n      const result = AddMemberSchema.safeParse({\n        email: formData.get(\"email\"),\n        role: formData.get(\"role\"),\n      });\n\n      if (!result.success) {\n        return json({ errors: result.error.flatten() }, { status: 400 });\n      }\n\n      // TODO: Look up user by email and add them to the organization\n      return null;\n    }\n\n    case \"update-role\": {\n      if (role !== \"owner\") {\n        throw new Response(\"Unauthorized\", { status: 403 });\n      }\n\n      const memberId = formData.get(\"memberId\");\n      const newRole = formData.get(\"role\");\n\n      if (typeof memberId !== \"string\" || ![\"admin\", \"member\"].includes(newRole as string)) {\n        return json({ error: \"Invalid input\" }, { status: 400 });\n      }\n\n      await updateOrganizationMemberRole(organization.id, memberId, newRole as \"admin\" | \"member\");\n      return null;\n    }\n\n    case \"remove-member\": {\n      if (role !== \"owner\") {\n        throw new Response(\"Unauthorized\", { status: 403 });\n      }\n\n      const memberId = formData.get(\"memberId\");\n      if (typeof memberId !== \"string\") {\n        return json({ error: \"Invalid input\" }, { status: 400 });\n      }\n\n      await removeOrganizationMember(organization.id, memberId);\n      return null;\n    }\n\n    default:\n      throw new Response(\"Invalid intent\", { status: 400 });\n  }\n}\n\nexport default function OrganizationPage() {\n  const { organization, role } = useLoaderData<typeof loader>();\n  const isOwner = role === \"owner\";\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-start mb-8\">\n          <div>\n            <h1 className=\"text-2xl font-semibold mb-2\">{organization.name}</h1>\n            <p className=\"text-light-text-secondary dark:text-dark-text-secondary\">\n              Created {new Date(organization.createdAt).toLocaleDateString()}\n            </p>\n          </div>\n\n          {isOwner && (\n            <Form method=\"post\">\n              <input type=\"hidden\" name=\"intent\" value=\"delete\" />\n              <button\n                type=\"submit\"\n                className=\"px-4 py-2 text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors\"\n                onClick={(e) => {\n                  if (!confirm(\"Are you sure you want to delete this organization?\")) {\n                    e.preventDefault();\n                  }\n                }}\n              >\n                Delete Organization\n              </button>\n            </Form>\n          )}\n        </div>\n\n        <div className=\"space-y-8\">\n          {/* Organization Settings */}\n          {isOwner && (\n            <section className=\"bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg p-6\">\n              <h2 className=\"text-lg font-medium mb-4\">Organization Settings</h2>\n              <Form method=\"post\" className=\"max-w-md space-y-4\">\n                <input type=\"hidden\" name=\"intent\" value=\"update\" />\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\">\n                    Organization Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    defaultValue={organization.name}\n                    className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-primary dark:bg-dark-bg-secondary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                </div>\n                <div className=\"flex justify-end\">\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n                  >\n                    Save Changes\n                  </button>\n                </div>\n              </Form>\n            </section>\n          )}\n\n          {/* Members List */}\n          <section className=\"bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg p-6\">\n            <h2 className=\"text-lg font-medium mb-4\">Members</h2>\n            <div className=\"space-y-4\">\n              {organization.members?.map(({ user: member, role: memberRole }) => (\n                <div\n                  key={member.id}\n                  className=\"flex items-center justify-between py-2\"\n                >\n                  <div>\n                    <p className=\"font-medium\">{member.name}</p>\n                    <p className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n                      {member.email}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary capitalize\">\n                      {memberRole}\n                    </span>\n                    {isOwner && member.id !== user.id && (\n                      <Form method=\"post\" className=\"flex items-center space-x-2\">\n                        <input type=\"hidden\" name=\"intent\" value=\"remove-member\" />\n                        <input type=\"hidden\" name=\"memberId\" value={member.id} />\n                        <button\n                          type=\"submit\"\n                          className=\"text-red-600 hover:text-red-500\"\n                          onClick={(e) => {\n                            if (!confirm(\"Are you sure you want to remove this member?\")) {\n                              e.preventDefault();\n                            }\n                          }}\n                        >\n                          Remove\n                        </button>\n                      </Form>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Add Member Form */}\n            {(isOwner || role === \"admin\") && (\n              <Form method=\"post\" className=\"mt-6 max-w-md space-y-4\">\n                <input type=\"hidden\" name=\"intent\" value=\"add-member\" />\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium mb-1\">\n                    Add Member by Email\n                  </label>\n                  <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-primary dark:bg-dark-bg-secondary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"role\" className=\"block text-sm font-medium mb-1\">\n                    Role\n                  </label>\n                  <select\n                    id=\"role\"\n                    name=\"role\"\n                    className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-primary dark:bg-dark-bg-secondary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    defaultValue=\"member\"\n                  >\n                    <option value=\"member\">Member</option>\n                    <option value=\"admin\">Admin</option>\n                  </select>\n                </div>\n                <div className=\"flex justify-end\">\n                  <button\n                    type=\"submit\"\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n                  >\n                    Add Member\n                  </button>\n                </div>\n              </Form>\n            )}\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { requireUser } from \"~/lib/auth/session.server\";\nimport { createOrganization } from \"~/lib/organizations/organizations.server\";\nimport { z } from \"zod\";\n\nconst CreateOrganizationSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n});\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const formData = await request.formData();\n  const name = formData.get(\"name\");\n\n  const result = CreateOrganizationSchema.safeParse({ name });\n  if (!result.success) {\n    return json({ errors: result.error.flatten() }, { status: 400 });\n  }\n\n  const organization = await createOrganization({\n    name: result.data.name,\n    userId: user.id,\n  });\n\n  return redirect(`/organizations/${organization.id}`);\n}\n\nexport default function NewOrganizationPage() {\n  const actionData = useActionData<typeof action>();\n\n  return (\n    <div className=\"max-w-md mx-auto p-6\">\n      <h1 className=\"text-2xl font-semibold mb-6\">Create Organization</h1>\n\n      <Form method=\"post\" className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\">\n            Organization Name\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            required\n          />\n          {actionData?.errors?.fieldErrors?.name && (\n            <p className=\"mt-1 text-sm text-red-600\">\n              {actionData.errors.fieldErrors.name[0]}\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex justify-end space-x-4\">\n          <a\n            href=\"/organizations\"\n            className=\"px-4 py-2 text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\"\n          >\n            Cancel\n          </a>\n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n          >\n            Create Organization\n          </button>\n        </div>\n      </Form>\n    </div>\n  );\n}\n", "import { json, type ActionFunctionArgs } from '@remix-run/node';\nimport { z } from 'zod';\nimport { db } from '~/lib/db/db.server';\nimport { databaseConnections } from '~/lib/db/schema';\nimport { requireUser } from '~/lib/auth/session.server';\nimport { eq } from 'drizzle-orm';\nimport { ConnectionManager } from '~/lib/db/connection-manager.server';\n\nconst connectionSchema = z.object({\n  name: z.string().min(1),\n  type: z.literal('postgresql'),\n  credentials: z.object({\n    host: z.string(),\n    port: z.number(),\n    database: z.string(),\n    user: z.string(),\n    password: z.string(),\n    ssl: z.boolean().optional(),\n  }),\n});\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n\n  switch (request.method) {\n    case 'POST': {\n      const data = connectionSchema.parse(await request.json());\n      \n      // Get organization ID from the user's active organization\n      // TODO: Implement organization selection\n      const orgMember = await db.query.organizationMembers.findFirst({\n        where: eq(organizationMembers.userId, user.id),\n      });\n\n      if (!orgMember) {\n        throw json({ error: 'No organization found' }, { status: 404 });\n      }\n\n      // Create the connection\n      const [connection] = await db.insert(databaseConnections)\n        .values({\n          name: data.name,\n          type: data.type,\n          organizationId: orgMember.organizationId,\n          credentials: data.credentials,\n        })\n        .returning();\n\n      // Test the connection\n      try {\n        const manager = ConnectionManager.getInstance();\n        await manager.getConnection(connection.id);\n      } catch (error) {\n        // If connection fails, delete the record\n        await db.delete(databaseConnections)\n          .where(eq(databaseConnections.id, connection.id));\n        \n        throw json({ error: error.message }, { status: 400 });\n      }\n\n      return json(connection);\n    }\n\n    case 'PUT': {\n      const { id } = z.object({ id: z.string() }).parse(await request.json());\n      const data = connectionSchema.parse(await request.json());\n\n      // Verify user has access to the connection\n      const connection = await db.query.databaseConnections.findFirst({\n        where: eq(databaseConnections.id, id),\n        with: {\n          organization: {\n            with: {\n              members: {\n                where: eq(organizationMembers.userId, user.id),\n              },\n            },\n          },\n        },\n      });\n\n      if (!connection || !connection.organization.members.length) {\n        throw json({ error: 'Connection not found' }, { status: 404 });\n      }\n\n      // Update the connection\n      const [updated] = await db.update(databaseConnections)\n        .set({\n          name: data.name,\n          credentials: data.credentials,\n          updatedAt: new Date(),\n        })\n        .where(eq(databaseConnections.id, id))\n        .returning();\n\n      return json(updated);\n    }\n\n    case 'DELETE': {\n      const { id } = z.object({ id: z.string() }).parse(await request.json());\n\n      // Verify user has access to the connection\n      const connection = await db.query.databaseConnections.findFirst({\n        where: eq(databaseConnections.id, id),\n        with: {\n          organization: {\n            with: {\n              members: {\n                where: eq(organizationMembers.userId, user.id),\n              },\n            },\n          },\n        },\n      });\n\n      if (!connection || !connection.organization.members.length) {\n        throw json({ error: 'Connection not found' }, { status: 404 });\n      }\n\n      // Close the connection if it's active\n      const manager = ConnectionManager.getInstance();\n      await manager.closeConnection(id);\n\n      // Delete the connection\n      await db.delete(databaseConnections)\n        .where(eq(databaseConnections.id, id));\n\n      return json({ success: true });\n    }\n\n    default:\n      throw json({ error: 'Method not allowed' }, { status: 405 });\n  }\n}\n", "import { json, type ActionFunctionArgs, type MetaFunction } from '@remix-run/node';\nimport { Form, Link, useActionData, useSearchParams } from '@remix-run/react';\nimport { register } from '~/lib/auth/auth.server';\n\nexport const meta: MetaFunction = () => {\n  return [{ title: 'Register - Data Studio' }];\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const name = formData.get('name');\n  const redirectTo = formData.get('redirectTo') || '/';\n\n  if (\n    typeof email !== 'string' ||\n    typeof password !== 'string' ||\n    typeof name !== 'string' ||\n    typeof redirectTo !== 'string'\n  ) {\n    return json({ error: 'Invalid form submission' }, { status: 400 });\n  }\n\n  return register({ email, password, name, redirectTo });\n}\n\nexport default function RegisterPage() {\n  const actionData = useActionData<typeof action>();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') || '/';\n\n  return (\n    <div className=\"flex min-h-screen flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md\">\n        <div className=\"flex flex-col space-y-3 text-center\">\n          <h1 className=\"text-3xl font-bold tracking-tight\">Create an account</h1>\n          <p className=\"text-sm text-gray-500\">\n            Please enter your details to sign up\n          </p>\n        </div>\n\n        <Form method=\"post\" className=\"mt-8 space-y-6\">\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          \n          <div className=\"space-y-2\">\n            <label\n              htmlFor=\"name\"\n              className=\"block text-sm font-medium leading-6 text-gray-900\"\n            >\n              Full name\n            </label>\n            <input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              autoComplete=\"name\"\n              required\n              className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium leading-6 text-gray-900\"\n            >\n              Email address\n            </label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium leading-6 text-gray-900\"\n            >\n              Password\n            </label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"new-password\"\n              required\n              className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\"\n            />\n          </div>\n\n          {actionData?.error && (\n            <div className=\"text-sm text-red-600\">{actionData.error}</div>\n          )}\n\n          <button\n            type=\"submit\"\n            className=\"flex w-full justify-center rounded-md bg-blue-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\"\n          >\n            Sign up\n          </button>\n\n          <p className=\"text-center text-sm text-gray-500\">\n            Already have an account?{' '}\n            <Link\n              to={{\n                pathname: '/login',\n                search: searchParams.toString(),\n              }}\n              className=\"font-semibold leading-6 text-blue-600 hover:text-blue-500\"\n            >\n              Sign in\n            </Link>\n          </p>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import bcrypt from 'bcrypt';\nimport { db } from '~/lib/db/db.server';\nimport { users } from '~/lib/db/schema';\nimport { eq } from 'drizzle-orm';\nimport { createUserSession } from './session.server';\n\nconst SALT_ROUNDS = 10;\n\ninterface LoginForm {\n  email: string;\n  password: string;\n  redirectTo: string;\n}\n\ninterface RegisterForm extends LoginForm {\n  name: string;\n}\n\nexport async function register({ email, password, name, redirectTo }: RegisterForm) {\n  const existingUser = await db.query.users.findFirst({\n    where: eq(users.email, email),\n  });\n\n  if (existingUser) {\n    return {\n      error: 'A user with this email already exists',\n    };\n  }\n\n  const passwordHash = await bcrypt.hash(password, SALT_ROUNDS);\n\n  const [user] = await db.insert(users)\n    .values({\n      email,\n      name,\n      passwordHash,\n    })\n    .returning({\n      id: users.id,\n    });\n\n  return createUserSession(user.id, redirectTo);\n}\n\nexport async function login({ email, password, redirectTo }: LoginForm) {\n  const user = await db.query.users.findFirst({\n    where: eq(users.email, email),\n  });\n\n  if (!user) {\n    return {\n      error: 'Invalid email or password',\n    };\n  }\n\n  const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n  if (!isValidPassword) {\n    return {\n      error: 'Invalid email or password',\n    };\n  }\n\n  return createUserSession(user.id, redirectTo);\n}\n\nexport async function changePassword(userId: string, currentPassword: string, newPassword: string) {\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId),\n  });\n\n  if (!user) {\n    return {\n      error: 'User not found',\n    };\n  }\n\n  const isValidPassword = await bcrypt.compare(currentPassword, user.passwordHash);\n  if (!isValidPassword) {\n    return {\n      error: 'Invalid current password',\n    };\n  }\n\n  const passwordHash = await bcrypt.hash(newPassword, SALT_ROUNDS);\n\n  await db.update(users)\n    .set({ passwordHash })\n    .where(eq(users.id, userId));\n\n  return { success: true };\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"~/lib/auth/session.server\";\nimport { getUserOrganizations } from \"~/lib/organizations/organizations.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  const organizations = await getUserOrganizations(user.id);\n  return json({ organizations });\n}\n\nexport default function OrganizationsPage() {\n  const { organizations } = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-semibold\">Organizations</h1>\n        <Link\n          to=\"/organizations/new\"\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n        >\n          Create Organization\n        </Link>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {organizations.map(({ organization }) => (\n          <Link\n            key={organization.id}\n            to={`/organizations/${organization.id}`}\n            className=\"block p-6 bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-secondary transition-colors\"\n          >\n            <h2 className=\"text-lg font-medium mb-2\">{organization.name}</h2>\n            <p className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n              Created {new Date(organization.createdAt).toLocaleDateString()}\n            </p>\n          </Link>\n        ))}\n\n        {organizations.length === 0 && (\n          <div className=\"col-span-full text-center py-12\">\n            <h3 className=\"text-lg font-medium mb-2\">No organizations yet</h3>\n            <p className=\"text-light-text-secondary dark:text-dark-text-secondary mb-4\">\n              Create your first organization to get started\n            </p>\n            <Link\n              to=\"/organizations/new\"\n              className=\"inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n            >\n              Create Organization\n            </Link>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import { json, type ActionFunctionArgs, type MetaFunction } from '@remix-run/node';\nimport { Form, Link, useActionData, useSearchParams } from '@remix-run/react';\nimport { login } from '~/lib/auth/auth.server';\n\nexport const meta: MetaFunction = () => {\n  return [{ title: 'Login - Data Studio' }];\n};\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const redirectTo = formData.get('redirectTo') || '/';\n\n  if (\n    typeof email !== 'string' ||\n    typeof password !== 'string' ||\n    typeof redirectTo !== 'string'\n  ) {\n    return json({ error: 'Invalid form submission' }, { status: 400 });\n  }\n\n  return login({ email, password, redirectTo });\n}\n\nexport default function LoginPage() {\n  const actionData = useActionData<typeof action>();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') || '/';\n\n  return (\n    <div className=\"flex min-h-screen flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md\">\n        <div className=\"flex flex-col space-y-3 text-center\">\n          <h1 className=\"text-3xl font-bold tracking-tight\">Welcome back</h1>\n          <p className=\"text-sm text-gray-500\">\n            Please enter your details to sign in\n          </p>\n        </div>\n\n        <Form method=\"post\" className=\"mt-8 space-y-6\">\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <div className=\"space-y-2\">\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium leading-6 text-gray-900\"\n            >\n              Email address\n            </label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium leading-6 text-gray-900\"\n            >\n              Password\n            </label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              required\n              className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-blue-600 sm:text-sm sm:leading-6\"\n            />\n          </div>\n\n          {actionData?.error && (\n            <div className=\"text-sm text-red-600\">{actionData.error}</div>\n          )}\n\n          <button\n            type=\"submit\"\n            className=\"flex w-full justify-center rounded-md bg-blue-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\"\n          >\n            Sign in\n          </button>\n\n          <p className=\"text-center text-sm text-gray-500\">\n            Don't have an account?{' '}\n            <Link\n              to={{\n                pathname: '/register',\n                search: searchParams.toString(),\n              }}\n              className=\"font-semibold leading-6 text-blue-600 hover:text-blue-500\"\n            >\n              Sign up\n            </Link>\n          </p>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData, useSearchParams } from \"@remix-run/react\";\nimport { TabView } from \"~/components/TabView\";\nimport { DataView } from \"~/components/DataView\";\nimport { EmptyState } from \"~/components/EmptyState\";\nimport { RowDetailsSidebar } from \"~/components/RowDetailsSidebar\";\nimport { useCallback, useState } from \"react\";\nimport { isNumber, startCase } from \"lodash-es\";\nimport { useClient } from \"~/hooks/useClient\";\nimport type { TableDataResponse, Column } from \"~/types\";\nimport { fetchTableData } from \"~/utils/api.server\";\nimport { fetchSchema } from \"~/utils/api.server\";\n\ninterface LoaderData {\n  tableName: string;\n  data: {\n    data: Record<string, unknown>[];\n    totalRows: number;\n    page?: number;\n    pageSize?: number;\n  };\n  columns: Column[];\n}\n\nexport async function loader({ params, request }: LoaderFunctionArgs) {\n  const tableName = params.tableName;\n  if (!tableName) {\n    throw new Error(\"Table name is required\");\n  }\n\n  const url = new URL(request.url);\n  const sortBy = url.searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = url.searchParams.get(\"sortOrder\") as \"asc\" | \"desc\" | undefined;\n\n  const data = await fetchTableData(tableName, sortBy, sortOrder);\n  const schema = await fetchSchema();\n  const tableSchema = schema.find(t => t.name === tableName);\n  \n  if (!tableSchema) {\n    throw new Error(`Table ${tableName} not found`);\n  }\n\n  return json({ \n    tableName, \n    data,\n    columns: tableSchema.columns\n  });\n}\n\nexport default function TablePage() {\n  const { tableName, data, columns } = useLoaderData<LoaderData>();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const isClient = useClient();\n  const [selectedRow, setSelectedRow] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const activeTab = searchParams.get(\"tab\") || \"content\";\n  const sortBy = searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = (searchParams.get(\"sortOrder\") as \"asc\" | \"desc\") || undefined;\n\n  const handleSort = useCallback((columnId: string) => {\n    setSearchParams(prev => {\n      const newParams = new URLSearchParams(prev);\n      newParams.set(\"sortBy\", columnId);\n      newParams.set(\"sortOrder\", prev.get(\"sortBy\") === columnId && prev.get(\"sortOrder\") === \"asc\" ? \"desc\" : \"asc\");\n      return newParams;\n    });\n  }, [setSearchParams]);\n\n  const handleTabChange = useCallback((tabId: string) => {\n    setSearchParams(prev => {\n      const newParams = new URLSearchParams(prev);\n      newParams.set(\"tab\", tabId);\n      return newParams;\n    });\n  }, [setSearchParams]);\n\n  const handleEdit = useCallback(async (rowIndex: number, newData: Record<string, unknown>) => {\n    if (!tableName) return;\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/tables/${tableName}/rows/${rowIndex}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update row: ${response.statusText}`);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update row');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [tableName]);\n\n  const handleDelete = useCallback(async (rowIndex: number) => {\n    if (!tableName) return;\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/tables/${tableName}/rows/${rowIndex}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete row: ${response.statusText}`);\n      }\n\n      if (selectedRow === rowIndex) {\n        setSelectedRow(null);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to delete row');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [tableName, selectedRow]);\n\n  const formatCellValue = useCallback((value: unknown): string => {\n    if (value === null) return \"NULL\";\n    if (value === undefined) return \"\";\n    if (typeof value === \"object\") return JSON.stringify(value);\n    return String(value);\n  }, []);\n\n  const tabs = [\n    { id: \"content\", label: \"Content\" },\n    { id: \"structure\", label: \"Structure\" },\n    { id: \"indexes\", label: \"Indexes\" },\n    { id: \"foreign-keys\", label: \"Foreign Keys\" },\n  ];\n\n  const renderTabContent = () => {\n    if (!isClient) {\n      return null;\n    }\n\n    switch (activeTab) {\n      case \"content\":\n        if (data.data.length === 0) {\n          return (\n            <EmptyState\n              type=\"table\"\n              title=\"No Data\"\n              message=\"This table is empty\"\n            />\n          );\n        }\n        return (\n          <DataView\n            columns={columns}\n            rows={data.data}\n            sortBy={sortBy}\n            sortOrder={sortOrder}\n            onSort={handleSort}\n            formatCellValue={formatCellValue}\n            isEditable={true}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            selectedRow={isNumber(selectedRow) ? selectedRow : undefined}\n            onRowSelect={setSelectedRow}\n            isLoading={isLoading}\n            error={error || undefined}\n          />\n        );\n      case \"structure\":\n        if (columns.length === 0) {\n          return (\n            <EmptyState\n              type=\"database\"\n              title=\"No Columns\"\n              message=\"This table has no columns defined\"\n            />\n          );\n        }\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Name</th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Type</th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Nullable</th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Default</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                  {columns.map((column, idx) => (\n                    <tr key={idx} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">{column.name}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{column.type}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{column.nullable ? 'Yes' : 'No'}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{column.defaultValue || '-'}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex-none p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n          {startCase(tableName)}\n        </h1>\n      </div>\n\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <div className=\"flex-none border-b border-gray-200 dark:border-gray-700\">\n          <TabView \n            tabs={tabs} \n            activeTab={activeTab}\n            onTabChange={handleTabChange}\n          />\n        </div>\n        <>\n          <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n            {renderTabContent()}\n          </div>\n          <RowDetailsSidebar\n            row={selectedRow !== null ? data.data[selectedRow] : null}\n            columns={columns}\n            isOpen={selectedRow !== null}\n            onClose={() => setSelectedRow(null)}\n            formatCellValue={formatCellValue}\n          />\n        </>\n      </div>\n    </div>\n  );\n}\n", "import { startCase } from \"lodash-es\";\nimport { cn } from \"~/utils/cn\";\n\ninterface Tab {\n  id: string;\n  label: string;\n}\n\ninterface TabViewProps {\n  tabs: Tab[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n}\n\ninterface DataViewProps {\n  columns: string[];\n  rows: any[];\n  currentPage: number;\n  totalPages: number;\n  pageSize: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onPageChange: (page: number) => void;\n  onSort: (column: string) => void;\n  formatCellValue: (value: any) => string;\n}\n\nexport function TabView({ tabs, activeTab, onTabChange }: TabViewProps) {\n  return (\n    <div className=\"bg-light-bg-primary dark:bg-dark-bg-secondary px-6\">\n      <div className=\"flex\">\n        {tabs.map((tab) => {\n          const isActive = activeTab === tab.id;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={cn(\n                \"px-6 py-3 text-sm font-medium border-b-2\",\n                isActive\n                  ? \"border-primary-500 text-primary-600 dark:text-primary-400\"\n                  : \"border-transparent text-light-text-secondary dark:text-dark-text-secondary hover:text-light-text-primary hover:border-light-border dark:hover:text-dark-text-primary dark:hover:border-dark-border\"\n              )}\n            >\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function DataView({\n  columns,\n  rows,\n  currentPage,\n  totalPages,\n  pageSize,\n  sortBy,\n  sortOrder,\n  onPageChange,\n  onSort,\n  formatCellValue,\n}: DataViewProps) {\n  return (\n    <div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              {columns.map((column) => (\n                <th\n                  key={column}\n                  scope=\"col\"\n                  className=\"group px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => onSort(column)}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{startCase(column.toLowerCase())}</span>\n                    <span className=\"invisible group-hover:visible\">\n                      {sortBy === column ? (\n                        <span>{sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\"}</span>\n                      ) : (\n                        \"\u2195\"\n                      )}\n                    </span>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n            {rows.map((row, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                {columns.map((column) => (\n                  <td\n                    key={column}\n                    className=\"px-6 py-4 whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-300 font-mono\"\n                  >\n                    {formatCellValue(row[column])}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n", "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n", "import { startCase } from \"lodash-es\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport type { Column } from \"~/types\";\nimport {\n  createColumnHelper,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n  type SortingState,\n  flexRender,\n} from '@tanstack/react-table';\nimport { cn } from \"~/utils/cn\";\n\ninterface DataViewProps {\n  columns: Column[];\n  rows: Record<string, unknown>[];\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onSort: (column: string) => void;\n  formatCellValue: (value: unknown) => string;\n  onEdit?: (rowIndex: number, data: Record<string, unknown>) => void;\n  onDelete?: (rowIndex: number) => void;\n  isEditable?: boolean;\n  selectedRow?: number;\n  onRowSelect?: (index: number | null) => void;\n  isLoading?: boolean;\n  error?: string;\n}\n\nexport function DataView({\n  columns,\n  rows,\n  sortBy,\n  sortOrder,\n  onSort,\n  formatCellValue,\n  onEdit,\n  onDelete,\n  isEditable = false,\n  selectedRow,\n  onRowSelect,\n  isLoading = false,\n  error = '',\n}: DataViewProps) {\n  const [editingCell, setEditingCell] = useState<[number, string] | null>(null);\n  const [editedValue, setEditedValue] = useState<string | null>(null);\n  const [editError, setEditError] = useState<string | null>(null);\n\n  const handleStartEditing = useCallback((rowIndex: number, columnId: string) => {\n    if (!isEditable) return;\n    setEditingCell([rowIndex, columnId]);\n    setEditedValue(formatCellValue(rows[rowIndex]?.[columnId]));\n    setEditError(null);\n  }, [rows, isEditable, formatCellValue]);\n\n  const handleStopEditing = useCallback(() => {\n    setEditingCell(null);\n    setEditedValue(null);\n    setEditError(null);\n  }, []);\n\n  const handleKeyDown = useCallback(async (\n    e: React.KeyboardEvent<HTMLInputElement>,\n    rowIndex: number,\n    columnId: string\n  ) => {\n    if (e.key === \"Escape\") {\n      handleStopEditing();\n    } else if (e.key === \"Enter\") {\n      try {\n        const value = (e.target as HTMLInputElement).value;\n        const newData = {\n          ...rows[rowIndex],\n          [columnId]: value,\n        };\n\n        await onEdit?.(rowIndex, newData);\n        handleStopEditing();\n      } catch (error) {\n        setEditError(error instanceof Error ? error.message : 'Failed to update value');\n      }\n    }\n  }, [rows, onEdit, handleStopEditing]);\n\n  const handleSort = useCallback((columnId: string) => {\n    onSort(columnId);\n  }, [onSort]);\n\n  const handleRowClick = useCallback((rowIndex: number) => {\n    onRowSelect?.(selectedRow === rowIndex ? null : rowIndex);\n  }, [selectedRow, onRowSelect]);\n\n  const handleDelete = useCallback(async (e: React.MouseEvent, rowIndex: number) => {\n    e.stopPropagation();\n    if (!window.confirm('Are you sure you want to delete this row?')) return;\n    \n    try {\n      await onDelete?.(rowIndex);\n    } catch (error) {\n      console.error('Failed to delete row:', error);\n      // Show error toast or notification here\n    }\n  }, [onDelete]);\n\n  const columnHelper = createColumnHelper<Record<string, unknown>>();\n\n  const tableColumns = useMemo(() => \n    columns.map(col => \n      columnHelper.accessor(col.name, {\n        header: () => startCase(col.name),\n        cell: info => {\n          const rowIndex = info.row.index;\n          const columnId = col.name;\n          const isEditing = editingCell?.[0] === rowIndex && editingCell?.[1] === columnId;\n          const value = info.getValue();\n\n          if (isEditing) {\n            return (\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={editedValue || \"\"}\n                  onChange={e => setEditedValue(e.target.value)}\n                  onKeyDown={e => handleKeyDown(e, rowIndex, columnId)}\n                  onBlur={() => handleStopEditing()}\n                  className={cn(\n                    \"w-full px-2 py-1 bg-white dark:bg-gray-800 border rounded-md focus:outline-none focus:ring-2\",\n                    editError \n                      ? \"border-red-500 dark:border-red-400 focus:ring-red-500 dark:focus:ring-red-400\" \n                      : \"border-primary-500 dark:border-primary-400 focus:ring-primary-500 dark:focus:ring-primary-400\"\n                  )}\n                  autoFocus\n                />\n                {editError && (\n                  <div className=\"absolute left-0 right-0 -bottom-6 text-xs text-red-500 dark:text-red-400\">\n                    {editError}\n                  </div>\n                )}\n              </div>\n            );\n          }\n\n          return (\n            <div\n              className={cn(\n                \"cursor-pointer\",\n                isEditable && \"hover:bg-primary-50 dark:hover:bg-primary-900/20\"\n              )}\n              onClick={() => handleStartEditing(rowIndex, columnId)}\n            >\n              {formatCellValue(value)}\n            </div>\n          );\n        },\n      })\n    ),\n    [columns, formatCellValue, editingCell, editedValue, handleKeyDown, handleStartEditing, isEditable, editError]\n  );\n\n  const sorting = useMemo<SortingState>(() => \n    sortBy ? [{ id: sortBy, desc: sortOrder === \"desc\" }] : [],\n    [sortBy, sortOrder]\n  );\n\n  const [sortingState, setSorting] = useState<SortingState>(sorting);\n\n  const table = useReactTable({\n    data: rows,\n    columns: tableColumns,\n    state: {\n      sorting: sortingState,\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  if (error) {\n    return (\n      <div className=\"border rounded-lg border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/50 p-4\">\n        <div className=\"text-red-700 dark:text-red-300\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border rounded-lg border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 h-full flex flex-col relative\">\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-white/50 dark:bg-gray-900/50 flex items-center justify-center z-10\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-primary-500 rounded-full animate-bounce [animation-delay:-0.3s]\"></div>\n            <div className=\"w-2 h-2 bg-primary-500 rounded-full animate-bounce [animation-delay:-0.15s]\"></div>\n            <div className=\"w-2 h-2 bg-primary-500 rounded-full animate-bounce\"></div>\n          </div>\n        </div>\n      )}\n\n      {rows.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n          <div className=\"text-gray-500 dark:text-gray-400 mb-2\">No data available</div>\n          <div className=\"text-sm text-gray-400 dark:text-gray-500\">This table is empty</div>\n        </div>\n      ) : (\n        <div className=\"overflow-auto flex-1 relative rounded-lg\">\n          <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n            <thead className=\"sticky top-0 text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-800 dark:text-gray-400\">\n              <tr>\n                {table.getAllColumns().map(column => (\n                  <th\n                    key={column.id}\n                    scope=\"col\"\n                    className=\"px-6 py-3 cursor-pointer select-none whitespace-nowrap bg-gray-50 dark:bg-gray-800\"\n                    onClick={() => handleSort(column.id)}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <span>{startCase(column.id)}</span>\n                      {sortingState[0]?.id === column.id && (\n                        <span className=\"text-gray-400\">\n                          {sortingState[0].desc ? \"\u2193\" : \"\u2191\"}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n                {isEditable && (\n                  <th scope=\"col\" className=\"px-6 py-3 bg-gray-50 dark:bg-gray-800 w-24\">\n                    <span className=\"sr-only\">Actions</span>\n                  </th>\n                )}\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              {table.getRowModel().rows.map((row, rowIndex) => (\n                <tr\n                  key={rowIndex}\n                  className={cn(\n                    \"bg-white dark:bg-gray-900\",\n                    selectedRow === rowIndex && \"bg-primary-50 dark:bg-primary-900/20\",\n                    \"hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer border-b dark:border-gray-700\"\n                  )}\n                  onClick={() => handleRowClick(rowIndex)}\n                >\n                  {row.getAllCells().map((cell) => (\n                    <td \n                      key={cell.id} \n                      className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\"\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </td>\n                  ))}\n                  {isEditable && (\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        onClick={(e) => handleDelete(e, rowIndex)}\n                        className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n", "import { FolderIcon, TableCellsIcon, CircleStackIcon } from \"@heroicons/react/24/outline\";\n\ntype EmptyStateType = \"table\" | \"query\" | \"database\";\n\ninterface EmptyStateProps {\n  type: EmptyStateType;\n  title: string;\n  message: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nconst icons = {\n  table: TableCellsIcon,\n  query: CircleStackIcon,\n  database: FolderIcon,\n};\n\nexport function EmptyState({ type, title, message, action }: EmptyStateProps) {\n  const Icon = icons[type];\n\n  return (\n    <div className=\"flex flex-col items-center justify-center h-full p-8 text-center\">\n      <div className=\"flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-light-bg-tertiary dark:bg-dark-bg-tertiary\">\n        <Icon className=\"w-8 h-8 text-light-text-secondary dark:text-dark-text-secondary\" />\n      </div>\n      <h3 className=\"mb-2 text-lg font-medium text-light-text-primary dark:text-dark-text-primary\">\n        {title}\n      </h3>\n      <p className=\"mb-6 text-sm text-light-text-secondary dark:text-dark-text-secondary max-w-sm\">\n        {message}\n      </p>\n      {action && (\n        <button\n          onClick={action.onClick}\n          className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n        >\n          {action.label}\n        </button>\n      )}\n    </div>\n  );\n}\n", "import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { XMarkIcon } from \"@heroicons/react/24/outline\";\nimport { startCase } from \"lodash-es\";\nimport { cn } from \"~/utils/cn\";\nimport type { Column } from \"~/types\";\n\ninterface RowDetailsSidebarProps {\n  row: Record<string, unknown> | null;\n  columns: Column[];\n  isOpen: boolean;\n  onClose: () => void;\n  formatCellValue: (value: unknown) => string;\n}\n\nexport function RowDetailsSidebar({\n  row,\n  columns,\n  isOpen,\n  onClose,\n  formatCellValue,\n}: RowDetailsSidebarProps) {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  const sidebarContent = (\n    <>\n      <div\n        className={cn(\n          \"fixed inset-0 bg-black/30 transition-opacity duration-300 ease-in-out z-40\",\n          isOpen ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n        )}\n        onClick={onClose}\n      />\n      <div\n        className={cn(\n          \"m-6 border rounded-lg fixed inset-y-0 right-0 w-96 bg-white dark:bg-gray-900 shadow-xl transform transition-transform duration-300 ease-in-out z-50 flex flex-col\",\n          isOpen ? \"translate-x-0\" : \"translate-x-full\"\n        )}\n      >\n        <div className=\" rounded-lg flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between bg-gray-50 dark:bg-gray-800\">\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">Row Details</h3>\n          <button\n            onClick={onClose}\n            className=\"p-1 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n          >\n            <XMarkIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n        {row && (\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"p-4 space-y-4\">\n              {columns.map((column) => (\n                <div \n                  key={column.name}\n                  className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden\"\n                >\n                  <div className=\"px-4 py-2 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                        {startCase(column.name)}\n                      </span>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400 font-mono\">\n                        {column.type}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"px-4 py-3 bg-white dark:bg-gray-900\">\n                    <div className=\"font-mono text-sm text-gray-900 dark:text-gray-100 break-words\">\n                      {formatCellValue(row[column.name])}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return createPortal(sidebarContent, document.body);\n}\n", "import { useState, useEffect } from 'react';\n\nexport function useClient() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\n", "import { json, type ActionFunctionArgs } from '@remix-run/node';\nimport { z } from 'zod';\nimport { db } from '~/lib/db/db.server';\nimport { queryHistory } from '~/lib/db/schema';\nimport { requireUser } from '~/lib/auth/session.server';\nimport { eq } from 'drizzle-orm';\nimport { ConnectionManager } from '~/lib/db/connection-manager.server';\n\nconst querySchema = z.object({\n  connectionId: z.string(),\n  query: z.string().min(1),\n});\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n\n  if (request.method !== 'POST') {\n    throw json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  const { connectionId, query } = querySchema.parse(await request.json());\n\n  // Verify user has access to the connection\n  const connection = await db.query.databaseConnections.findFirst({\n    where: eq(databaseConnections.id, connectionId),\n    with: {\n      organization: {\n        with: {\n          members: {\n            where: eq(organizationMembers.userId, user.id),\n          },\n        },\n      },\n    },\n  });\n\n  if (!connection || !connection.organization.members.length) {\n    throw json({ error: 'Connection not found' }, { status: 404 });\n  }\n\n  // Get the database connection\n  const manager = ConnectionManager.getInstance();\n  const pool = await manager.getConnection(connectionId);\n\n  // Execute the query\n  const startTime = Date.now();\n  let result;\n  let error;\n  let status = 'success';\n\n  try {\n    const client = await pool.connect();\n    try {\n      result = await client.query(query);\n    } catch (e) {\n      error = e.message;\n      status = 'error';\n      result = null;\n    } finally {\n      client.release();\n    }\n  } catch (e) {\n    error = e.message;\n    status = 'error';\n    result = null;\n  }\n\n  const endTime = Date.now();\n  const executionTimeMs = endTime - startTime;\n\n  // Record the query in history\n  await db.insert(queryHistory).values({\n    organizationId: connection.organizationId,\n    connectionId,\n    userId: user.id,\n    query,\n    executionTimeMs: executionTimeMs.toString(),\n    status,\n    error: error || null,\n  });\n\n  if (error) {\n    throw json({ error }, { status: 400 });\n  }\n\n  return json({\n    rows: result.rows,\n    rowCount: result.rowCount,\n    fields: result.fields.map(f => ({\n      name: f.name,\n      dataTypeId: f.dataTypeID,\n    })),\n    executionTimeMs,\n  });\n}\n", "import { json, type LoaderFunctionArgs, type MetaFunction } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { TableList } from \"~/components/TableList\";\nimport { PageContainer } from \"~/components/PageContainer\";\nimport type { TableSchema } from \"~/types\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Data Studio\" },\n    { name: \"description\", content: \"Database management studio\" },\n  ];\n};\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  try {\n    const { fetchSchema } = await import(\"~/utils/api.server\");\n    const tables = await fetchSchema();\n    return json({ tables });\n  } catch (error) {\n    console.error('Error loading tables:', error);\n    return json({ tables: [] });\n  }\n}\n\ntype LoaderData = {\n  tables: TableSchema[];\n};\n\nexport default function Index() {\n  const { tables } = useLoaderData<LoaderData>();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredTables = tables.filter((table) =>\n    table.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search tables...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full p-3 pl-10 rounded-lg bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n          />\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <svg className=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n      <TableList tables={filteredTables} />\n    </PageContainer>\n  );\n}\n", "import { Link } from \"@remix-run/react\";\nimport type { TableSchema } from \"~/types\";\nimport { startCase, capitalize } from \"lodash-es\";\n\ninterface TableListProps {\n  tables: TableSchema[];\n}\n\nfunction formatBytes(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n  \n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  \n  return `${size.toFixed(1)} ${units[unitIndex]}`;\n}\n\nfunction formatNumber(num: number): string {\n  if (!num || num < 0) return '0';\n  return new Intl.NumberFormat().format(num);\n}\n\nfunction prettyPrintName(name: string): string {\n  return startCase(name.toLowerCase());\n}\n\nexport function TableList({ tables }: TableListProps) {\n  return (\n    <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n      {tables.map((table) => (\n        <Link\n          key={table.name}\n          to={`/${table.name}`}\n          className=\"group block w-full p-6 rounded-xl bg-white dark:bg-gray-800 shadow-sm border border-gray-200 dark:border-gray-700 hover:bg-white dark:hover:bg-gray-700 transition-all duration-200 transform hover:-translate-y-1 hover:shadow-xl\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <h5 className=\"text-xl font-bold tracking-tight text-gray-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors truncate max-w-[80%]\">\n              {prettyPrintName(table.name)}\n            </h5>\n            <span className=\"flex-shrink-0 flex items-center justify-center w-8 h-8 rounded-full bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-400\">\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n            </span>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{table.columns.length}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">columns</span>\n              </p>\n              <div className=\"mx-3 h-4 w-px bg-gray-300 dark:bg-gray-600\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{formatNumber(table.rowCount)}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">rows</span>\n              </p>\n              <div className=\"mx-3 h-4 w-px bg-gray-300 dark:bg-gray-600\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{formatBytes(table.sizeInBytes)}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">size</span>\n              </p>\n            </div>\n            {Array.isArray(table.primaryKey) && table.primaryKey.length > 0 && (\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                <span className=\"font-normal text-gray-500 dark:text-gray-400\">Primary Key:</span>{' '}\n                <span className=\"font-mono text-purple-600 dark:text-purple-400\">\n                  {table.primaryKey.map(prettyPrintName).join(\", \")}\n                </span>\n              </p>\n            )}\n          </div>\n          <div className=\"mt-4 flex items-center text-sm text-purple-600 dark:text-purple-400\">\n            <span>View table</span>\n            <svg className=\"flex-shrink-0 w-4 h-4 ml-1 transition-transform group-hover:translate-x-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n}\n", "import { type ReactNode } from \"react\";\n\ninterface PageContainerProps {\n  children: ReactNode;\n}\n\nexport function PageContainer({ children }: PageContainerProps) {\n  return (\n    <div className=\"h-screen bg-gray-100 dark:bg-gray-950\">\n      <div className=\"h-full bg-white dark:bg-gray-900 rounded-lg shadow-sm overflow-hidden flex flex-col\">\n        {children}\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport { createUser, createUserSession, getUserSession, validatePassword } from \"~/services/auth.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await getUserSession(request);\n  if (user) return redirect(\"/\");\n  return json({});\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const confirmPassword = formData.get(\"confirmPassword\");\n\n  if (!email || !password || !confirmPassword) {\n    return json(\n      {\n        errors: {\n          email: !email ? \"Email is required\" : null,\n          password: !password ? \"Password is required\" : null,\n          confirmPassword: !confirmPassword ? \"Password confirmation is required\" : null,\n        },\n      },\n      { status: 400 }\n    );\n  }\n\n  if (typeof email !== \"string\" || typeof password !== \"string\" || typeof confirmPassword !== \"string\") {\n    return json(\n      {\n        errors: {\n          email: typeof email !== \"string\" ? \"Invalid email\" : null,\n          password: typeof password !== \"string\" ? \"Invalid password\" : null,\n          confirmPassword: typeof confirmPassword !== \"string\" ? \"Invalid password confirmation\" : null,\n        },\n      },\n      { status: 400 }\n    );\n  }\n\n  const errors = {\n    email: null,\n    password: null,\n    confirmPassword: null,\n  };\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(email)) {\n    errors.email = \"Invalid email address\";\n  }\n\n  const passwordError = await validatePassword(password);\n  if (passwordError) {\n    errors.password = passwordError;\n  }\n\n  if (password !== confirmPassword) {\n    errors.confirmPassword = \"Passwords do not match\";\n  }\n\n  if (Object.values(errors).some(Boolean)) {\n    return json({ errors }, { status: 400 });\n  }\n\n  try {\n    const user = await createUser(email, password);\n    return createUserSession({\n      request,\n      userId: user.id,\n      remember: false,\n      redirectTo: \"/\",\n    });\n  } catch (error) {\n    if (error instanceof Error && error.message === \"User already exists\") {\n      return json(\n        { errors: { email: \"A user already exists with this email\" } },\n        { status: 400 }\n      );\n    }\n    throw error;\n  }\n}\n\nexport default function SignUp() {\n  const actionData = useActionData<typeof action>();\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-50\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"rounded-lg bg-white px-8 pb-8 pt-6 shadow-md\">\n          <div className=\"mb-8 text-center\">\n            <h1 className=\"text-2xl font-bold\">Create an account</h1>\n            <p className=\"text-gray-600\">Start managing your databases</p>\n          </div>\n\n          <Form method=\"post\" className=\"space-y-6\">\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Email\n              </label>\n              <input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                required\n                autoFocus={true}\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"mt-1 text-red-600\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"password\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Password\n              </label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                required\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"mt-1 text-red-600\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"confirmPassword\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Confirm Password\n              </label>\n              <input\n                type=\"password\"\n                name=\"confirmPassword\"\n                id=\"confirmPassword\"\n                required\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.confirmPassword ? true : undefined}\n                aria-describedby=\"confirmPassword-error\"\n                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:text-sm\"\n              />\n              {actionData?.errors?.confirmPassword && (\n                <div className=\"mt-1 text-red-600\" id=\"confirmPassword-error\">\n                  {actionData.errors.confirmPassword}\n                </div>\n              )}\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                className=\"flex w-full justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n              >\n                Create Account\n              </button>\n            </div>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm text-gray-600\">\n            Already have an account?{\" \"}\n            <Link\n              to=\"/login\"\n              className=\"font-medium text-blue-600 hover:text-blue-500\"\n            >\n              Sign in\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\nimport * as bcrypt from \"bcryptjs\";\nimport { db } from \"~/lib/db/db.server\";\nimport { users } from \"~/lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport type { InferSelectModel } from 'drizzle-orm';\n\ntype User = InferSelectModel<typeof users>;\n\nexport const sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"__session\",\n    httpOnly: true,\n    path: \"/\",\n    sameSite: \"lax\",\n    secrets: [process.env.SESSION_SECRET || \"default-secret-please-change\"],\n    secure: process.env.NODE_ENV === \"production\",\n  },\n});\n\nconst USER_SESSION_KEY = \"userId\";\nconst SESSION_EXPIRY = 60 * 60 * 24 * 30; // 30 days\n\nexport async function createUser(email: string, password: string): Promise<User> {\n  const hashedPassword = await bcrypt.hash(password, 10);\n  \n  const existingUser = await db.query(users).where(eq(users.email, email)).get();\n\n  if (existingUser) {\n    throw new Error(\"User already exists\");\n  }\n\n  const result = await db.insert(users).values({\n    email,\n    name: email.split('@')[0], // Default name from email\n    passwordHash: hashedPassword,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  }).returning();\n\n  return result[0];\n}\n\nexport async function verifyLogin(email: string, password: string): Promise<User> {\n  const user = await db.query(users).where(eq(users.email, email)).get();\n\n  if (!user) {\n    throw new Error(\"Invalid email or password\");\n  }\n\n  const isValid = await bcrypt.compare(password, user.passwordHash);\n  if (!isValid) {\n    throw new Error(\"Invalid email or password\");\n  }\n\n  return user;\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember ? SESSION_EXPIRY : undefined,\n      }),\n    },\n  });\n}\n\nexport async function getUserSession(request: Request) {\n  return sessionStorage.getSession(request.headers.get(\"Cookie\"));\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const session = await getUserSession(request);\n  const userId = session.get(USER_SESSION_KEY);\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function getUser(request: Request): Promise<User | null> {\n  const userId = await getUserSession(request)\n    .then((session) => session.get(USER_SESSION_KEY));\n\n  if (!userId || typeof userId !== \"string\") {\n    return null;\n  }\n\n  try {\n    const user = await db.query(users).where(eq(users.id, userId)).get();\n    return user || null;\n  } catch {\n    throw logout(request);\n  }\n}\n\nexport async function logout(request: Request) {\n  const session = await getUserSession(request);\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport function validatePassword(password: string): string | null {\n  if (password.length < 8) {\n    return \"Password must be at least 8 characters\";\n  }\n\n  if (!/\\d/.test(password)) {\n    return \"Password must contain at least one number\";\n  }\n\n  if (!/[a-z]/.test(password)) {\n    return \"Password must contain at least one lowercase letter\";\n  }\n\n  if (!/[A-Z]/.test(password)) {\n    return \"Password must contain at least one uppercase letter\";\n  }\n\n  return null;\n}\n", "import { useState } from \"react\";\nimport { format } from \"sql-formatter\";\nimport type { QueryResult, TableSchema } from \"~/types\";\nimport { PageContainer } from \"~/components/PageContainer\";\nimport { EmptyState } from \"~/components/EmptyState\";\nimport { LoadingSpinner } from \"~/components/LoadingSpinner\";\nimport { Alert } from \"~/components/Alert\";\nimport { json, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { useActionData, Form, useNavigation, useLoaderData } from \"@remix-run/react\";\nimport { QueryEngine } from \"~/lib/db/query-engine.server\";\nimport { requireUser } from \"~/lib/auth/session.server\";\nimport { SQLEditor } from \"~/components/SQLEditor\";\nimport { fetchSchema } from \"~/utils/api.server\";\n\ninterface ActionData {\n  result?: QueryResult;\n  error?: string;\n}\n\ninterface LoaderData {\n  schema: TableSchema[];\n}\n\nexport async function loader() {\n  const schema = await fetchSchema();\n  return json<LoaderData>({ schema });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const query = formData.get(\"query\") as string;\n  const connectionId = formData.get(\"connectionId\") as string;\n\n  if (!query?.trim()) {\n    return json<ActionData>({ error: \"Query is required\" });\n  }\n\n  if (!connectionId) {\n    return json<ActionData>({ error: \"Database connection is required\" });\n  }\n\n  try {\n    const user = await requireUser(request);\n    const queryEngine = QueryEngine.getInstance();\n    const result = await queryEngine.executeQuery(query, {\n      connectionId,\n      userId: user.id,\n    });\n    return json<ActionData>({ result });\n  } catch (error) {\n    return json<ActionData>({ \n      error: error instanceof Error ? error.message : \"An error occurred\" \n    });\n  }\n}\n\nexport default function QueryPage() {\n  const [query, setQuery] = useState(\"\");\n  const [isFormatting, setIsFormatting] = useState(false);\n  const [syntaxError, setSyntaxError] = useState<string | null>(null);\n  const actionData = useActionData<ActionData>();\n  const { schema } = useLoaderData<LoaderData>();\n  const navigation = useNavigation();\n  const isExecuting = navigation.state === \"submitting\";\n\n  const handleFormat = async () => {\n    if (!query.trim()) return;\n    \n    setIsFormatting(true);\n    try {\n      const formatted = format(query, { language: 'postgresql' });\n      setQuery(formatted);\n    } catch (err) {\n      console.error('Error formatting query:', err);\n    } finally {\n      setIsFormatting(false);\n    }\n  };\n\n  const handleSyntaxError = (error: string | null) => {\n    setSyntaxError(error);\n  };\n\n  const renderError = () => {\n    if (syntaxError) {\n      return (\n        <Alert\n          type=\"warning\"\n          title=\"SQL Syntax Warning\"\n          message={syntaxError}\n          className=\"mb-4\"\n        />\n      );\n    }\n\n    if (actionData?.error) {\n      return (\n        <Alert\n          type=\"error\"\n          title=\"Query Error\"\n          message={actionData.error}\n          className=\"mb-4\"\n        />\n      );\n    }\n\n    return null;\n  };\n\n  const renderResults = () => {\n    if (isExecuting) {\n      return (\n        <div className=\"flex flex-col items-center justify-center p-12 space-y-4\">\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"text-light-text-secondary dark:text-dark-text-secondary\">\n            Executing query...\n          </p>\n        </div>\n      );\n    }\n\n    if (!actionData?.result) {\n      return (\n        <EmptyState\n          type=\"query\"\n          title=\"No Query Results\"\n          message=\"Write and execute a SQL query to see the results here.\"\n        />\n      );\n    }\n\n    if (actionData.result.rows.length === 0) {\n      return (\n        <Alert\n          type=\"info\"\n          title=\"Query Executed Successfully\"\n          message=\"Your query returned no results.\"\n          className=\"mb-4\"\n        />\n      );\n    }\n\n    return (\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4 text-light-text-primary dark:text-dark-text-primary\">Results</h2>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full divide-y divide-light-border dark:divide-dark-border\">\n            <thead className=\"bg-light-bg-secondary dark:bg-dark-bg-tertiary\">\n              <tr>\n                {actionData.result.fields?.map((field) => (\n                  <th\n                    key={field.name}\n                    className=\"px-6 py-3 text-left text-xs font-medium text-light-text-secondary dark:text-dark-text-secondary uppercase tracking-wider\"\n                  >\n                    {field.name}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-light-bg-primary dark:bg-dark-bg-secondary divide-y divide-light-border dark:divide-dark-border\">\n              {actionData.result.rows?.map((row, rowIndex) => (\n                <tr key={rowIndex} className=\"hover:bg-light-bg-secondary dark:hover:bg-dark-bg-tertiary\">\n                  {Object.values(row).map((value, colIndex) => (\n                    <td\n                      key={colIndex}\n                      className=\"px-6 py-4 whitespace-nowrap text-sm text-light-text-primary dark:text-dark-text-primary\"\n                    >\n                      {value === null ? 'NULL' : String(value)}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3\">\n        <h1 className=\"text-xl font-semibold text-light-text-primary dark:text-dark-text-primary\">SQL Query</h1>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between mb-2\">\n              <label htmlFor=\"query\" className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary\">\n                SQL Query\n              </label>\n              <button\n                onClick={handleFormat}\n                type=\"button\"\n                disabled={isFormatting || !query.trim()}\n                className=\"text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n              >\n                {isFormatting ? (\n                  <>\n                    <LoadingSpinner size=\"sm\" />\n                    <span>Formatting...</span>\n                  </>\n                ) : (\n                  <span>Format Query</span>\n                )}\n              </button>\n            </div>\n            <Form method=\"post\">\n              <input type=\"hidden\" name=\"query\" value={query} />\n              {renderError()}\n              <SQLEditor\n                value={query}\n                onChange={setQuery}\n                onError={handleSyntaxError}\n                className=\"mb-4\"\n                schema={schema}\n              />\n              <div className=\"mt-4\">\n                <button\n                  type=\"submit\"\n                  disabled={isExecuting || !query.trim()}\n                  className=\"w-full bg-primary-600 text-white py-2 px-4 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n                >\n                  {isExecuting ? (\n                    <>\n                      <LoadingSpinner size=\"sm\" className=\"text-white\" />\n                      <span>Executing...</span>\n                    </>\n                  ) : (\n                    <span>Execute Query</span>\n                  )}\n                </button>\n              </div>\n            </Form>\n          </div>\n\n          {renderResults()}\n        </div>\n      </div>\n    </PageContainer>\n  );\n}\n", "interface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nconst sizeClasses = {\n  sm: 'h-4 w-4',\n  md: 'h-6 w-6',\n  lg: 'h-8 w-8',\n};\n\nexport function LoadingSpinner({ size = 'md', className = '' }: LoadingSpinnerProps) {\n  return (\n    <div role=\"status\" className={className}>\n      <svg\n        className={`${sizeClasses[size]} animate-spin text-light-border dark:text-dark-border fill-primary-600`}\n        viewBox=\"0 0 100 101\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n          fill=\"currentColor\"\n        />\n        <path\n          d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n          fill=\"currentFill\"\n        />\n      </svg>\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n", "import { XCircleIcon, CheckCircleIcon, ExclamationTriangleIcon, InformationCircleIcon } from '@heroicons/react/24/solid';\n\ninterface AlertProps {\n  type: 'error' | 'success' | 'warning' | 'info';\n  title: string;\n  message?: string;\n  className?: string;\n}\n\nconst alertStyles = {\n  error: {\n    container: 'bg-red-50 dark:bg-red-900/50',\n    icon: 'text-red-400 dark:text-red-300',\n    title: 'text-red-800 dark:text-red-200',\n    message: 'text-red-700 dark:text-red-300',\n    Icon: XCircleIcon,\n  },\n  success: {\n    container: 'bg-green-50 dark:bg-green-900/50',\n    icon: 'text-green-400 dark:text-green-300',\n    title: 'text-green-800 dark:text-green-200',\n    message: 'text-green-700 dark:text-green-300',\n    Icon: CheckCircleIcon,\n  },\n  warning: {\n    container: 'bg-yellow-50 dark:bg-yellow-900/50',\n    icon: 'text-yellow-400 dark:text-yellow-300',\n    title: 'text-yellow-800 dark:text-yellow-200',\n    message: 'text-yellow-700 dark:text-yellow-300',\n    Icon: ExclamationTriangleIcon,\n  },\n  info: {\n    container: 'bg-blue-50 dark:bg-blue-900/50',\n    icon: 'text-blue-400 dark:text-blue-300',\n    title: 'text-blue-800 dark:text-blue-200',\n    message: 'text-blue-700 dark:text-blue-300',\n    Icon: InformationCircleIcon,\n  },\n};\n\nexport function Alert({ type, title, message, className = '' }: AlertProps) {\n  const styles = alertStyles[type];\n  const Icon = styles.Icon;\n\n  return (\n    <div className={`rounded-lg p-4 ${styles.container} ${className}`}>\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          <Icon className={`h-5 w-5 ${styles.icon}`} aria-hidden=\"true\" />\n        </div>\n        <div className=\"ml-3\">\n          <h3 className={`text-sm font-medium ${styles.title}`}>{title}</h3>\n          {message && (\n            <div className={`mt-2 text-sm ${styles.message}`}>\n              <p>{message}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { Pool, PoolConfig } from 'pg';\nimport { ConnectionManager } from './connection-manager.server';\nimport { db } from './db.server';\nimport { queryHistory } from './schema/connections';\nimport type { QueryResult } from '~/types';\nimport { createId } from '@paralleldrive/cuid2';\n\nconst DEFAULT_QUERY_TIMEOUT = 30000; // 30 seconds\nconst MAX_ROWS = 1000; // Maximum number of rows to return\n\nexport interface QueryOptions {\n  timeout?: number;\n  maxRows?: number;\n  connectionId: string;\n  userId: string;\n}\n\nexport class QueryEngine {\n  private static instance: QueryEngine;\n  private connectionManager: ConnectionManager;\n\n  private constructor() {\n    this.connectionManager = ConnectionManager.getInstance();\n  }\n\n  public static getInstance(): QueryEngine {\n    if (!QueryEngine.instance) {\n      QueryEngine.instance = new QueryEngine();\n    }\n    return QueryEngine.instance;\n  }\n\n  private async recordQuery(\n    options: QueryOptions,\n    sql: string,\n    startTime: number,\n    result: { success: boolean; error?: string; rowCount?: number }\n  ) {\n    const executionTime = Date.now() - startTime;\n\n    await db.insert(queryHistory).values({\n      id: createId(),\n      connectionId: options.connectionId,\n      userId: options.userId,\n      query: sql,\n      status: result.success ? 'success' : 'error',\n      error: result.error,\n      executionTimeMs: executionTime.toString(),\n      rowCount: result.rowCount?.toString(),\n    });\n  }\n\n  public async executeQuery(\n    sql: string,\n    options: QueryOptions\n  ): Promise<QueryResult> {\n    const startTime = Date.now();\n    const pool = await this.connectionManager.getConnection(options.connectionId);\n    const client = await pool.connect();\n\n    try {\n      // Set statement timeout\n      const timeout = options.timeout || DEFAULT_QUERY_TIMEOUT;\n      await client.query(`SET statement_timeout = ${timeout}`);\n\n      // Add row limit if not already present\n      const maxRows = options.maxRows || MAX_ROWS;\n      const limitedSql = this.addRowLimit(sql, maxRows);\n\n      const result = await client.query(limitedSql);\n\n      await this.recordQuery(options, sql, startTime, {\n        success: true,\n        rowCount: result.rowCount,\n      });\n\n      return {\n        rows: result.rows,\n        fields: result.fields.map(field => ({\n          name: field.name,\n          dataTypeID: field.dataTypeID,\n        })),\n      };\n    } catch (error) {\n      await this.recordQuery(options, sql, startTime, {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  private addRowLimit(sql: string, limit: number): string {\n    const normalizedSql = sql.trim().toLowerCase();\n    \n    // Don't add LIMIT to statements that aren't SELECT queries\n    if (!normalizedSql.startsWith('select')) {\n      return sql;\n    }\n\n    // Don't add LIMIT if it's already present\n    if (normalizedSql.includes('limit')) {\n      return sql;\n    }\n\n    return `${sql} LIMIT ${limit}`;\n  }\n}\n", "import { sql } from '@codemirror/lang-sql';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { useTheme } from '~/hooks/useTheme';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport { Extension, Compartment, StateEffect } from '@codemirror/state';\nimport { useCallback, useEffect, useRef, useMemo } from 'react';\nimport { basicSetup } from 'codemirror';\nimport { linter, lintGutter, Diagnostic } from '@codemirror/lint';\nimport { autocompletion, CompletionContext, CompletionResult } from '@codemirror/autocomplete';\nimport type { TableSchema } from '~/types';\n\ninterface SQLEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  height?: string;\n  onError?: (error: string | null) => void;\n  schema?: TableSchema[];\n}\n\n// SQL Keywords for auto-completion\nconst SQL_KEYWORDS = [\n  'SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING',\n  'JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'INNER JOIN', 'OUTER JOIN',\n  'INSERT INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE FROM',\n  'CREATE TABLE', 'ALTER TABLE', 'DROP TABLE', 'TRUNCATE TABLE',\n  'INDEX', 'VIEW', 'FUNCTION', 'TRIGGER', 'CONSTRAINT',\n  'PRIMARY KEY', 'FOREIGN KEY', 'NOT NULL', 'UNIQUE', 'DEFAULT',\n  'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'DISTINCT',\n  'AND', 'OR', 'IN', 'NOT IN', 'LIKE', 'BETWEEN',\n  'ASC', 'DESC', 'LIMIT', 'OFFSET', 'AS'\n];\n\nfunction getSQLCompletions(context: CompletionContext, schema?: TableSchema[]): CompletionResult | null {\n  // Only trigger after space or when explicitly requested\n  const triggerChar = context.matchBefore(/\\w*$/);\n  const previousChar = context.state.doc.sliceString(Math.max(0, context.pos - 1), context.pos);\n  \n  // Don't show completions while actively typing unless explicitly requested\n  if (!context.explicit && previousChar !== ' ' && previousChar !== '.') {\n    return null;\n  }\n\n  if (!triggerChar) return null;\n\n  const textBefore = context.state.doc.sliceString(0, context.pos);\n  const lastWord = textBefore.split(/\\s+/).pop()?.toUpperCase() || '';\n\n  let options = [];\n\n  // Always include keywords but with lower boost\n  options.push(...SQL_KEYWORDS.map(keyword => ({\n    label: keyword,\n    type: 'keyword',\n    boost: 0.5\n  })));\n\n  if (schema) {\n    // Add table names with higher boost after FROM or JOIN\n    if (['FROM', 'JOIN', 'UPDATE', 'INTO'].includes(lastWord)) {\n      options.push(...schema.map(table => ({\n        label: table.name,\n        type: 'type',\n        boost: 2,\n        info: `${table.columns.length} columns`\n      })));\n    }\n\n    // Add column names with highest boost after SELECT, WHERE, ORDER BY, or after a table name\n    const isAfterTable = schema.some(table => lastWord === table.name.toUpperCase());\n    if (['SELECT', 'WHERE', 'BY', 'ON'].includes(lastWord) || isAfterTable || previousChar === '.') {\n      schema.forEach(table => {\n        table.columns.forEach(column => {\n          options.push({\n            label: column.name,\n            type: 'property',\n            boost: 3,\n            info: `${table.name}.${column.name} (${column.type})`\n          });\n        });\n      });\n    }\n  }\n\n  return {\n    from: triggerChar.from,\n    options,\n    validFor: /^\\w*$/\n  };\n}\n\nfunction createSQLLinter() {\n  return linter((view) => {\n    const text = view.state.doc.toString();\n    if (!text.trim()) return [];\n    \n    const diagnostics: Diagnostic[] = [];\n    \n    // Basic SQL validation\n    if (!text.toLowerCase().match(/^(select|insert|update|delete|create|drop|alter|with)/)) {\n      diagnostics.push({\n        from: 0,\n        to: text.length,\n        severity: 'warning',\n        message: 'Query should start with a valid SQL command'\n      });\n    }\n\n    const singleQuotes = (text.match(/'/g) || []).length;\n    const doubleQuotes = (text.match(/\"/g) || []).length;\n    if (singleQuotes % 2 !== 0) {\n      diagnostics.push({\n        from: 0,\n        to: text.length,\n        severity: 'error',\n        message: 'Unmatched single quotes'\n      });\n    }\n    if (doubleQuotes % 2 !== 0) {\n      diagnostics.push({\n        from: 0,\n        to: text.length,\n        severity: 'error',\n        message: 'Unmatched double quotes'\n      });\n    }\n\n    return diagnostics;\n  }, {\n    delay: 300  // Reduced delay for more responsive feedback\n  });\n}\n\nconst lightTheme = EditorView.theme({\n  '&': {\n    backgroundColor: 'transparent',\n  },\n  '.cm-gutters': {\n    backgroundColor: 'transparent',\n    border: 'none',\n  },\n  '.cm-content': {\n    caretColor: '#000',\n  },\n  '&.cm-focused .cm-cursor': {\n    borderLeftColor: '#000',\n  },\n  '.cm-placeholder': {\n    color: '#999',\n  },\n});\n\nexport function SQLEditor({\n  value,\n  onChange,\n  placeholder = 'Enter your SQL query here...',\n  className = '',\n  height = '200px',\n  onError,\n  schema,\n}: SQLEditorProps) {\n  const { isDark } = useTheme();\n  const editorRef = useRef<HTMLDivElement>(null);\n  const viewRef = useRef<EditorView>();\n  const sqlLinter = useMemo(() => createSQLLinter(), []);\n  const isInternalChange = useRef(false);\n  \n  // Create compartments for dynamic configuration\n  const themeCompartment = useMemo(() => new Compartment(), []);\n  const lintCompartment = useMemo(() => new Compartment(), []);\n  const completionCompartment = useMemo(() => new Compartment(), []);\n\n  const createEditor = useCallback(() => {\n    if (!editorRef.current) return;\n\n    const baseExtensions: Extension[] = [\n      basicSetup,\n      sql(),\n      EditorView.updateListener.of((update: ViewUpdate) => {\n        if (update.docChanged) {\n          isInternalChange.current = true;\n          const newValue = update.state.doc.toString();\n          onChange(newValue);\n          // Reset the flag after the current call stack\n          setTimeout(() => {\n            isInternalChange.current = false;\n          }, 0);\n        }\n      }),\n      EditorView.theme({\n        '&': {\n          height,\n        },\n      }),\n      themeCompartment.of(isDark ? oneDark : lightTheme),\n      lintCompartment.of([lintGutter(), sqlLinter])\n    ];\n\n    // Add autocompletion in its own compartment if schema is provided\n    if (schema) {\n      baseExtensions.push(\n        completionCompartment.of(\n          autocompletion({\n            override: [context => getSQLCompletions(context, schema)],\n            closeOnBlur: true,\n            defaultKeymap: true,\n            maxRenderedOptions: 10,\n            activateOnTyping: false,\n            icons: false\n          })\n        )\n      );\n    }\n\n    const view = new EditorView({\n      doc: value,\n      extensions: baseExtensions,\n      parent: editorRef.current,\n    });\n\n    viewRef.current = view;\n\n    return () => {\n      view.destroy();\n    };\n  }, [onChange, height, isDark, schema, sqlLinter]);\n\n  // Handle theme changes\n  useEffect(() => {\n    const view = viewRef.current;\n    if (view) {\n      view.dispatch({\n        effects: themeCompartment.reconfigure(isDark ? oneDark : lightTheme)\n      });\n    }\n  }, [isDark]);\n\n  // Handle external value changes\n  useEffect(() => {\n    const view = viewRef.current;\n    if (!isInternalChange.current && view && view.state.doc.toString() !== value) {\n      const transaction = view.state.update({\n        changes: {\n          from: 0,\n          to: view.state.doc.length,\n          insert: value\n        },\n        selection: view.state.selection\n      });\n      view.dispatch(transaction);\n    }\n  }, [value]);\n\n  // Initialize editor\n  useEffect(() => {\n    if (editorRef.current) {\n      return createEditor();\n    }\n  }, [createEditor]);\n\n  return (\n    <div \n      ref={editorRef} \n      className={`overflow-hidden rounded-lg border border-light-border dark:border-dark-border ${className}`}\n      style={{ height }}\n    />\n  );\n}\n", "import { useEffect, useState } from 'react';\n\nexport function useTheme() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    // Check if user prefers dark mode\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setIsDark(darkModeMediaQuery.matches);\n\n    // Listen for changes in system dark mode preference\n    const listener = (e: MediaQueryListEvent) => setIsDark(e.matches);\n    darkModeMediaQuery.addEventListener('change', listener);\n\n    return () => darkModeMediaQuery.removeEventListener('change', listener);\n  }, []);\n\n  return { isDark };\n}\n", "export default {'entry':{'module':'/build/entry.client-XCGZKRYB.js','imports':['/build/_shared/chunk-3VPVJWTU.js','/build/_shared/chunk-5VEUQK5Q.js','/build/_shared/chunk-HRUNE67B.js','/build/_shared/chunk-RTBKPWXJ.js','/build/_shared/chunk-NO3FWBWP.js','/build/_shared/chunk-ULL77KT2.js','/build/_shared/chunk-R3YRPWCC.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-K4PZM6Z7.js','imports':['/build/_shared/chunk-H4RZZSLZ.js','/build/_shared/chunk-TF3XO5XL.js','/build/_shared/chunk-DTYA7WJF.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/$tableName':{'id':'routes/$tableName','parentId':'root','path':':tableName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$tableName-ZB2ZYHG2.js','imports':['/build/_shared/chunk-M4VBACUD.js','/build/_shared/chunk-7YKZMUHK.js','/build/_shared/chunk-N3ZAQ5C4.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_auth.login':{'id':'routes/_auth.login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_auth.login-R5LL4QM3.js','imports':['/build/_shared/chunk-WDRDG2CH.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_auth.register':{'id':'routes/_auth.register','parentId':'root','path':'register','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_auth.register-MN2XCUG2.js','imports':['/build/_shared/chunk-WDRDG2CH.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-T3K46C2C.js','imports':['/build/_shared/chunk-M4VBACUD.js','/build/_shared/chunk-WUUQRNG3.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.connections':{'id':'routes/api.connections','parentId':'root','path':'api/connections','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.connections-IWLM5RZK.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.query':{'id':'routes/api.query','parentId':'root','path':'api/query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.query-GDVT4CH7.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/organizations':{'id':'routes/organizations','parentId':'root','path':'organizations','index':undefined,'caseSensitive':undefined,'module':'/build/routes/organizations-H3G4G7KK.js','imports':['/build/_shared/chunk-3HRUN5TH.js','/build/_shared/chunk-YMKNCCHG.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/organizations.$id':{'id':'routes/organizations.$id','parentId':'routes/organizations','path':':id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/organizations.$id-NOB7WQKR.js','imports':['/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/organizations.$orgId.connections':{'id':'routes/organizations.$orgId.connections','parentId':'routes/organizations','path':':orgId/connections','index':undefined,'caseSensitive':undefined,'module':'/build/routes/organizations.$orgId.connections-BUD5XPKS.js','imports':['/build/_shared/chunk-DTYA7WJF.js','/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/organizations.new':{'id':'routes/organizations.new','parentId':'routes/organizations','path':'new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/organizations.new-VB435NX4.js','imports':['/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-G7CHZRZX.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/query':{'id':'routes/query','parentId':'root','path':'query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/query-RLYJPMHJ.js','imports':['/build/_shared/chunk-7YKZMUHK.js','/build/_shared/chunk-N3ZAQ5C4.js','/build/_shared/chunk-WUUQRNG3.js','/build/_shared/chunk-YMKNCCHG.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/signup':{'id':'routes/signup','parentId':'root','path':'signup','index':undefined,'caseSensitive':undefined,'module':'/build/routes/signup-2CYNTFIA.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'843e0588','hmr':{'runtime':'/build/_shared/chunk-HRUNE67B.js','timestamp':1732999746813},'url':'/build/manifest-843E0588.js'};", "\nimport * as entryServer from \"/Users/jacob/projects/data-studio/packages/web/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/organizations.$orgId.connections.tsx\";\nimport * as route2 from \"./routes/organizations.$id.tsx\";\nimport * as route3 from \"./routes/organizations.new.tsx\";\nimport * as route4 from \"./routes/api.connections.ts\";\nimport * as route5 from \"./routes/_auth.register.tsx\";\nimport * as route6 from \"./routes/organizations.tsx\";\nimport * as route7 from \"./routes/_auth.login.tsx\";\nimport * as route8 from \"./routes/$tableName.tsx\";\nimport * as route9 from \"./routes/api.query.ts\";\nimport * as route10 from \"./routes/_index.tsx\";\nimport * as route11 from \"./routes/signup.tsx\";\nimport * as route12 from \"./routes/query.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"v3_routeConfig\":false,\"v3_singleFetch\":false,\"v3_lazyRouteDiscovery\":false,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/organizations.$orgId.connections\": {\n      id: \"routes/organizations.$orgId.connections\",\n      parentId: \"routes/organizations\",\n      path: \":orgId/connections\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/organizations.$id\": {\n      id: \"routes/organizations.$id\",\n      parentId: \"routes/organizations\",\n      path: \":id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/organizations.new\": {\n      id: \"routes/organizations.new\",\n      parentId: \"routes/organizations\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/api.connections\": {\n      id: \"routes/api.connections\",\n      parentId: \"root\",\n      path: \"api/connections\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/_auth.register\": {\n      id: \"routes/_auth.register\",\n      parentId: \"root\",\n      path: \"register\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/organizations\": {\n      id: \"routes/organizations\",\n      parentId: \"root\",\n      path: \"organizations\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/_auth.login\": {\n      id: \"routes/_auth.login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/$tableName\": {\n      id: \"routes/$tableName\",\n      parentId: \"root\",\n      path: \":tableName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/api.query\": {\n      id: \"routes/api.query\",\n      parentId: \"root\",\n      path: \"api/query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/signup\": {\n      id: \"routes/signup\",\n      parentId: \"root\",\n      path: \"signup\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/query\": {\n      id: \"routes/query\",\n      parentId: \"root\",\n      path: \"query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    }\n  };"],
  "mappings": ";;;;;;;;;;;AAAA,OAAOA,UAAS;AAAhB,IACQC,OAEKC,OAHb;AAAA;AAAA;AACA,KAAM,EAAE,MAAAD,UAASD,OAEJE,QAAO,IAAID,MAAK;AAAA,MAC3B,MAAM,QAAQ,IAAI,UAAU;AAAA,MAC5B,MAAM,QAAQ,IAAI,UAAU;AAAA,MAC5B,UAAU,QAAQ,IAAI,cAAc;AAAA,MACpC,UAAU,QAAQ,IAAI,cAAc;AAAA,MACpC,MAAM,SAAS,QAAQ,IAAI,UAAU,MAAM;AAAA,IAC7C,CAAC;AAGD,IAAAC,MAAK,GAAG,SAAS,CAAC,QAAQ;AACxB,cAAQ,MAAM,mCAAmC,GAAG,GACpD,QAAQ,KAAK,EAAE;AAAA,IACjB,CAAC;AAAA;AAAA;;;ACfD,SAAS,cAAc;AAOhB,SAAS,kBAAkB,MAAsB;AACtD,MAAI,CAAC;AACH,UAAM,IAAI,MAAM,sCAAsC;AAIxD,MAAM,YAAY,KAAK,QAAQ,kBAAkB,EAAE;AAGnD,MAAI,CAAC,YAAY,KAAK,SAAS;AAC7B,UAAM,IAAI,MAAM,+CAA+C;AAIjE,MAAI,UAAU,WAAW;AACvB,UAAM,IAAI,MAAM,8BAA8B;AAIhD,SAAO,UAAU,YAAY;AAC/B;AA3BA,IAsGM,cA4IO,cAlPb;AAAA;AAAA;AAsGA,IAAM,eAAN,MAAmB;AAAA,MAAnB;AACE,aAAiB,0BAA0B;AAC3C,aAAiB,2BAA2B;AAAA;AAAA,MAEpC,kBAAkB,WAA4B;AACpD,eAAO,KAAK,wBAAwB,KAAK,SAAS;AAAA,MACpD;AAAA,MAEQ,mBAAmB,YAA6B;AACtD,eAAO,KAAK,yBAAyB,KAAK,UAAU;AAAA,MACtD;AAAA,MAEQ,YAAY,OAAoB;AACtC,eAAI,UAAU,OAAa,SACvB,OAAO,SAAU,WAAiB,MAAM,SAAS,IACjD,OAAO,SAAU,YAAkB,QAAQ,SAAS,UACjD,IAAI,MAAM,SAAS,EAAE,QAAQ,MAAM,IAAI;AAAA,MAChD;AAAA,MAEA,mBAAmB,WAAmB,SAAuC;AAC3E,YAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,gBAAM,IAAI,MAAM,oBAAoB;AAGtC,YAAI,QAAQ,kBAAkB;AAE9B,YAAI,WAAW,OAAO,KAAK,OAAO,EAAE,SAAS,GAAG;AAC9C,cAAM,kBAAkB,OAAO,QAAQ,OAAO,EAC3C,OAAO,CAAC,CAAC,MAAM,MAAM,KAAK,mBAAmB,MAAM,CAAC,EACpD,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,IAAI,aAAa,KAAK,YAAY,KAAK,GAAG,EACnE,KAAK,OAAO;AAEf,UAAI,oBACF,SAAS,UAAU;AAAA;AAIvB,eAAO,OAAO,QAAQ,GAAG;AAAA,MAC3B;AAAA,MAEA,oBAAoB,WAA2B;AAC7C,YAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,gBAAM,IAAI,MAAM,oBAAoB;AAGtC,YAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAiBe;AAAA;AAAA;AAAA,4BAGL;AAAA;AAAA;AAIxB,eAAO,OAAO,KAAK;AAAA,MACrB;AAAA,MAEA,oBACE,WACA,YACA,MACQ;AACR,YAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,gBAAM,IAAI,MAAM,oBAAoB;AAGtC,YAAI,CAAC,KAAK,mBAAmB,WAAW,MAAM;AAC5C,gBAAM,IAAI,MAAM,iCAAiC;AAGnD,YAAM,aAAa,OAAO,QAAQ,IAAI,EACnC,OAAO,CAAC,CAAC,MAAM,MAAM,KAAK,mBAAmB,MAAM,CAAC,EACpD,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,IAAI,aAAa,KAAK,YAAY,KAAK,GAAG,EACnE,KAAK,IAAI,GAEN,QAAQ;AAAA,gBACF;AAAA,YACJ;AAAA,eACG,WAAW,aAAa,KAAK,YAAY,WAAW,KAAK;AAAA;AAAA;AAIpE,eAAO,OAAO,KAAK;AAAA,MACrB;AAAA,MAEA,oBACE,WACA,YACQ;AACR,YAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,gBAAM,IAAI,MAAM,oBAAoB;AAGtC,YAAI,CAAC,KAAK,mBAAmB,WAAW,MAAM;AAC5C,gBAAM,IAAI,MAAM,iCAAiC;AAGnD,YAAM,QAAQ;AAAA,qBACG;AAAA,eACN,WAAW,aAAa,KAAK,YAAY,WAAW,KAAK;AAAA;AAGpE,eAAO,OAAO,KAAK;AAAA,MACrB;AAAA,MAEA,oBAAoB,WAAmB,MAAmC;AACxE,YAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,gBAAM,IAAI,MAAM,oBAAoB;AAGtC,YAAM,UAAU,OAAO,KAAK,IAAI,EAAE;AAAA,UAAO,CAAC,WACxC,KAAK,mBAAmB,MAAM;AAAA,QAChC,GACM,SAAS,QAAQ,IAAI,CAAC,WAAW,KAAK,YAAY,KAAK,MAAM,CAAC,CAAC,GAE/D,QAAQ;AAAA,qBACG,eAAe,QAAQ,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,IAAI;AAAA,gBAC1D,OAAO,KAAK,IAAI;AAAA;AAAA;AAI5B,eAAO,OAAO,KAAK;AAAA,MACrB;AAAA,IACF,GAEa,eAAe,IAAI,aAAa;AAAA;AAAA;;;AClP7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,eAAsB,cAAsC;AAC1D,UAAQ,IAAI,+BAA+B;AAC3C,MAAM,SAAS,MAAMC,MAAK,QAAQ;AAClC,MAAI;AACF,mBAAQ,IAAI,2CAA2C,IACxC,MAAM,OAAO,MASzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiCF,GAEa,KAAK,IAAI,UAAQ;AAAA,MAC7B,MAAM,IAAI;AAAA,MACV,SAAS,IAAI,QAAQ,IAAI,UAAQ;AAAA,QAC/B,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,UAAU,IAAI,gBAAgB;AAAA,QAC9B,cAAc,IAAI,kBAAkB;AAAA,MACtC,EAAE;AAAA,MACF,YAAY,IAAI,eAAe;AAAA,MAC/B,UAAU;AAAA;AAAA,MACV,aAAa;AAAA;AAAA,IACf,EAAE;AAAA,EACJ,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,eACpB,WACA,QACA,YAA4B,OACA;AAC5B,MAAM,qBAAqB,kBAAkB,SAAS,GAChD,kBAAkB,SAAS,kBAAkB,MAAM,IAAI,MAEvD,cAAc,kBAChB,aAAa,oBAAoB,cACjC,IAEE,SAAS,MAAMA,MAAK,QAAQ;AAClC,MAAI;AACF,QAAM,SAAS,MAAM,OAAO;AAAA,MAC1B,kBAAkB,uBAAuB;AAAA,IAC3C;AAEA,WAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,WAAW,OAAO,YAAY;AAAA,IAChC;AAAA,EACF,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,aAAaC,MAAmC;AACpE,MAAM,SAAS,MAAMD,MAAK,QAAQ;AAClC,MAAI;AACF,QAAM,SAAS,MAAM,OAAO,MAAMC,IAAG;AACrC,WAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,QAAQ,OAAO,OAAO,IAAI,YAAU;AAAA,QAClC,MAAM,MAAM;AAAA,QACZ,YAAY,MAAM;AAAA,MACpB,EAAE;AAAA,IACJ;AAAA,EACF,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AA/GA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;;;ACFA;AAAA;AAAA;AAAA;AAAA,SAAS,mBAAmB;AAE5B,SAAS,mBAAmB;AAC5B,SAAS,aAAa;AACtB,SAAS,8BAA8B;AAmCjC;AAjCN,IAAM,cAAc;AAEL,SAAR,cACL,SACA,oBACA,iBACA,cACmB;AACnB,SAAO,MAAM,QAAQ,QAAQ,IAAI,YAAY,CAAC,IAC1C;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IACA;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACN;AAEA,SAAS,iBACP,SACA,oBACA,iBACA,cACmB;AACnB,SAAO,IAAI,QAAkB,CAAC,SAAS,WAAW;AAChD,QAAI,WAAW,IAET,EAAE,MAAM,MAAM,IAAI;AAAA,MACtB;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,KAAK,QAAQ;AAAA;AAAA,QAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGA;AAAA,MACA;AAAA,QACE,aAAa;AACX,cAAM,OAAO,IAAI,YAAY;AAC7B,0BAAgB,IAAI,gBAAgB,WAAW,GAE/C;AAAA,YACE,IAAI,SAAS,MAAmC;AAAA,cAC9C,SAAS;AAAA,cACT,QAAQ,WAAW,MAAM;AAAA,YAC3B,CAAC;AAAA,UACH,GAEA,KAAK,IAAI;AAAA,QACX;AAAA,QACA,aAAa,OAAgB;AAC3B,iBAAO,KAAK;AAAA,QACd;AAAA,QACA,QAAQ,OAAgB;AACtB,qBAAW,IACX,QAAQ,MAAM,KAAK;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAEA,eAAW,OAAO,WAAW;AAAA,EAC/B,CAAC;AACH;AAEA,SAAS,qBACP,SACA,oBACA,iBACA,cACmB;AACnB,SAAO,IAAI,QAAkB,CAAC,SAAS,WAAW;AAChD,QAAI,WAAW,IAET,EAAE,MAAM,MAAM,IAAI;AAAA,MACtB;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,KAAK,QAAQ;AAAA;AAAA,QAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGA;AAAA,MACA;AAAA,QACE,eAAe;AACb,cAAM,OAAO,IAAI,YAAY;AAC7B,0BAAgB,IAAI,gBAAgB,WAAW,GAE/C;AAAA,YACE,IAAI,SAAS,MAAmC;AAAA,cAC9C,SAAS;AAAA,cACT,QAAQ,WAAW,MAAM;AAAA,YAC3B,CAAC;AAAA,UACH,GAEA,KAAK,IAAI;AAAA,QACX;AAAA,QACA,aAAa,OAAgB;AAC3B,iBAAO,KAAK;AAAA,QACd;AAAA,QACA,QAAQ,OAAgB;AACtB,qBAAW,IACX,QAAQ,MAAM,KAAK;AAAA,QACrB;AAAA,MACF;AAAA,IACF;AAEA,eAAW,OAAO,WAAW;AAAA,EAC/B,CAAC;AACH;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACF;AACA,SAA4C,YAAY;;;;;;ACTxD,SAAS,eAAe,YAAY,WAAW,gBAAgB;AA+C3D,mBAAAC,eAAA;AAtCJ,IAAM,eAAe,cAA4C,MAAS;AAEnE,SAAS,cAAc,EAAE,SAAS,GAAkC;AACzE,MAAM,CAAC,OAAO,QAAQ,IAAI,SAAgB,MAAM;AAE9C,QAAI,OAAO,SAAW;AAAa,aAAO;AAE1C,QAAM,QAAQ,aAAa,QAAQ,OAAO;AAC1C,WAAI,UAEG,OAAO,WAAW,8BAA8B,EAAE,UAAU,SAAS;AAAA,EAC9E,CAAC;AAED,YAAU,MAAM;AACd,QAAM,OAAO,OAAO,SAAS;AAG7B,SAAK,UAAU,OAAO,SAAS,MAAM,GAGrC,KAAK,UAAU,IAAI,KAAK,GAGxB,aAAa,QAAQ,SAAS,KAAK;AAAA,EACrC,GAAG,CAAC,KAAK,CAAC;AAEV,MAAM,cAAc,MAAM;AACxB,YAAQ,IAAI,cAAc,GAC1B,SAAS,CAAC,cAAe,cAAc,UAAU,SAAS,OAAQ;AAAA,EACpE;AAGA,mBAAU,MAAM;AAEd,IADa,OAAO,SAAS,gBACxB,UAAU,IAAI,KAAK;AAAA,EAC1B,GAAG,CAAC,CAAC,GAGH,gBAAAA,QAAC,aAAa,UAAb,EAAsB,OAAO,EAAE,OAAO,YAAY,GAChD,YADH;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;AAEO,SAAS,WAAW;AACzB,MAAM,UAAU,WAAW,YAAY;AACvC,MAAI,YAAY;AACd,UAAM,IAAI,MAAM,8CAA8C;AAEhE,SAAO;AACT;;;AC3DA,SAAS,MAAM,MAAM,mBAAmB;AAExC;AAAA,EACE,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,OAGK;AACP,SAAS,MAAM,kBAAkB;AACjC,SAAS,gBAAgB;AACzB,OAAO,UAAU;AAoCH,mBAAAC,eAAA;AAvBC,SAAR,OAAwB,EAAE,UAAU,MAAAC,MAAK,GAAgB;AAC9D,MAAM,EAAE,OAAO,YAAY,IAAI,SAAS,GAClC,WAAW,YAAY,GAEvB,aAAa;AAAA,IACjB,EAAE,MAAM,UAAU,MAAM,KAAK,MAAM,UAAU;AAAA,IAC7C,EAAE,MAAM,aAAa,MAAM,cAAc,MAAM,aAAa;AAAA,IAC5D,EAAE,MAAM,aAAa,MAAM,UAAU,MAAM,aAAa;AAAA,EAC1D,GAEM,iBAAiB;AAAA,IACrB,EAAE,MAAM,gBAAgB,MAAM,WAAW;AAAA,IACzC,EAAE,MAAM,iBAAiB,MAAM,iBAAiB;AAAA,IAChD,EAAE,MAAM,YAAY,MAAM,YAAY;AAAA,EACxC;AAEA,SACE,gBAAAD,QAAC,SAAI,WAAU,+DAEb;AAAA,oBAAAA,QAAC,SAAI,WAAU,iBACb,0BAAAA,QAAC,SAAI,WAAU,4FACb;AAAA,sBAAAA,QAAC,SAAI,WAAU,kDACb;AAAA,wBAAAA,QAAC,SAAI,WAAU,wCACb,0BAAAA,QAAC,QAAG,WAAU,yEAAwE,2BAAtF;AAAA;AAAA;AAAA;AAAA,eAAiG,KADnG;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA,QAAC,SAAI,WAAU,8BACZ,qBAAW,IAAI,CAAC,SAAS;AACxB,cAAM,WAAW,SAAS,aAAa,KAAK;AAC5C,iBACE,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,IAAI,KAAK;AAAA,cACT,WAAW;AAAA,gBACT,WACI,sGACA;AAAA,gBACJ;AAAA,cACF;AAAA,cAEA;AAAA,gCAAAA;AAAA,kBAAC,KAAK;AAAA,kBAAL;AAAA,oBACC,WAAW;AAAA,sBACT,WACI,wDACA;AAAA,sBACJ;AAAA,oBACF;AAAA,oBACA,eAAY;AAAA;AAAA,kBAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQA;AAAA,gBACC,KAAK;AAAA;AAAA;AAAA,YAlBD,KAAK;AAAA,YADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAoBA;AAAA,QAEJ,CAAC,KA1BH;AAAA;AAAA;AAAA;AAAA,eA2BA;AAAA,WA/BF;AAAA;AAAA;AAAA;AAAA,aAgCA;AAAA,MACA,gBAAAA,QAAC,SAAI,WAAU,kGACZ;AAAA,QAAAC,QACC,gBAAAD,QAAC,QAAK,IAAG,OAAM,WAAU,YACvB;AAAA,0BAAAA,QAAC,KAAK,QAAL,EAAY,WAAU,qMACrB;AAAA,4BAAAA,QAAC,kBAAe,WAAU,kBAA1B;AAAA;AAAA;AAAA;AAAA,mBAAyC;AAAA,YACzC,gBAAAA,QAAC,UAAK,WAAU,oBAAoB,UAAAC,MAAK,QAAzC;AAAA;AAAA;AAAA;AAAA,mBAA8C;AAAA,eAFhD;AAAA;AAAA;AAAA;AAAA,iBAGA;AAAA,UACA,gBAAAD;AAAA,YAAC;AAAA;AAAA,cACC,IAAI;AAAA,cACJ,OAAM;AAAA,cACN,WAAU;AAAA,cACV,SAAQ;AAAA,cACR,OAAM;AAAA,cACN,WAAU;AAAA,cACV,SAAQ;AAAA,cAER,0BAAAA,QAAC,KAAK,OAAL,EAAW,WAAU,4JACpB,0BAAAA,QAAC,SAAI,WAAU,QACZ;AAAA,+BAAe,IAAI,CAAC,SACnB,gBAAAA,QAAC,KAAK,MAAL,EACE,WAAC,EAAE,OAAO,MACT,gBAAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,IAAI,KAAK;AAAA,oBACT,WAAW;AAAA,sBACT,SAAS,0CAA0C;AAAA,sBACnD;AAAA,oBACF;AAAA,oBAEC,eAAK;AAAA;AAAA,kBAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQA,KAVY,KAAK,MAArB;AAAA;AAAA;AAAA;AAAA,uBAYA,CACD;AAAA,gBACD,gBAAAA,QAAC,KAAK,MAAL,EACE,WAAC,EAAE,OAAO,MACT,gBAAAA,QAAC,QAAK,QAAO,WAAU,QAAO,QAC5B,0BAAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAK;AAAA,oBACL,WAAW;AAAA,sBACT,SAAS,0CAA0C;AAAA,sBACnD;AAAA,oBACF;AAAA,oBACD;AAAA;AAAA,kBAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQA,KATF;AAAA;AAAA;AAAA;AAAA,uBAUA,KAZJ;AAAA;AAAA;AAAA;AAAA,uBAcA;AAAA,mBA9BF;AAAA;AAAA;AAAA;AAAA,qBA+BA,KAhCF;AAAA;AAAA;AAAA;AAAA,qBAiCA;AAAA;AAAA,YA1CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA2CA;AAAA,aAhDF;AAAA;AAAA;AAAA;AAAA,eAiDA,IAEA,gBAAAA,QAAC,SAAI,WAAU,aACb;AAAA,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,IAAG;AAAA,cACH,WAAU;AAAA,cACX;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,IAAG;AAAA,cACH,WAAU;AAAA,cACX;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA;AAAA,aAZF;AAAA;AAAA;AAAA;AAAA,eAaA;AAAA,QAEF,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS;AAAA,YACT,WAAU;AAAA,YAET;AAAA,wBAAU,SACT,gBAAAA,QAAC,WAAQ,WAAU,kBAAnB;AAAA;AAAA;AAAA;AAAA,qBAAkC,IAElC,gBAAAA,QAAC,YAAS,WAAU,kBAApB;AAAA;AAAA;AAAA;AAAA,qBAAmC;AAAA,cAEpC,UAAU,SAAS,eAAe;AAAA;AAAA;AAAA,UATrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA;AAAA,WA9EF;AAAA;AAAA;AAAA;AAAA,aA+EA;AAAA,SAjHF;AAAA;AAAA;AAAA;AAAA,WAkHA,KAnHF;AAAA;AAAA;AAAA;AAAA,WAoHA;AAAA,IAGA,gBAAAA,QAAC,SAAI,WAAU,sBACb,0BAAAA,QAAC,UAAK,WAAU,qGACb,YADH;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OA7HF;AAAA;AAAA;AAAA;AAAA,SA8HA;AAEJ;;;AC3KA,SAAS,4BAA4B,gBAAgB;;;ACArD,SAAS,SAAS;AAElB,IAAM,YAAY,EAAE,OAAO;AAAA;AAAA,EAEzB,UAAU,EAAE,KAAK,CAAC,eAAe,cAAc,MAAM,CAAC,EAAE,QAAQ,aAAa;AAAA;AAAA,EAG7E,gBAAgB,EAAE,OAAO,EAAE,QAAQ,WAAW;AAAA,EAC9C,gBAAgB,EAAE,OAAO,OAAO,EAAE,QAAQ,IAAI;AAAA,EAC9C,gBAAgB,EAAE,OAAO,EAAE,QAAQ,UAAU;AAAA,EAC7C,oBAAoB,EAAE,OAAO,EAAE,QAAQ,UAAU;AAAA,EACjD,gBAAgB,EAAE,OAAO,EAAE,QAAQ,oBAAoB;AAAA;AAAA,EAGvD,gBAAgB,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,4CAA4C;AAAA;AAAA,EAGvF,gBAAgB,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,4CAA4C;AAAA,EACvF,eAAe,EAAE,OAAO,EAAE,QAAQ,iBAAiB;AACrD,CAAC,GAQY,MAAM,UAAU,MAAM,QAAQ,GAAG;;;AC3B9C,SAAS,eAAe;AACxB,OAAO,SAAS;AAChB,IAAM,EAAE,KAAK,IAAI,KAKX,OAAO,IAAI,KAAK;AAAA,EACpB,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,UAAU,IAAI;AAAA,EACd,UAAU,IAAI;AAChB,CAAC,GAGY,KAAK,QAAQ,MAAM;AAAA,EAC9B,QAAQ,IAAI,aAAa;AAC3B,CAAC;;;AClBD,SAAS,SAAS,MAAM,WAAW,MAAM,SAAS,aAAa;AAC/D,SAAS,iBAAiB;AAC1B,SAAS,oBAAoB,0BAA0B;AAGhD,IAAM,gBAAgB,QAAQ,iBAAiB;AAAA,EACpD,IAAI,KAAK,IAAI,EAAE,WAAW,EAAE,cAAc;AAAA,EAC1C,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAGY,QAAQ,QAAQ,SAAS;AAAA,EACpC,IAAI,KAAK,IAAI,EAAE,WAAW,EAAE,cAAc;AAAA,EAC1C,OAAO,KAAK,OAAO,EAAE,QAAQ,EAAE,OAAO;AAAA,EACtC,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,cAAc,KAAK,eAAe,EAAE,QAAQ;AAAA,EAC5C,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAGYE,uBAAsB,QAAQ,wBAAwB;AAAA,EACjE,IAAI,KAAK,IAAI,EAAE,WAAW,EAAE,cAAc;AAAA,EAC1C,gBAAgB,KAAK,iBAAiB,EAAE,QAAQ,EAAE,WAAW,MAAM,cAAc,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC5G,QAAQ,KAAK,SAAS,EAAE,QAAQ,EAAE,WAAW,MAAM,MAAM,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EACpF,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA;AAAA,EAC3B,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAGYC,uBAAsB,QAAQ,wBAAwB;AAAA,EACjE,IAAI,KAAK,IAAI,EAAE,WAAW,EAAE,cAAc;AAAA,EAC1C,gBAAgB,KAAK,iBAAiB,EAAE,QAAQ,EAAE,WAAW,MAAM,cAAc,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC5G,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA;AAAA;AAAA,EAE3B,aAAa,MAAM,aAAa,EAAE,QAAQ;AAAA,EAC1C,UAAU,QAAQ,WAAW,EAAE,QAAQ,EAAI,EAAE,QAAQ;AAAA,EACrD,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,iBAAiB,UAAU,mBAAmB;AAChD,CAAC,GAGY,eAAe,QAAQ,iBAAiB;AAAA,EACnD,IAAI,KAAK,IAAI,EAAE,WAAW,EAAE,cAAc;AAAA,EAC1C,gBAAgB,KAAK,iBAAiB,EAAE,QAAQ,EAAE,WAAW,MAAM,cAAc,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC5G,cAAc,KAAK,eAAe,EAAE,QAAQ,EAAE,WAAW,MAAMA,qBAAoB,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC9G,MAAM,KAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,aAAa,KAAK,aAAa;AAAA,EAC/B,OAAO,KAAK,OAAO,EAAE,QAAQ;AAAA,EAC7B,WAAW,KAAK,YAAY,EAAE,QAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,EACjE,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAGY,eAAe,QAAQ,iBAAiB;AAAA,EACnD,IAAI,KAAK,IAAI,EAAE,WAAW,EAAE,cAAc;AAAA,EAC1C,gBAAgB,KAAK,iBAAiB,EAAE,QAAQ,EAAE,WAAW,MAAM,cAAc,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC5G,cAAc,KAAK,eAAe,EAAE,QAAQ,EAAE,WAAW,MAAMA,qBAAoB,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC9G,QAAQ,KAAK,SAAS,EAAE,QAAQ,EAAE,WAAW,MAAM,MAAM,EAAE;AAAA,EAC3D,OAAO,KAAK,OAAO,EAAE,QAAQ;AAAA,EAC7B,iBAAiB,KAAK,mBAAmB;AAAA,EACzC,QAAQ,KAAK,QAAQ,EAAE,QAAQ;AAAA;AAAA,EAC/B,OAAO,KAAK,OAAO;AAAA,EACnB,WAAW,UAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAGY,yBAAyB,UAAU,eAAe,CAAC,EAAE,KAAK,OAAO;AAAA,EAC5E,SAAS,KAAKD,oBAAmB;AAAA,EACjC,aAAa,KAAKC,oBAAmB;AAAA,EACrC,cAAc,KAAK,YAAY;AAAA,EAC/B,cAAc,KAAK,YAAY;AACjC,EAAE,GAEW,iBAAiB,UAAU,OAAO,CAAC,EAAE,KAAK,OAAO;AAAA,EAC5D,eAAe,KAAKD,oBAAmB;AAAA,EACvC,cAAc,KAAK,YAAY;AAAA,EAC/B,cAAc,KAAK,YAAY;AACjC,EAAE,GAGW,2BAA2B,mBAAmB,aAAa,GAC3D,mBAAmB,mBAAmB,KAAK,GAC3C,iCAAiC,mBAAmBC,oBAAmB,GACvE,yBAAyB,mBAAmB,YAAY,GAGxD,2BAA2B,mBAAmB,aAAa,GAC3D,mBAAmB,mBAAmB,KAAK,GAC3C,iCAAiC,mBAAmBA,oBAAmB,GACvE,yBAAyB,mBAAmB,YAAY;;;AH5FrE,SAAS,UAAU;AAGnB,IAAM,iBAAiB,2BAA2B;AAAA,EAChD,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS,CAAC,IAAI,cAAc;AAAA,IAC5B,QAAQ,IAAI,aAAa;AAAA,EAC3B;AACF,CAAC;AAGD,eAAsB,eAAe,SAAkB;AACrD,SAAO,eAAe,WAAW,QAAQ,QAAQ,IAAI,QAAQ,CAAC;AAChE;AAGA,eAAsB,QAAQ,SAAkB;AAE9C,MAAM,UADU,MAAM,eAAe,OAAO,GACrB,IAAI,QAAQ;AACnC,MAAI,CAAC;AAAQ,WAAO;AAEpB,MAAMC,QAAO,MAAM,GAAG,MAAM,MAAM,UAAU;AAAA,IAC1C,OAAO,GAAG,MAAM,IAAI,MAAM;AAAA,IAC1B,SAAS;AAAA,MACP,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,MAAM;AAAA,IACR;AAAA,EACF,CAAC;AAED,MAAI,CAACA;AACH,UAAM,MAAM,OAAO,OAAO;AAG5B,SAAOA;AACT;AAGA,eAAsB,kBAAkB,QAAgB,YAAoB;AAC1E,MAAM,UAAU,MAAM,eAAe,WAAW;AAChD,iBAAQ,IAAI,UAAU,MAAM,GACrB,SAAS,YAAY;AAAA,IAC1B,SAAS;AAAA,MACP,cAAc,MAAM,eAAe,cAAc,OAAO;AAAA,IAC1D;AAAA,EACF,CAAC;AACH;AAGA,eAAsB,OAAO,SAAkB;AAC7C,MAAM,UAAU,MAAM,eAAe,OAAO;AAC5C,SAAO,SAAS,KAAK;AAAA,IACnB,SAAS;AAAA,MACP,cAAc,MAAM,eAAe,eAAe,OAAO;AAAA,IAC3D;AAAA,EACF,CAAC;AACH;AAGA,eAAsB,YACpB,SACA,aAAqB,IAAI,IAAI,QAAQ,GAAG,EAAE,UAC1C;AACA,MAAMA,QAAO,MAAM,QAAQ,OAAO;AAClC,MAAI,CAACA,OAAM;AACT,QAAM,eAAe,IAAI,gBAAgB,CAAC,CAAC,cAAc,UAAU,CAAC,CAAC;AACrE,UAAM,SAAS,UAAU,cAAc;AAAA;AAEzC,SAAOA;AACT;;;AH3CQ,mBAAAC,eAAA;AAnBD,IAAM,QAAuB,MAAM;AAAA,EAC1C,EAAE,KAAK,cAAc,MAAM,iBAAW;AAAC;AAGvC,eAAsB,OAAO,EAAE,QAAQ,GAAuB;AAC5D,SAAO,KAAK;AAAA,IACV,MAAM,MAAM,QAAQ,OAAO;AAAA,IAC3B,KAAK;AAAA,MACH,UAAU;AAAA,IACZ;AAAA,EACF,CAAC;AACH;AAEe,SAAR,MAAuB;AAC5B,MAAM,EAAE,MAAAC,OAAM,IAAI,IAAI,cAA6B;AAEnD,SACE,gBAAAD,QAAC,UAAK,MAAK,MAAK,WAAU,UACxB;AAAA,oBAAAA,QAAC,UACC;AAAA,sBAAAA,QAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,gBAAAA,QAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,gBAAAA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,gBAAAA,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAJT;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,gBAAAA,QAAC,UAAK,WAAU,0GACd;AAAA,sBAAAA,QAAC,iBACC,0BAAAA,QAAC,UAAO,MAAMC,OACZ,0BAAAD,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ,KADV;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,gBAAAA,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,gBAAAA,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,gBAAAA,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,MACZ,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,yBAAyB;AAAA,YACvB,QAAQ,gBAAgB,KAAK,UAAU,GAAG;AAAA,UAC5C;AAAA;AAAA,QAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGK;AAAA,SAZP;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OArBF;AAAA;AAAA;AAAA;AAAA,SAsBA;AAEJ;;;AOxDA;AAAA;AAAA;AAAA;AAAA,gBAAAE;AAAA;AAAA,SAAS,QAAAC,aAA8D;AACvE,SAAS,QAAAC,OAAM,iBAAAC,sBAAqB;;;ACDpC,SAAS,QAAAC,OAAM,aAAAC,YAAW,WAAAC,UAAS,QAAAC,aAAY;AAC/C,SAAS,YAAAC,iBAAgB;;;ACDzB,SAAS,QAAAC,OAAM,aAAAC,YAAW,WAAAC,UAAS,QAAAC,aAAY;AAC/C,SAAS,gBAAgB;AAElB,IAAMC,SAAQF,SAAQ,SAAS;AAAA,EACpC,IAAIC,MAAK,IAAI,EAAE,WAAW,EAAE,WAAW,MAAM,SAAS,CAAC;AAAA,EACvD,OAAOH,MAAK,OAAO,EAAE,QAAQ,EAAE,OAAO;AAAA,EACtC,MAAMA,MAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,gBAAgBA,MAAK,iBAAiB,EAAE,QAAQ;AAAA,EAChD,WAAWC,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAWA,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAEY,WAAWC,SAAQ,YAAY;AAAA,EAC1C,IAAIC,MAAK,IAAI,EAAE,WAAW,EAAE,WAAW,MAAM,SAAS,CAAC;AAAA,EACvD,QAAQA,MAAK,SAAS,EACnB,QAAQ,EACR,WAAW,MAAMC,OAAM,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EACrD,WAAWH,WAAU,YAAY,EAAE,QAAQ;AAAA,EAC3C,WAAWA,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC;;;ADfM,IAAMI,iBAAgBC,SAAQ,iBAAiB;AAAA,EACpD,IAAIC,MAAK,IAAI,EAAE,WAAW,EAAE,WAAW,MAAMC,UAAS,CAAC;AAAA,EACvD,MAAMC,MAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,MAAMA,MAAK,MAAM,EAAE,QAAQ,EAAE,OAAO;AAAA,EACpC,WAAWC,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAWA,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAEYC,uBAAsBL,SAAQ,wBAAwB;AAAA,EACjE,IAAIC,MAAK,IAAI,EAAE,WAAW,EAAE,WAAW,MAAMC,UAAS,CAAC;AAAA,EACvD,gBAAgBD,MAAK,iBAAiB,EACnC,QAAQ,EACR,WAAW,MAAMF,eAAc,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC7D,QAAQE,MAAK,SAAS,EACnB,QAAQ,EACR,WAAW,MAAMK,OAAM,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EACrD,MAAMH,MAAK,QAAQ,EAAE,MAAM,CAAC,SAAS,SAAS,QAAQ,EAAE,CAAC,EAAE,QAAQ,EAAE,QAAQ,QAAQ;AAAA,EACrF,WAAWC,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAWA,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC;;;AErBD,SAAS,MAAAG,KAAI,WAAW;AACxB,SAAS,YAAAC,iBAAgB;AAWzB,eAAsB,mBAAmB,EAAE,MAAM,OAAO,GAA4B;AAClF,MAAM,OAAO,GAAG,KAAK,YAAY,EAAE,QAAQ,eAAe,GAAG,KAAKA,UAAS,EAAE,MAAM,GAAG,CAAC,KAEjF,CAAC,YAAY,IAAI,MAAM,GAAG,OAAOC,cAAa,EACjD,OAAO,EAAE,MAAM,KAAK,CAAC,EACrB,UAAU;AAEb,eAAM,GAAG,OAAOC,oBAAmB,EAChC,OAAO;AAAA,IACN,gBAAgB,aAAa;AAAA,IAC7B;AAAA,IACA,MAAM;AAAA,EACR,CAAC,GAEI;AACT;AAEA,eAAsB,mBAAmB,IAAY,EAAE,KAAK,GAA4B;AACtF,MAAM,CAAC,YAAY,IAAI,MAAM,GAAG,OAAOD,cAAa,EACjD,IAAI,EAAE,MAAM,WAAW,oBAAI,KAAK,EAAE,CAAC,EACnC,MAAMF,IAAGE,eAAc,IAAI,EAAE,CAAC,EAC9B,UAAU;AAEb,SAAO;AACT;AAEA,eAAsB,mBAAmB,IAAY;AACnD,QAAM,GAAG,OAAOA,cAAa,EAC1B,MAAMF,IAAGE,eAAc,IAAI,EAAE,CAAC;AACnC;AAEA,eAAsB,gBAAgB,IAAY;AAChD,SAAO,GAAG,MAAM,cAAc,UAAU;AAAA,IACtC,OAAOF,IAAGE,eAAc,IAAI,EAAE;AAAA,IAC9B,MAAM;AAAA,MACJ,SAAS;AAAA,QACP,MAAM;AAAA,UACJ,MAAM;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,eAAsB,qBAAqB,QAAgB;AACzD,SAAO,GAAG,MAAM,oBAAoB,SAAS;AAAA,IAC3C,OAAOF,IAAGG,qBAAoB,QAAQ,MAAM;AAAA,IAC5C,MAAM;AAAA,MACJ,cAAc;AAAA,IAChB;AAAA,EACF,CAAC;AACH;AAUA,eAAsB,6BAA6B,gBAAwB,QAAgB,MAA0B;AACnH,MAAM,CAAC,MAAM,IAAI,MAAM,GAAG,OAAOC,oBAAmB,EACjD,IAAI,EAAE,MAAM,WAAW,oBAAI,KAAK,EAAE,CAAC,EACnC;AAAA,IACC;AAAA,MACEC,IAAGD,qBAAoB,gBAAgB,cAAc;AAAA,MACrDC,IAAGD,qBAAoB,QAAQ,MAAM;AAAA,IACvC;AAAA,EACF,EACC,UAAU;AAEb,SAAO;AACT;AAEA,eAAsB,yBAAyB,gBAAwB,QAAgB;AACrF,QAAM,GAAG,OAAOA,oBAAmB,EAChC;AAAA,IACC;AAAA,MACEC,IAAGD,qBAAoB,gBAAgB,cAAc;AAAA,MACrDC,IAAGD,qBAAoB,QAAQ,MAAM;AAAA,IACvC;AAAA,EACF;AACJ;AAEA,eAAsB,oBAAoB,gBAAwB,QAAgB;AAQhF,UAPe,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,IAC1D,OAAO;AAAA,MACLC,IAAGD,qBAAoB,gBAAgB,cAAc;AAAA,MACrDC,IAAGD,qBAAoB,QAAQ,MAAM;AAAA,IACvC;AAAA,EACF,CAAC,IAEc;AACjB;;;AC5GA,SAAS,QAAAE,OAAM,aAAAC,YAAW,WAAAC,UAAS,SAAAC,QAAO,QAAAC,aAAY;AACtD,SAAS,YAAAC,iBAAgB;AAIlB,IAAMC,uBAAsBC,SAAQ,wBAAwB;AAAA,EACjE,IAAIC,MAAK,IAAI,EAAE,WAAW,EAAE,WAAW,MAAMC,UAAS,CAAC;AAAA,EACvD,MAAMC,MAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,MAAMA,MAAK,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE,CAAC,EAAE,QAAQ;AAAA,EACrD,gBAAgBF,MAAK,iBAAiB,EACnC,QAAQ,EACR,WAAW,MAAMG,eAAc,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC7D,aAAaH,MAAK,eAAe,EAC9B,QAAQ,EACR,WAAW,MAAMI,OAAM,EAAE;AAAA,EAC5B,QAAQC,OAAM,QAAQ,EAAE,QAAQ;AAAA,EAChC,YAAYC,WAAU,cAAc;AAAA,EACpC,WAAWA,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAAA,EACxD,WAAWA,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC,GAcYC,gBAAeR,SAAQ,iBAAiB;AAAA,EACnD,IAAIC,MAAK,IAAI,EAAE,WAAW,EAAE,WAAW,MAAMC,UAAS,CAAC;AAAA,EACvD,cAAcD,MAAK,eAAe,EAC/B,QAAQ,EACR,WAAW,MAAMF,qBAAoB,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EACnE,QAAQE,MAAK,SAAS,EACnB,QAAQ,EACR,WAAW,MAAMI,OAAM,EAAE;AAAA,EAC5B,OAAOF,MAAK,OAAO,EAAE,QAAQ;AAAA,EAC7B,QAAQA,MAAK,UAAU,EAAE,MAAM,CAAC,WAAW,OAAO,EAAE,CAAC,EAAE,QAAQ;AAAA,EAC/D,OAAOA,MAAK,OAAO;AAAA,EACnB,iBAAiBA,MAAK,mBAAmB;AAAA,EACzC,UAAUA,MAAK,WAAW;AAAA,EAC1B,WAAWI,WAAU,YAAY,EAAE,WAAW,EAAE,QAAQ;AAC1D,CAAC;;;AJzCD,SAAS,MAAAE,WAAU;;;AKNnB,OAAOC,UAAS;AAKhB,SAAS,MAAAC,WAAU;AACnB,SAAS,kBAAkB;AAL3B,IAAM,EAAE,MAAAC,MAAK,IAAIC,MAcJ,oBAAN,MAAwB;AAAA;AAAA,EAMrB,cAAc;AAJtB,SAAQ,QAAqC,oBAAI,IAAI;AACrD,SAAiB,cAAc,IAAI,KAAK;AACxC;AAAA,SAAiB,kBAAkB,KAAK;AAGtC,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EAEA,OAAc,cAAiC;AAC7C,WAAK,kBAAkB,aACrB,kBAAkB,WAAW,IAAI,kBAAkB,IAE9C,kBAAkB;AAAA,EAC3B;AAAA,EAEQ,uBAAuB;AAC7B,gBAAY,MAAM;AAChB,WAAK,iBAAiB;AAAA,IACxB,GAAG,KAAK,eAAe;AAAA,EACzB;AAAA,EAEQ,mBAAmB;AACzB,QAAM,MAAM,KAAK,IAAI;AACrB,aAAW,CAAC,KAAK,EAAE,MAAAC,OAAM,SAAS,CAAC,KAAK,KAAK,MAAM,QAAQ;AACzD,MAAI,MAAM,WAAW,KAAK,gBACxBA,MAAK,IAAI,GACT,KAAK,MAAM,OAAO,GAAG;AAAA,EAG3B;AAAA,EAEQ,WAAW,QAA4B;AAC7C,QAAM,eAAe,KAAK,UAAU,MAAM;AAC1C,WAAO,WAAW,QAAQ,EAAE,OAAO,YAAY,EAAE,OAAO,KAAK;AAAA,EAC/D;AAAA,EAEQ,mBAAmB,sBAAuC;AAEhE,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,cAAc,cAAqC;AAEvD,QAAM,aAAa,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,MAC9D,OAAOC,IAAGC,qBAAoB,IAAI,YAAY;AAAA,IAChD,CAAC;AAED,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,yBAAyB,cAAc;AAGzD,QAAI,CAAC,WAAW;AACd,YAAM,IAAI,MAAM,6BAA6B,cAAc;AAI7D,QAAM,SAAS,KAAK,mBAAmB,WAAW,WAAW,GACvD,UAAU,KAAK,WAAW,MAAM,GAGhC,eAAe,KAAK,MAAM,IAAI,OAAO;AAC3C,QAAI;AACF,0BAAa,WAAW,KAAK,IAAI,GAC1B,aAAa;AAItB,QAAMF,QAAO,IAAIF,MAAK,MAAM;AAG5B,QAAI;AAEF,OADe,MAAME,MAAK,QAAQ,GAC3B,QAAQ;AAAA,IACjB,SAAS,OAAP;AACA,YAAAA,MAAK,IAAI,GACH,IAAI,MAAM,kCAAkC,MAAM,SAAS;AAAA,IACnE;AAGA,gBAAK,MAAM,IAAI,SAAS;AAAA,MACtB,MAAAA;AAAA,MACA,UAAU,KAAK,IAAI;AAAA,IACrB,CAAC,GAGD,MAAM,GACH,OAAOE,oBAAmB,EAC1B,IAAI,EAAE,iBAAiB,oBAAI,KAAK,EAAE,CAAC,EACnC,MAAMD,IAAGC,qBAAoB,IAAI,YAAY,CAAC,GAE1CF;AAAA,EACT;AAAA,EAEA,MAAM,gBAAgB,cAAqC;AACzD,QAAM,aAAa,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,MAC9D,OAAOC,IAAGC,qBAAoB,IAAI,YAAY;AAAA,IAChD,CAAC;AAED,QAAI,CAAC;AACH;AAGF,QAAM,SAAS,KAAK,mBAAmB,WAAW,WAAW,GACvD,UAAU,KAAK,WAAW,MAAM,GAChC,eAAe,KAAK,MAAM,IAAI,OAAO;AAE3C,IAAI,iBACF,MAAM,aAAa,KAAK,IAAI,GAC5B,KAAK,MAAM,OAAO,OAAO;AAAA,EAE7B;AAAA,EAEA,MAAM,sBAAqC;AACzC,QAAM,gBAAgB,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,MAAAF,MAAK,MAAMA,MAAK,IAAI,CAAC;AAClF,UAAM,QAAQ,IAAI,aAAa,GAC/B,KAAK,MAAM,MAAM;AAAA,EACnB;AACF;;;AL9HA,SAAS,KAAAG,UAAS;AAClB,SAAS,YAAAC,iBAAgB;;;AMTzB,SAAS,QAAQ,cAAAC,mBAAkB;AACnC,SAAS,QAAAC,aAAY;AACrB,SAAS,YAAAC,iBAAgB;AAoBf,mBAAAC,eAAA;AAbK,SAAR,mBAAoC,EAAE,QAAQ,QAAQ,GAA4B;AACvF,SACE,gBAAAA,QAACH,aAAA,EAAW,QAAM,IAAC,MAAM,QAAQ,IAAIE,WACnC,0BAAAC,QAAC,UAAO,IAAG,OAAM,WAAU,iBAAgB,SACzC;AAAA,oBAAAA;AAAA,MAACH,YAAW;AAAA,MAAX;AAAA,QACC,IAAIE;AAAA,QACJ,OAAM;AAAA,QACN,WAAU;AAAA,QACV,SAAQ;AAAA,QACR,OAAM;AAAA,QACN,WAAU;AAAA,QACV,SAAQ;AAAA,QAER,0BAAAC,QAAC,SAAI,WAAU,0CAAf;AAAA;AAAA;AAAA;AAAA,eAAsD;AAAA;AAAA,MATxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA;AAAA,IAEA,gBAAAA,QAAC,SAAI,WAAU,iCACb,0BAAAA,QAAC,SAAI,WAAU,mDACb,0BAAAA;AAAA,MAACH,YAAW;AAAA,MAAX;AAAA,QACC,IAAIE;AAAA,QACJ,OAAM;AAAA,QACN,WAAU;AAAA,QACV,SAAQ;AAAA,QACR,OAAM;AAAA,QACN,WAAU;AAAA,QACV,SAAQ;AAAA,QAER,0BAAAC,QAAC,OAAO,OAAP,EAAa,WAAU,oIACtB;AAAA,0BAAAA,QAAC,OAAO,OAAP,EAAa,IAAG,MAAK,WAAU,4BAA2B,uCAA3D;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UAEA,gBAAAA,QAACF,OAAA,EAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,4BAAAE,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,YAAzC;AAAA;AAAA;AAAA;AAAA,mBAAkD;AAAA,YAElD,gBAAAA,QAAC,SACC;AAAA,8BAAAA,QAAC,WAAM,SAAQ,QAAO,WAAU,kCAAiC,+BAAjE;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,WAAU;AAAA,kBACV,UAAQ;AAAA;AAAA,gBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,iBAVF;AAAA;AAAA;AAAA;AAAA,mBAWA;AAAA,YAEA,gBAAAA,QAAC,SACC;AAAA,8BAAAA,QAAC,WAAM,SAAQ,QAAO,WAAU,kCAAiC,oBAAjE;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,WAAU;AAAA,kBACV,UAAQ;AAAA;AAAA,gBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,iBAVF;AAAA;AAAA;AAAA;AAAA,mBAWA;AAAA,YAEA,gBAAAA,QAAC,SACC;AAAA,8BAAAA,QAAC,WAAM,SAAQ,QAAO,WAAU,kCAAiC,oBAAjE;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,cAAc;AAAA,kBACd,WAAU;AAAA,kBACV,UAAQ;AAAA;AAAA,gBANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAOA;AAAA,iBAXF;AAAA;AAAA;AAAA;AAAA,mBAYA;AAAA,YAEA,gBAAAA,QAAC,SACC;AAAA,8BAAAA,QAAC,WAAM,SAAQ,YAAW,WAAU,kCAAiC,6BAArE;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,WAAU;AAAA,kBACV,UAAQ;AAAA;AAAA,gBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,iBAVF;AAAA;AAAA;AAAA;AAAA,mBAWA;AAAA,YAEA,gBAAAA,QAAC,SACC;AAAA,8BAAAA,QAAC,WAAM,SAAQ,YAAW,WAAU,kCAAiC,wBAArE;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,WAAU;AAAA,kBACV,UAAQ;AAAA;AAAA,gBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,iBAVF;AAAA;AAAA;AAAA;AAAA,mBAWA;AAAA,YAEA,gBAAAA,QAAC,SACC;AAAA,8BAAAA,QAAC,WAAM,SAAQ,YAAW,WAAU,kCAAiC,wBAArE;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,WAAU;AAAA,kBACV,UAAQ;AAAA;AAAA,gBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,iBAVF;AAAA;AAAA;AAAA;AAAA,mBAWA;AAAA,YAEA,gBAAAA,QAAC,SAAI,WAAU,qBACb;AAAA,8BAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,WAAU;AAAA;AAAA,gBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAKA;AAAA,cACA,gBAAAA,QAAC,WAAM,SAAQ,OAAM,WAAU,sBAAqB,uBAApD;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,iBATF;AAAA;AAAA;AAAA;AAAA,mBAUA;AAAA,YAEA,gBAAAA,QAAC,SAAI,WAAU,mCACb;AAAA,8BAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,WAAU;AAAA,kBACV,SAAS;AAAA,kBACV;AAAA;AAAA,gBAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMA;AAAA,cACA,gBAAAA;AAAA,gBAAC;AAAA;AAAA,kBACC,MAAK;AAAA,kBACL,WAAU;AAAA,kBACX;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAKA;AAAA,iBAbF;AAAA;AAAA;AAAA;AAAA,mBAcA;AAAA,eA5GF;AAAA;AAAA;AAAA;AAAA,iBA6GA;AAAA,aAlHF;AAAA;AAAA;AAAA;AAAA,eAmHA;AAAA;AAAA,MA5HF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA6HA,KA9HF;AAAA;AAAA;AAAA;AAAA,WA+HA,KAhIF;AAAA;AAAA;AAAA;AAAA,WAiIA;AAAA,OA9IF;AAAA;AAAA;AAAA;AAAA,SA+IA,KAhJF;AAAA;AAAA;AAAA;AAAA,SAiJA;AAEJ;;;AC9JA,OAAOC,UAAS;AAChB,IAAM,EAAE,MAAAC,MAAK,IAAID;AAEjB,eAAsB,uBAAuB,QAO1C;AACD,MAAME,QAAO,IAAID,MAAK,MAAM;AAC5B,MAAI;AAEF,YADe,MAAMC,MAAK,QAAQ,GAC3B,QAAQ,GACf,MAAMA,MAAK,IAAI,GACR;AAAA,EACT,SAAS,OAAP;AACA,UAAM;AAAA,EACR;AACF;;;AP+GU,mBAAAC,eAAA;AAtHV,IAAM,mBAAmBC,GAAE,OAAO;AAAA,EAChC,MAAMA,GAAE,OAAO,EAAE,IAAI,GAAG,kBAAkB;AAAA,EAC1C,MAAMA,GAAE,OAAO,EAAE,IAAI,GAAG,kBAAkB;AAAA,EAC1C,MAAMA,GAAE,OAAO,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,KAAK;AAAA,EAC9C,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG,2BAA2B;AAAA,EACvD,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG,sBAAsB;AAAA,EAClD,UAAUA,GAAE,OAAO,EAAE,IAAI,GAAG,sBAAsB;AAAA,EAClD,KAAKA,GAAE,QAAQ,EAAE,SAAS;AAC5B,CAAC;AAED,eAAsBC,QAAO,EAAE,SAAS,OAAO,GAAuB;AACpE,MAAMC,QAAO,MAAM,YAAY,OAAO,GAChC,OAAO,MAAM,oBAAoB,OAAO,OAAQA,MAAK,EAAE;AAE7D,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,MAAM,cAAc,MAAM,GAAG,MAAM,oBAAoB,SAAS;AAAA,IAC9D,OAAOC,IAAGC,qBAAoB,gBAAgB,OAAO,KAAM;AAAA,EAC7D,CAAC;AAED,SAAOC,MAAK,EAAE,aAAa,KAAK,CAAC;AACnC;AAEA,eAAsB,OAAO,EAAE,SAAS,OAAO,GAAuB;AACpE,MAAMH,QAAO,MAAM,YAAY,OAAO,GAChC,OAAO,MAAM,oBAAoB,OAAO,OAAQA,MAAK,EAAE;AAE7D,MAAI,CAAC,QAAQ,SAAS;AACpB,UAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,MAAM,WAAW,MAAM,QAAQ,SAAS;AAGxC,UAFe,SAAS,IAAI,QAAQ,GAEpB;AAAA,IACd,KAAK,UAAU;AACb,UAAM,SAAS,iBAAiB,UAAU;AAAA,QACxC,MAAM,SAAS,IAAI,MAAM;AAAA,QACzB,MAAM,SAAS,IAAI,MAAM;AAAA,QACzB,MAAM,SAAS,IAAI,MAAM;AAAA,QACzB,UAAU,SAAS,IAAI,UAAU;AAAA,QACjC,UAAU,SAAS,IAAI,UAAU;AAAA,QACjC,UAAU,SAAS,IAAI,UAAU;AAAA,QACjC,KAAK,SAAS,IAAI,KAAK,MAAM;AAAA,MAC/B,CAAC;AAED,UAAI,CAAC,OAAO;AACV,eAAOG,MAAK,EAAE,QAAQ,OAAO,MAAM,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAGjE,UAAM,EAAE,MAAM,GAAG,OAAO,IAAI,OAAO;AAGnC,UAAI;AACF,cAAM,uBAAuB,MAAM;AAAA,MACrC,SAAS,OAAP;AACA,eAAOA,MAAK,EAAE,OAAO,sBAAsB,MAAM,UAAU,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MAC/E;AAEA,mBAAM,GAAG,OAAOD,oBAAmB,EAAE,OAAO;AAAA,QAC1C;AAAA,QACA,MAAM;AAAA,QACN,gBAAgB,OAAO;AAAA,QACvB,aAAaF,MAAK;AAAA,QAClB;AAAA,MACF,CAAC,GAEM;AAAA,IACT;AAAA,IAEA,KAAK,UAAU;AACb,UAAM,eAAe,SAAS,IAAI,cAAc;AAChD,aAAI,OAAO,gBAAiB,WACnBG,MAAK,EAAE,OAAO,wBAAwB,GAAG,EAAE,QAAQ,IAAI,CAAC,KAIjE,MAAM,kBAAkB,YAAY,EAAE,gBAAgB,YAAY,GAGlE,MAAM,GAAG,OAAOD,oBAAmB,EAChC,MAAMD,IAAGC,qBAAoB,IAAI,YAAY,CAAC,GAE1C;AAAA,IACT;AAAA,IAEA,KAAK,QAAQ;AACX,UAAM,eAAe,SAAS,IAAI,cAAc;AAChD,UAAI,OAAO,gBAAiB;AAC1B,eAAOC,MAAK,EAAE,OAAO,wBAAwB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAGjE,UAAI;AAGF,gBADe,OADF,MAAM,kBAAkB,YAAY,EAAE,cAAc,YAAY,GACnD,QAAQ,GAC3B,QAAQ,GACRA,MAAK,EAAE,SAAS,GAAK,CAAC;AAAA,MAC/B,SAAS,OAAP;AACA,eAAOA,MAAK,EAAE,OAAO,MAAM,QAAQ,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MACvD;AAAA,IACF;AAAA,IAEA;AACE,YAAM,IAAI,SAAS,kBAAkB,EAAE,QAAQ,IAAI,CAAC;AAAA,EACxD;AACF;AAEe,SAAR,kBAAmC;AACxC,MAAM,EAAE,aAAa,KAAK,IAAIC,eAA6B,GACrD,YAAY,SAAS,WAAW,SAAS,SACzC,CAAC,aAAa,cAAc,IAAIC,UAAS,EAAK;AAEpD,SACE,gBAAAR,QAAC,SAAI,WAAU,OACb;AAAA,oBAAAA,QAAC,SAAI,WAAU,qBACb;AAAA,sBAAAA,QAAC,SAAI,WAAU,0CACb;AAAA,wBAAAA,QAAC,QAAG,WAAU,0BAAyB,oCAAvC;AAAA;AAAA;AAAA;AAAA,eAA2D;AAAA,QAC1D,aACC,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,WAAU;AAAA,YACV,SAAS,MAAM,eAAe,EAAI;AAAA,YACnC;AAAA;AAAA,UAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA;AAAA,WATJ;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,MAEA,gBAAAA,QAAC,SAAI,WAAU,aACZ;AAAA,oBAAY,IAAI,CAAC,eAChB,gBAAAA;AAAA,UAAC;AAAA;AAAA,YAEC,WAAU;AAAA,YAEV;AAAA,8BAAAA,QAAC,SAAI,WAAU,oCACb;AAAA,gCAAAA,QAAC,SACC;AAAA,kCAAAA,QAAC,QAAG,WAAU,4BAA4B,qBAAW,QAArD;AAAA;AAAA;AAAA;AAAA,yBAA0D;AAAA,kBAC1D,gBAAAA,QAAC,OAAE,WAAU,mEACV;AAAA,+BAAW,OAAO;AAAA,oBAAK;AAAA,oBAAE,WAAW,OAAO;AAAA,oBAAK;AAAA,oBAAE,WAAW,OAAO;AAAA,uBADvE;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA,qBAJF;AAAA;AAAA;AAAA;AAAA,uBAKA;AAAA,gBACC,aACC,gBAAAA,QAAC,SAAI,WAAU,kBACb;AAAA,kCAAAA,QAACS,OAAA,EAAK,QAAO,QACX;AAAA,oCAAAT,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,UAAzC;AAAA;AAAA;AAAA;AAAA,2BAAgD;AAAA,oBAChD,gBAAAA,QAAC,WAAM,MAAK,UAAS,MAAK,gBAAe,OAAO,WAAW,MAA3D;AAAA;AAAA;AAAA;AAAA,2BAA+D;AAAA,oBAC/D,gBAAAA;AAAA,sBAAC;AAAA;AAAA,wBACC,MAAK;AAAA,wBACL,WAAU;AAAA,wBACX;AAAA;AAAA,sBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKA;AAAA,uBARF;AAAA;AAAA;AAAA;AAAA,yBASA;AAAA,kBACA,gBAAAA,QAACS,OAAA,EAAK,QAAO,QACX;AAAA,oCAAAT,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,YAAzC;AAAA;AAAA;AAAA;AAAA,2BAAkD;AAAA,oBAClD,gBAAAA,QAAC,WAAM,MAAK,UAAS,MAAK,gBAAe,OAAO,WAAW,MAA3D;AAAA;AAAA;AAAA;AAAA,2BAA+D;AAAA,oBAC/D,gBAAAA;AAAA,sBAAC;AAAA;AAAA,wBACC,MAAK;AAAA,wBACL,WAAU;AAAA,wBACV,SAAS,CAAC,MAAM;AACd,0BAAK,QAAQ,kDAAkD,KAC7D,EAAE,eAAe;AAAA,wBAErB;AAAA,wBACD;AAAA;AAAA,sBARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAUA;AAAA,uBAbF;AAAA;AAAA;AAAA;AAAA,yBAcA;AAAA,qBAzBF;AAAA;AAAA;AAAA;AAAA,uBA0BA;AAAA,mBAlCJ;AAAA;AAAA;AAAA;AAAA,qBAoCA;AAAA,cACA,gBAAAA,QAAC,SAAI,WAAU,wEACb;AAAA,gCAAAA,QAAC,OAAE;AAAA;AAAA,kBAAY,WAAW,UAAU;AAAA,qBAApC;AAAA;AAAA;AAAA;AAAA,uBAAyC;AAAA,gBACzC,gBAAAA,QAAC,OAAE;AAAA;AAAA,kBAAY,WAAW,aAAa,IAAI,KAAK,WAAW,UAAU,EAAE,eAAe,IAAI;AAAA,qBAA1F;AAAA;AAAA;AAAA;AAAA,uBAAkG;AAAA,mBAFpG;AAAA;AAAA;AAAA;AAAA,qBAGA;AAAA;AAAA;AAAA,UA3CK,WAAW;AAAA,UADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA6CA,CACD;AAAA,QAEA,YAAY,WAAW,KACtB,gBAAAA,QAAC,SAAI,WAAU,qBACb;AAAA,0BAAAA,QAAC,QAAG,WAAU,4BAA2B,uCAAzC;AAAA;AAAA;AAAA;AAAA,iBAAgE;AAAA,UAChE,gBAAAA,QAAC,OAAE,WAAU,gEAA+D,iEAA5E;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACC,aACC,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,WAAU;AAAA,cACV,SAAS,MAAM,eAAe,EAAI;AAAA,cACnC;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA;AAAA,aAZJ;AAAA;AAAA;AAAA;AAAA,eAcA;AAAA,WAjEJ;AAAA;AAAA;AAAA;AAAA,aAmEA;AAAA,SAjFF;AAAA;AAAA;AAAA;AAAA,WAkFA;AAAA,IAEA,gBAAAA,QAAC,sBAAmB,QAAQ,aAAa,SAAS,MAAM,eAAe,EAAK,KAA5E;AAAA;AAAA;AAAA;AAAA,WAA+E;AAAA,OArFjF;AAAA;AAAA;AAAA;AAAA,SAsFA;AAEJ;;;AQxNA;AAAA;AAAA,gBAAAU;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAAA,SAAS,QAAAC,OAAM,YAAAC,iBAAkE;AACjF,SAAS,QAAAC,OAAM,iBAAAC,sBAAqB;AAWpC,SAAS,KAAAC,UAAS;AA6HN,mBAAAC,eAAA;AA3HZ,IAAM,2BAA2BD,GAAE,OAAO;AAAA,EACxC,MAAMA,GAAE,OAAO,EAAE,IAAI,GAAG,kBAAkB,EAAE,IAAI,GAAG;AACrD,CAAC,GAEK,kBAAkBA,GAAE,OAAO;AAAA,EAC/B,OAAOA,GAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,MAAMA,GAAE,KAAK,CAAC,SAAS,QAAQ,CAAC;AAClC,CAAC;AAED,eAAsBE,QAAO,EAAE,SAAS,OAAO,GAAuB;AACpE,MAAMC,QAAO,MAAM,YAAY,OAAO,GAChC,eAAe,MAAM,gBAAgB,OAAO,EAAG;AAErD,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAGjD,MAAM,OAAO,MAAM,oBAAoB,aAAa,IAAIA,MAAK,EAAE;AAC/D,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,SAAOC,MAAK,EAAE,cAAc,KAAK,CAAC;AACpC;AAEA,eAAsBC,QAAO,EAAE,SAAS,OAAO,GAAuB;AACpE,MAAMF,QAAO,MAAM,YAAY,OAAO,GAChC,WAAW,MAAM,QAAQ,SAAS,GAClC,SAAS,SAAS,IAAI,QAAQ,GAE9B,eAAe,MAAM,gBAAgB,OAAO,EAAG;AACrD,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAGjD,MAAM,OAAO,MAAM,oBAAoB,aAAa,IAAIA,MAAK,EAAE;AAC/D,MAAI,CAAC,QAAQ,SAAS;AACpB,UAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,UAAQ,QAAQ;AAAA,IACd,KAAK,UAAU;AACb,UAAI,SAAS;AACX,cAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,UAAM,OAAO,SAAS,IAAI,MAAM,GAC1B,SAAS,yBAAyB,UAAU,EAAE,KAAK,CAAC;AAC1D,aAAK,OAAO,WAIZ,MAAM,mBAAmB,aAAa,IAAI,EAAE,MAAM,OAAO,KAAK,KAAK,CAAC,GAC7D,QAJEC,MAAK,EAAE,QAAQ,OAAO,MAAM,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAKnE;AAAA,IAEA,KAAK,UAAU;AACb,UAAI,SAAS;AACX,cAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,mBAAM,mBAAmB,aAAa,EAAE,GACjCE,UAAS,gBAAgB;AAAA,IAClC;AAAA,IAEA,KAAK,cAAc;AACjB,UAAM,SAAS,gBAAgB,UAAU;AAAA,QACvC,OAAO,SAAS,IAAI,OAAO;AAAA,QAC3B,MAAM,SAAS,IAAI,MAAM;AAAA,MAC3B,CAAC;AAED,aAAK,OAAO,UAKL,OAJEF,MAAK,EAAE,QAAQ,OAAO,MAAM,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,IAKnE;AAAA,IAEA,KAAK,eAAe;AAClB,UAAI,SAAS;AACX,cAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,UAAM,WAAW,SAAS,IAAI,UAAU,GAClC,UAAU,SAAS,IAAI,MAAM;AAEnC,aAAI,OAAO,YAAa,YAAY,CAAC,CAAC,SAAS,QAAQ,EAAE,SAAS,OAAiB,IAC1EA,MAAK,EAAE,OAAO,gBAAgB,GAAG,EAAE,QAAQ,IAAI,CAAC,KAGzD,MAAM,6BAA6B,aAAa,IAAI,UAAU,OAA6B,GACpF;AAAA,IACT;AAAA,IAEA,KAAK,iBAAiB;AACpB,UAAI,SAAS;AACX,cAAM,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAGpD,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,aAAI,OAAO,YAAa,WACfA,MAAK,EAAE,OAAO,gBAAgB,GAAG,EAAE,QAAQ,IAAI,CAAC,KAGzD,MAAM,yBAAyB,aAAa,IAAI,QAAQ,GACjD;AAAA,IACT;AAAA,IAEA;AACE,YAAM,IAAI,SAAS,kBAAkB,EAAE,QAAQ,IAAI,CAAC;AAAA,EACxD;AACF;AAEe,SAAR,mBAAoC;AACzC,MAAM,EAAE,cAAc,KAAK,IAAIG,eAA6B,GACtD,UAAU,SAAS;AAEzB,SACE,gBAAAN,QAAC,SAAI,WAAU,OACb,0BAAAA,QAAC,SAAI,WAAU,qBACb;AAAA,oBAAAA,QAAC,SAAI,WAAU,yCACb;AAAA,sBAAAA,QAAC,SACC;AAAA,wBAAAA,QAAC,QAAG,WAAU,+BAA+B,uBAAa,QAA1D;AAAA;AAAA;AAAA;AAAA,eAA+D;AAAA,QAC/D,gBAAAA,QAAC,OAAE,WAAU,2DAA0D;AAAA;AAAA,UAC5D,IAAI,KAAK,aAAa,SAAS,EAAE,mBAAmB;AAAA,aAD/D;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,MAEC,WACC,gBAAAA,QAACO,OAAA,EAAK,QAAO,QACX;AAAA,wBAAAP,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,YAAzC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAClD,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,WAAU;AAAA,YACV,SAAS,CAAC,MAAM;AACd,cAAK,QAAQ,oDAAoD,KAC/D,EAAE,eAAe;AAAA,YAErB;AAAA,YACD;AAAA;AAAA,UARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA;AAAA,WAZF;AAAA;AAAA;AAAA;AAAA,aAaA;AAAA,SAtBJ;AAAA;AAAA;AAAA;AAAA,WAwBA;AAAA,IAEA,gBAAAA,QAAC,SAAI,WAAU,aAEZ;AAAA,iBACC,gBAAAA,QAAC,aAAQ,WAAU,iEACjB;AAAA,wBAAAA,QAAC,QAAG,WAAU,4BAA2B,qCAAzC;AAAA;AAAA;AAAA;AAAA,eAA8D;AAAA,QAC9D,gBAAAA,QAACO,OAAA,EAAK,QAAO,QAAO,WAAU,sBAC5B;AAAA,0BAAAP,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,YAAzC;AAAA;AAAA;AAAA;AAAA,iBAAkD;AAAA,UAClD,gBAAAA,QAAC,SACC;AAAA,4BAAAA,QAAC,WAAM,SAAQ,QAAO,WAAU,kCAAiC,iCAAjE;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,MAAK;AAAA,gBACL,IAAG;AAAA,gBACH,MAAK;AAAA,gBACL,cAAc,aAAa;AAAA,gBAC3B,WAAU;AAAA,gBACV,UAAQ;AAAA;AAAA,cANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAOA;AAAA,eAXF;AAAA;AAAA;AAAA;AAAA,iBAYA;AAAA,UACA,gBAAAA,QAAC,SAAI,WAAU,oBACb,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,WAAU;AAAA,cACX;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA,KANF;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,aAtBF;AAAA;AAAA;AAAA;AAAA,eAuBA;AAAA,WAzBF;AAAA;AAAA;AAAA;AAAA,aA0BA;AAAA,MAIF,gBAAAA,QAAC,aAAQ,WAAU,iEACjB;AAAA,wBAAAA,QAAC,QAAG,WAAU,4BAA2B,uBAAzC;AAAA;AAAA;AAAA;AAAA,eAAgD;AAAA,QAChD,gBAAAA,QAAC,SAAI,WAAU,aACZ,uBAAa,SAAS,IAAI,CAAC,EAAE,MAAM,QAAQ,MAAM,WAAW,MAC3D,gBAAAA;AAAA,UAAC;AAAA;AAAA,YAEC,WAAU;AAAA,YAEV;AAAA,8BAAAA,QAAC,SACC;AAAA,gCAAAA,QAAC,OAAE,WAAU,eAAe,iBAAO,QAAnC;AAAA;AAAA;AAAA;AAAA,uBAAwC;AAAA,gBACxC,gBAAAA,QAAC,OAAE,WAAU,mEACV,iBAAO,SADV;AAAA;AAAA;AAAA;AAAA,uBAEA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA,qBAKA;AAAA,cACA,gBAAAA,QAAC,SAAI,WAAU,+BACb;AAAA,gCAAAA,QAAC,UAAK,WAAU,8EACb,wBADH;AAAA;AAAA;AAAA;AAAA,uBAEA;AAAA,gBACC,WAAW,OAAO,OAAO,KAAK,MAC7B,gBAAAA,QAACO,OAAA,EAAK,QAAO,QAAO,WAAU,+BAC5B;AAAA,kCAAAP,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,mBAAzC;AAAA;AAAA;AAAA;AAAA,yBAAyD;AAAA,kBACzD,gBAAAA,QAAC,WAAM,MAAK,UAAS,MAAK,YAAW,OAAO,OAAO,MAAnD;AAAA;AAAA;AAAA;AAAA,yBAAuD;AAAA,kBACvD,gBAAAA;AAAA,oBAAC;AAAA;AAAA,sBACC,MAAK;AAAA,sBACL,WAAU;AAAA,sBACV,SAAS,CAAC,MAAM;AACd,wBAAK,QAAQ,8CAA8C,KACzD,EAAE,eAAe;AAAA,sBAErB;AAAA,sBACD;AAAA;AAAA,oBARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAUA;AAAA,qBAbF;AAAA;AAAA;AAAA;AAAA,uBAcA;AAAA,mBAnBJ;AAAA;AAAA;AAAA;AAAA,qBAqBA;AAAA;AAAA;AAAA,UA9BK,OAAO;AAAA,UADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgCA,CACD,KAnCH;AAAA;AAAA;AAAA;AAAA,eAoCA;AAAA,SAGE,WAAW,SAAS,YACpB,gBAAAA,QAACO,OAAA,EAAK,QAAO,QAAO,WAAU,2BAC5B;AAAA,0BAAAP,QAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,gBAAzC;AAAA;AAAA;AAAA;AAAA,iBAAsD;AAAA,UACtD,gBAAAA,QAAC,SACC;AAAA,4BAAAA,QAAC,WAAM,SAAQ,SAAQ,WAAU,kCAAiC,mCAAlE;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,MAAK;AAAA,gBACL,IAAG;AAAA,gBACH,MAAK;AAAA,gBACL,WAAU;AAAA,gBACV,UAAQ;AAAA;AAAA,cALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA;AAAA,eAVF;AAAA;AAAA;AAAA;AAAA,iBAWA;AAAA,UACA,gBAAAA,QAAC,SACC;AAAA,4BAAAA,QAAC,WAAM,SAAQ,QAAO,WAAU,kCAAiC,oBAAjE;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,IAAG;AAAA,gBACH,MAAK;AAAA,gBACL,WAAU;AAAA,gBACV,cAAa;AAAA,gBAEb;AAAA,kCAAAA,QAAC,YAAO,OAAM,UAAS,sBAAvB;AAAA;AAAA;AAAA;AAAA,yBAA6B;AAAA,kBAC7B,gBAAAA,QAAC,YAAO,OAAM,SAAQ,qBAAtB;AAAA;AAAA;AAAA;AAAA,yBAA2B;AAAA;AAAA;AAAA,cAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQA;AAAA,eAZF;AAAA;AAAA;AAAA;AAAA,iBAaA;AAAA,UACA,gBAAAA,QAAC,SAAI,WAAU,oBACb,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,WAAU;AAAA,cACX;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA,KANF;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,aAnCF;AAAA;AAAA;AAAA;AAAA,eAoCA;AAAA,WA9EJ;AAAA;AAAA;AAAA;AAAA,aAgFA;AAAA,SAjHF;AAAA;AAAA;AAAA;AAAA,WAkHA;AAAA,OA7IF;AAAA;AAAA;AAAA;AAAA,SA8IA,KA/IF;AAAA;AAAA;AAAA;AAAA,SAgJA;AAEJ;;;ACvRA;AAAA;AAAA,gBAAAQ;AAAA,EAAA;AAAA;AAAA,SAAS,QAAAC,OAAM,YAAAC,iBAAyC;AACxD,SAAS,QAAAC,OAAM,qBAAqB;AAGpC,SAAS,KAAAC,UAAS;AA6BZ,mBAAAC,eAAA;AA3BN,IAAM,2BAA2BD,GAAE,OAAO;AAAA,EACxC,MAAMA,GAAE,OAAO,EAAE,IAAI,GAAG,kBAAkB,EAAE,IAAI,GAAG;AACrD,CAAC;AAED,eAAsBE,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAMC,QAAO,MAAM,YAAY,OAAO,GAEhC,QADW,MAAM,QAAQ,SAAS,GAClB,IAAI,MAAM,GAE1B,SAAS,yBAAyB,UAAU,EAAE,KAAK,CAAC;AAC1D,MAAI,CAAC,OAAO;AACV,WAAOC,MAAK,EAAE,QAAQ,OAAO,MAAM,QAAQ,EAAE,GAAG,EAAE,QAAQ,IAAI,CAAC;AAGjE,MAAM,eAAe,MAAM,mBAAmB;AAAA,IAC5C,MAAM,OAAO,KAAK;AAAA,IAClB,QAAQD,MAAK;AAAA,EACf,CAAC;AAED,SAAOE,UAAS,kBAAkB,aAAa,IAAI;AACrD;AAEe,SAAR,sBAAuC;AAC5C,MAAM,aAAa,cAA6B;AAEhD,SACE,gBAAAJ,QAAC,SAAI,WAAU,wBACb;AAAA,oBAAAA,QAAC,QAAG,WAAU,+BAA8B,mCAA5C;AAAA;AAAA;AAAA;AAAA,WAA+D;AAAA,IAE/D,gBAAAA,QAACK,OAAA,EAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,sBAAAL,QAAC,SACC;AAAA,wBAAAA,QAAC,WAAM,SAAQ,QAAO,WAAU,kCAAiC,iCAAjE;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,IAAG;AAAA,YACH,MAAK;AAAA,YACL,WAAU;AAAA,YACV,UAAQ;AAAA;AAAA,UALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA;AAAA,QACC,YAAY,QAAQ,aAAa,QAChC,gBAAAA,QAAC,OAAE,WAAU,6BACV,qBAAW,OAAO,YAAY,KAAK,CAAC,KADvC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAdJ;AAAA;AAAA;AAAA;AAAA,aAgBA;AAAA,MAEA,gBAAAA,QAAC,SAAI,WAAU,8BACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,WAZF;AAAA;AAAA;AAAA;AAAA,aAaA;AAAA,SAhCF;AAAA;AAAA;AAAA;AAAA,WAiCA;AAAA,OApCF;AAAA;AAAA;AAAA;AAAA,SAqCA;AAEJ;;;ACvEA;AAAA;AAAA,gBAAAM;AAAA;AAAA,SAAS,QAAAC,aAAqC;AAC9C,SAAS,KAAAC,UAAS;AAIlB,SAAS,MAAAC,WAAU;AAGnB,IAAM,mBAAmBC,GAAE,OAAO;AAAA,EAChC,MAAMA,GAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACtB,MAAMA,GAAE,QAAQ,YAAY;AAAA,EAC5B,aAAaA,GAAE,OAAO;AAAA,IACpB,MAAMA,GAAE,OAAO;AAAA,IACf,MAAMA,GAAE,OAAO;AAAA,IACf,UAAUA,GAAE,OAAO;AAAA,IACnB,MAAMA,GAAE,OAAO;AAAA,IACf,UAAUA,GAAE,OAAO;AAAA,IACnB,KAAKA,GAAE,QAAQ,EAAE,SAAS;AAAA,EAC5B,CAAC;AACH,CAAC;AAED,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAMC,QAAO,MAAM,YAAY,OAAO;AAEtC,UAAQ,QAAQ,QAAQ;AAAA,IACtB,KAAK,QAAQ;AACX,UAAM,OAAO,iBAAiB,MAAM,MAAM,QAAQ,KAAK,CAAC,GAIlD,YAAY,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,QAC7D,OAAOC,IAAG,oBAAoB,QAAQD,MAAK,EAAE;AAAA,MAC/C,CAAC;AAED,UAAI,CAAC;AACH,cAAME,MAAK,EAAE,OAAO,wBAAwB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAIhE,UAAM,CAAC,UAAU,IAAI,MAAM,GAAG,OAAOC,oBAAmB,EACrD,OAAO;AAAA,QACN,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,QACX,gBAAgB,UAAU;AAAA,QAC1B,aAAa,KAAK;AAAA,MACpB,CAAC,EACA,UAAU;AAGb,UAAI;AAEF,cADgB,kBAAkB,YAAY,EAChC,cAAc,WAAW,EAAE;AAAA,MAC3C,SAAS,OAAP;AAEA,oBAAM,GAAG,OAAOA,oBAAmB,EAChC,MAAMF,IAAGE,qBAAoB,IAAI,WAAW,EAAE,CAAC,GAE5CD,MAAK,EAAE,OAAO,MAAM,QAAQ,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,MACtD;AAEA,aAAOA,MAAK,UAAU;AAAA,IACxB;AAAA,IAEA,KAAK,OAAO;AACV,UAAM,EAAE,GAAG,IAAIJ,GAAE,OAAO,EAAE,IAAIA,GAAE,OAAO,EAAE,CAAC,EAAE,MAAM,MAAM,QAAQ,KAAK,CAAC,GAChE,OAAO,iBAAiB,MAAM,MAAM,QAAQ,KAAK,CAAC,GAGlD,aAAa,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,QAC9D,OAAOG,IAAGE,qBAAoB,IAAI,EAAE;AAAA,QACpC,MAAM;AAAA,UACJ,cAAc;AAAA,YACZ,MAAM;AAAA,cACJ,SAAS;AAAA,gBACP,OAAOF,IAAG,oBAAoB,QAAQD,MAAK,EAAE;AAAA,cAC/C;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,CAAC,cAAc,CAAC,WAAW,aAAa,QAAQ;AAClD,cAAME,MAAK,EAAE,OAAO,uBAAuB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAI/D,UAAM,CAAC,OAAO,IAAI,MAAM,GAAG,OAAOC,oBAAmB,EAClD,IAAI;AAAA,QACH,MAAM,KAAK;AAAA,QACX,aAAa,KAAK;AAAA,QAClB,WAAW,oBAAI,KAAK;AAAA,MACtB,CAAC,EACA,MAAMF,IAAGE,qBAAoB,IAAI,EAAE,CAAC,EACpC,UAAU;AAEb,aAAOD,MAAK,OAAO;AAAA,IACrB;AAAA,IAEA,KAAK,UAAU;AACb,UAAM,EAAE,GAAG,IAAIJ,GAAE,OAAO,EAAE,IAAIA,GAAE,OAAO,EAAE,CAAC,EAAE,MAAM,MAAM,QAAQ,KAAK,CAAC,GAGhE,aAAa,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,QAC9D,OAAOG,IAAGE,qBAAoB,IAAI,EAAE;AAAA,QACpC,MAAM;AAAA,UACJ,cAAc;AAAA,YACZ,MAAM;AAAA,cACJ,SAAS;AAAA,gBACP,OAAOF,IAAG,oBAAoB,QAAQD,MAAK,EAAE;AAAA,cAC/C;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,UAAI,CAAC,cAAc,CAAC,WAAW,aAAa,QAAQ;AAClD,cAAME,MAAK,EAAE,OAAO,uBAAuB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAK/D,mBADgB,kBAAkB,YAAY,EAChC,gBAAgB,EAAE,GAGhC,MAAM,GAAG,OAAOC,oBAAmB,EAChC,MAAMF,IAAGE,qBAAoB,IAAI,EAAE,CAAC,GAEhCD,MAAK,EAAE,SAAS,GAAK,CAAC;AAAA,IAC/B;AAAA,IAEA;AACE,YAAMA,MAAK,EAAE,OAAO,qBAAqB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC/D;AACF;;;ACrIA;AAAA;AAAA,gBAAAE;AAAA,EAAA;AAAA;AAAA;AAAA,SAAS,QAAAC,aAAwD;AACjE,SAAS,QAAAC,OAAM,QAAAC,OAAM,iBAAAC,gBAAe,uBAAuB;;;ACD3D,OAAO,YAAY;AAGnB,SAAS,MAAAC,WAAU;AAGnB,IAAM,cAAc;AAYpB,eAAsB,SAAS,EAAE,OAAO,UAAU,MAAM,WAAW,GAAiB;AAKlF,MAJqB,MAAM,GAAG,MAAM,MAAM,UAAU;AAAA,IAClD,OAAOC,IAAG,MAAM,OAAO,KAAK;AAAA,EAC9B,CAAC;AAGC,WAAO;AAAA,MACL,OAAO;AAAA,IACT;AAGF,MAAM,eAAe,MAAM,OAAO,KAAK,UAAU,WAAW,GAEtD,CAACC,KAAI,IAAI,MAAM,GAAG,OAAO,KAAK,EACjC,OAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC,EACA,UAAU;AAAA,IACT,IAAI,MAAM;AAAA,EACZ,CAAC;AAEH,SAAO,kBAAkBA,MAAK,IAAI,UAAU;AAC9C;AAEA,eAAsB,MAAM,EAAE,OAAO,UAAU,WAAW,GAAc;AACtE,MAAMA,QAAO,MAAM,GAAG,MAAM,MAAM,UAAU;AAAA,IAC1C,OAAOD,IAAG,MAAM,OAAO,KAAK;AAAA,EAC9B,CAAC;AAED,SAAKC,QAMmB,MAAM,OAAO,QAAQ,UAAUA,MAAK,YAAY,IAOjE,kBAAkBA,MAAK,IAAI,UAAU,IALnC;AAAA,IACL,OAAO;AAAA,EACT,IATO;AAAA,IACL,OAAO;AAAA,EACT;AAWJ;;;AD3BU,mBAAAC,eAAA;AAhCH,IAAM,OAAqB,MACzB,CAAC,EAAE,OAAO,yBAAyB,CAAC;AAG7C,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAM,WAAW,MAAM,QAAQ,SAAS,GAClC,QAAQ,SAAS,IAAI,OAAO,GAC5B,WAAW,SAAS,IAAI,UAAU,GAClC,OAAO,SAAS,IAAI,MAAM,GAC1B,aAAa,SAAS,IAAI,YAAY,KAAK;AAEjD,SACE,OAAO,SAAU,YACjB,OAAO,YAAa,YACpB,OAAO,QAAS,YAChB,OAAO,cAAe,WAEfC,MAAK,EAAE,OAAO,0BAA0B,GAAG,EAAE,QAAQ,IAAI,CAAC,IAG5D,SAAS,EAAE,OAAO,UAAU,MAAM,WAAW,CAAC;AACvD;AAEe,SAAR,eAAgC;AACrC,MAAM,aAAaC,eAA6B,GAC1C,CAAC,YAAY,IAAI,gBAAgB,GACjC,aAAa,aAAa,IAAI,YAAY,KAAK;AAErD,SACE,gBAAAH,QAAC,SAAI,WAAU,6CACb,0BAAAA,QAAC,SAAI,WAAU,2BACb;AAAA,oBAAAA,QAAC,SAAI,WAAU,uCACb;AAAA,sBAAAA,QAAC,QAAG,WAAU,qCAAoC,iCAAlD;AAAA;AAAA;AAAA;AAAA,aAAmE;AAAA,MACnE,gBAAAA,QAAC,OAAE,WAAU,yBAAwB,oDAArC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IAEA,gBAAAA,QAACI,OAAA,EAAK,QAAO,QAAO,WAAU,kBAC5B;AAAA,sBAAAJ,QAAC,WAAM,MAAK,UAAS,MAAK,cAAa,OAAO,cAA9C;AAAA;AAAA;AAAA;AAAA,aAA0D;AAAA,MAE1D,gBAAAA,QAAC,SAAI,WAAU,aACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,WAAU;AAAA;AAAA,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA,WAdF;AAAA;AAAA;AAAA;AAAA,aAeA;AAAA,MAEA,gBAAAA,QAAC,SAAI,WAAU,aACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,WAAU;AAAA;AAAA,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA,WAdF;AAAA;AAAA;AAAA;AAAA,aAeA;AAAA,MAEA,gBAAAA,QAAC,SAAI,WAAU,aACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,WAAU;AAAA;AAAA,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA,WAdF;AAAA;AAAA;AAAA;AAAA,aAeA;AAAA,MAEC,YAAY,SACX,gBAAAA,QAAC,SAAI,WAAU,wBAAwB,qBAAW,SAAlD;AAAA;AAAA;AAAA;AAAA,aAAwD;AAAA,MAG1D,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,WAAU;AAAA,UACX;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,MAEA,gBAAAA,QAAC,OAAE,WAAU,qCAAoC;AAAA;AAAA,QACtB;AAAA,QACzB,gBAAAA;AAAA,UAACK;AAAA,UAAA;AAAA,YACC,IAAI;AAAA,cACF,UAAU;AAAA,cACV,QAAQ,aAAa,SAAS;AAAA,YAChC;AAAA,YACA,WAAU;AAAA,YACX;AAAA;AAAA,UAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQA;AAAA,WAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,SA5EF;AAAA;AAAA;AAAA;AAAA,WA6EA;AAAA,OArFF;AAAA;AAAA;AAAA;AAAA,SAsFA,KAvFF;AAAA;AAAA;AAAA;AAAA,SAwFA;AAEJ;;;AE3HA;AAAA;AAAA;AAAA,gBAAAC;AAAA;AAAA,SAAS,QAAAC,aAAqC;AAC9C,SAAS,QAAAC,OAAM,iBAAAC,sBAAqB;AAgB5B,mBAAAC,gBAAA;AAZR,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAMC,QAAO,MAAM,YAAY,OAAO,GAChCC,iBAAgB,MAAM,qBAAqBD,MAAK,EAAE;AACxD,SAAOE,MAAK,EAAE,eAAAD,eAAc,CAAC;AAC/B;AAEe,SAAR,oBAAqC;AAC1C,MAAM,EAAE,eAAAA,eAAc,IAAIE,eAA6B;AAEvD,SACE,gBAAAL,SAAC,SAAI,WAAU,OACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,0CACb;AAAA,sBAAAA,SAAC,QAAG,WAAU,0BAAyB,6BAAvC;AAAA;AAAA;AAAA;AAAA,aAAoD;AAAA,MACpD,gBAAAA;AAAA,QAACM;AAAA,QAAA;AAAA,UACC,IAAG;AAAA,UACH,WAAU;AAAA,UACX;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,SAPF;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IAEA,gBAAAN,SAAC,SAAI,WAAU,4CACZ;AAAA,MAAAG,eAAc,IAAI,CAAC,EAAE,aAAa,MACjC,gBAAAH;AAAA,QAACM;AAAA,QAAA;AAAA,UAEC,IAAI,kBAAkB,aAAa;AAAA,UACnC,WAAU;AAAA,UAEV;AAAA,4BAAAN,SAAC,QAAG,WAAU,4BAA4B,uBAAa,QAAvD;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAAA,YAC5D,gBAAAA,SAAC,OAAE,WAAU,mEAAkE;AAAA;AAAA,cACpE,IAAI,KAAK,aAAa,SAAS,EAAE,mBAAmB;AAAA,iBAD/D;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA;AAAA;AAAA,QAPK,aAAa;AAAA,QADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,CACD;AAAA,MAEAG,eAAc,WAAW,KACxB,gBAAAH,SAAC,SAAI,WAAU,mCACb;AAAA,wBAAAA,SAAC,QAAG,WAAU,4BAA2B,oCAAzC;AAAA;AAAA;AAAA;AAAA,eAA6D;AAAA,QAC7D,gBAAAA,SAAC,OAAE,WAAU,gEAA+D,6DAA5E;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA;AAAA,UAACM;AAAA,UAAA;AAAA,YACC,IAAG;AAAA,YACH,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,WAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,SA1BJ;AAAA;AAAA;AAAA;AAAA,WA4BA;AAAA,OAvCF;AAAA;AAAA;AAAA;AAAA,SAwCA;AAEJ;;;ACzDA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,cAAAC;AAAA;AAAA,SAAS,QAAAC,aAAwD;AACjE,SAAS,QAAAC,OAAM,QAAAC,OAAM,iBAAAC,gBAAe,mBAAAC,wBAAuB;AAiCjD,mBAAAC,gBAAA;AA9BH,IAAMC,QAAqB,MACzB,CAAC,EAAE,OAAO,sBAAsB,CAAC;AAG1C,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAM,WAAW,MAAM,QAAQ,SAAS,GAClC,QAAQ,SAAS,IAAI,OAAO,GAC5B,WAAW,SAAS,IAAI,UAAU,GAClC,aAAa,SAAS,IAAI,YAAY,KAAK;AAEjD,SACE,OAAO,SAAU,YACjB,OAAO,YAAa,YACpB,OAAO,cAAe,WAEfC,MAAK,EAAE,OAAO,0BAA0B,GAAG,EAAE,QAAQ,IAAI,CAAC,IAG5D,MAAM,EAAE,OAAO,UAAU,WAAW,CAAC;AAC9C;AAEe,SAAR,YAA6B;AAClC,MAAM,aAAaC,eAA6B,GAC1C,CAAC,YAAY,IAAIC,iBAAgB,GACjC,aAAa,aAAa,IAAI,YAAY,KAAK;AAErD,SACE,gBAAAL,SAAC,SAAI,WAAU,6CACb,0BAAAA,SAAC,SAAI,WAAU,2BACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,uCACb;AAAA,sBAAAA,SAAC,QAAG,WAAU,qCAAoC,4BAAlD;AAAA;AAAA;AAAA;AAAA,aAA8D;AAAA,MAC9D,gBAAAA,SAAC,OAAE,WAAU,yBAAwB,oDAArC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IAEA,gBAAAA,SAACM,OAAA,EAAK,QAAO,QAAO,WAAU,kBAC5B;AAAA,sBAAAN,SAAC,WAAM,MAAK,UAAS,MAAK,cAAa,OAAO,cAA9C;AAAA;AAAA;AAAA;AAAA,aAA0D;AAAA,MAC1D,gBAAAA,SAAC,SAAI,WAAU,aACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,WAAU;AAAA;AAAA,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA,WAdF;AAAA;AAAA;AAAA;AAAA,aAeA;AAAA,MAEA,gBAAAA,SAAC,SAAI,WAAU,aACb;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,WAAU;AAAA;AAAA,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA,WAdF;AAAA;AAAA;AAAA;AAAA,aAeA;AAAA,MAEC,YAAY,SACX,gBAAAA,SAAC,SAAI,WAAU,wBAAwB,qBAAW,SAAlD;AAAA;AAAA;AAAA;AAAA,aAAwD;AAAA,MAG1D,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,WAAU;AAAA,UACX;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,MAEA,gBAAAA,SAAC,OAAE,WAAU,qCAAoC;AAAA;AAAA,QACxB;AAAA,QACvB,gBAAAA;AAAA,UAACO;AAAA,UAAA;AAAA,YACC,IAAI;AAAA,cACF,UAAU;AAAA,cACV,QAAQ,aAAa,SAAS;AAAA,YAChC;AAAA,YACA,WAAU;AAAA,YACX;AAAA;AAAA,UAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQA;AAAA,WAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,SA1DF;AAAA;AAAA;AAAA;AAAA,WA2DA;AAAA,OAnEF;AAAA;AAAA;AAAA;AAAA,SAoEA,KArEF;AAAA;AAAA;AAAA;AAAA,SAsEA;AAEJ;;;ACvGA;AAAA;AAAA;AAAA,gBAAAC;AAAA;AAAA,SAAS,QAAAC,aAAqC;AAC9C,SAAS,iBAAAC,gBAAe,mBAAAC,wBAAuB;;;ACD/C,SAAS,iBAAiB;;;ACA1B,SAAS,QAAAC,aAA6B;AACtC,SAAS,eAAe;AAEjB,SAAS,MAAM,QAAsB;AAC1C,SAAO,QAAQA,MAAK,MAAM,CAAC;AAC7B;;;AD6BY,mBAAAC,gBAAA;AAPL,SAAS,QAAQ,EAAE,MAAM,WAAW,YAAY,GAAiB;AACtE,SACE,gBAAAA,SAAC,SAAI,WAAU,sDACb,0BAAAA,SAAC,SAAI,WAAU,QACZ,eAAK,IAAI,CAAC,QAAQ;AACjB,QAAM,WAAW,cAAc,IAAI;AACnC,WACE,gBAAAA;AAAA,MAAC;AAAA;AAAA,QAEC,SAAS,MAAM,YAAY,IAAI,EAAE;AAAA,QACjC,WAAW;AAAA,UACT;AAAA,UACA,WACI,8DACA;AAAA,QACN;AAAA,QAEC,cAAI;AAAA;AAAA,MATA,IAAI;AAAA,MADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA;AAAA,EAEJ,CAAC,KAjBH;AAAA;AAAA;AAAA;AAAA,SAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;;;AEnDA,SAAS,aAAAC,kBAAiB;AAC1B,SAAS,aAAa,SAAS,YAAAC,iBAAgB;AAE/C;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OACK;AA6GS,mBAAAC,gBAAA;AA1FT,SAAS,SAAS;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ,QAAQ;AACV,GAAkB;AAChB,MAAM,CAAC,aAAa,cAAc,IAAIC,UAAkC,IAAI,GACtE,CAAC,aAAa,cAAc,IAAIA,UAAwB,IAAI,GAC5D,CAAC,WAAW,YAAY,IAAIA,UAAwB,IAAI,GAExD,qBAAqB,YAAY,CAAC,UAAkB,aAAqB;AAC7E,IAAK,eACL,eAAe,CAAC,UAAU,QAAQ,CAAC,GACnC,eAAe,gBAAgB,KAAK,QAAQ,IAAI,QAAQ,CAAC,CAAC,GAC1D,aAAa,IAAI;AAAA,EACnB,GAAG,CAAC,MAAM,YAAY,eAAe,CAAC,GAEhC,oBAAoB,YAAY,MAAM;AAC1C,mBAAe,IAAI,GACnB,eAAe,IAAI,GACnB,aAAa,IAAI;AAAA,EACnB,GAAG,CAAC,CAAC,GAEC,gBAAgB,YAAY,OAChC,GACA,UACA,aACG;AACH,QAAI,EAAE,QAAQ;AACZ,wBAAkB;AAAA,aACT,EAAE,QAAQ;AACnB,UAAI;AACF,YAAM,QAAS,EAAE,OAA4B,OACvC,UAAU;AAAA,UACd,GAAG,KAAK,QAAQ;AAAA,UAChB,CAAC,QAAQ,GAAG;AAAA,QACd;AAEA,cAAM,SAAS,UAAU,OAAO,GAChC,kBAAkB;AAAA,MACpB,SAASC,QAAP;AACA,qBAAaA,kBAAiB,QAAQA,OAAM,UAAU,wBAAwB;AAAA,MAChF;AAAA,EAEJ,GAAG,CAAC,MAAM,QAAQ,iBAAiB,CAAC,GAE9B,aAAa,YAAY,CAAC,aAAqB;AACnD,WAAO,QAAQ;AAAA,EACjB,GAAG,CAAC,MAAM,CAAC,GAEL,iBAAiB,YAAY,CAAC,aAAqB;AACvD,kBAAc,gBAAgB,WAAW,OAAO,QAAQ;AAAA,EAC1D,GAAG,CAAC,aAAa,WAAW,CAAC,GAEvB,eAAe,YAAY,OAAO,GAAqB,aAAqB;AAEhF,QADA,EAAE,gBAAgB,GACd,EAAC,OAAO,QAAQ,2CAA2C;AAE/D,UAAI;AACF,cAAM,WAAW,QAAQ;AAAA,MAC3B,SAASA,QAAP;AACA,gBAAQ,MAAM,yBAAyBA,MAAK;AAAA,MAE9C;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC,GAEP,eAAe,mBAA4C,GAE3D,eAAe;AAAA,IAAQ,MAC3B,QAAQ;AAAA,MAAI,SACV,aAAa,SAAS,IAAI,MAAM;AAAA,QAC9B,QAAQ,MAAMC,WAAU,IAAI,IAAI;AAAA,QAChC,MAAM,UAAQ;AACZ,cAAM,WAAW,KAAK,IAAI,OACpB,WAAW,IAAI,MACf,YAAY,cAAc,CAAC,MAAM,YAAY,cAAc,CAAC,MAAM,UAClE,QAAQ,KAAK,SAAS;AAE5B,iBAAI,YAEA,gBAAAH,SAAC,SAAI,WAAU,YACb;AAAA,4BAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAO,eAAe;AAAA,gBACtB,UAAU,OAAK,eAAe,EAAE,OAAO,KAAK;AAAA,gBAC5C,WAAW,OAAK,cAAc,GAAG,UAAU,QAAQ;AAAA,gBACnD,QAAQ,MAAM,kBAAkB;AAAA,gBAChC,WAAW;AAAA,kBACT;AAAA,kBACA,YACI,kFACA;AAAA,gBACN;AAAA,gBACA,WAAS;AAAA;AAAA,cAZX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAaA;AAAA,YACC,aACC,gBAAAA,SAAC,SAAI,WAAU,4EACZ,uBADH;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,eAlBJ;AAAA;AAAA;AAAA;AAAA,iBAoBA,IAKF,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,WAAW;AAAA,gBACT;AAAA,gBACA,cAAc;AAAA,cAChB;AAAA,cACA,SAAS,MAAM,mBAAmB,UAAU,QAAQ;AAAA,cAEnD,0BAAgB,KAAK;AAAA;AAAA,YAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQA;AAAA,QAEJ;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,CAAC,SAAS,iBAAiB,aAAa,aAAa,eAAe,oBAAoB,YAAY,SAAS;AAAA,EAC/G,GAEM,UAAU;AAAA,IAAsB,MACpC,SAAS,CAAC,EAAE,IAAI,QAAQ,MAAM,cAAc,OAAO,CAAC,IAAI,CAAC;AAAA,IACzD,CAAC,QAAQ,SAAS;AAAA,EACpB,GAEM,CAAC,cAAc,UAAU,IAAIC,UAAuB,OAAO,GAE3D,QAAQ,cAAc;AAAA,IAC1B,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,MACL,SAAS;AAAA,IACX;AAAA,IACA,iBAAiB;AAAA,IACjB,iBAAiB,gBAAgB;AAAA,IACjC,mBAAmB,kBAAkB;AAAA,EACvC,CAAC;AAED,SAAI,QAEA,gBAAAD,SAAC,SAAI,WAAU,yFACb,0BAAAA,SAAC,SAAI,WAAU,kCAAkC,mBAAjD;AAAA;AAAA;AAAA;AAAA,SAAuD,KADzD;AAAA;AAAA;AAAA;AAAA,SAEA,IAKF,gBAAAA,SAAC,SAAI,WAAU,kHACZ;AAAA,iBACC,gBAAAA,SAAC,SAAI,WAAU,0FACb,0BAAAA,SAAC,SAAI,WAAU,+BACb;AAAA,sBAAAA,SAAC,SAAI,WAAU,gFAAf;AAAA;AAAA;AAAA;AAAA,aAA4F;AAAA,MAC5F,gBAAAA,SAAC,SAAI,WAAU,iFAAf;AAAA;AAAA;AAAA;AAAA,aAA6F;AAAA,MAC7F,gBAAAA,SAAC,SAAI,WAAU,wDAAf;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,SAHtE;AAAA;AAAA;AAAA;AAAA,WAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,IAGD,KAAK,WAAW,IACf,gBAAAA,SAAC,SAAI,WAAU,6DACb;AAAA,sBAAAA,SAAC,SAAI,WAAU,yCAAwC,iCAAvD;AAAA;AAAA;AAAA;AAAA,aAAwE;AAAA,MACxE,gBAAAA,SAAC,SAAI,WAAU,4CAA2C,mCAA1D;AAAA;AAAA;AAAA;AAAA,aAA6E;AAAA,SAF/E;AAAA;AAAA;AAAA;AAAA,WAGA,IAEA,gBAAAA,SAAC,SAAI,WAAU,4CACb,0BAAAA,SAAC,WAAM,WAAU,6DACf;AAAA,sBAAAA,SAAC,WAAM,WAAU,+FACf,0BAAAA,SAAC,QACE;AAAA,cAAM,cAAc,EAAE,IAAI,YACzB,gBAAAA;AAAA,UAAC;AAAA;AAAA,YAEC,OAAM;AAAA,YACN,WAAU;AAAA,YACV,SAAS,MAAM,WAAW,OAAO,EAAE;AAAA,YAEnC,0BAAAA,SAAC,SAAI,WAAU,2BACb;AAAA,8BAAAA,SAAC,UAAM,UAAAG,WAAU,OAAO,EAAE,KAA1B;AAAA;AAAA;AAAA;AAAA,qBAA4B;AAAA,cAC3B,aAAa,CAAC,GAAG,OAAO,OAAO,MAC9B,gBAAAH,SAAC,UAAK,WAAU,iBACb,uBAAa,CAAC,EAAE,OAAO,WAAM,YADhC;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,iBALJ;AAAA;AAAA;AAAA;AAAA,mBAOA;AAAA;AAAA,UAZK,OAAO;AAAA,UADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAcA,CACD;AAAA,QACA,cACC,gBAAAA,SAAC,QAAG,OAAM,OAAM,WAAU,8CACxB,0BAAAA,SAAC,UAAK,WAAU,WAAU,uBAA1B;AAAA;AAAA;AAAA;AAAA,eAAiC,KADnC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WArBJ;AAAA;AAAA;AAAA;AAAA,aAuBA,KAxBF;AAAA;AAAA;AAAA;AAAA,aAyBA;AAAA,MACA,gBAAAA,SAAC,WAAM,WAAU,iDACd,gBAAM,YAAY,EAAE,KAAK,IAAI,CAAC,KAAK,aAClC,gBAAAA;AAAA,QAAC;AAAA;AAAA,UAEC,WAAW;AAAA,YACT;AAAA,YACA,gBAAgB,YAAY;AAAA,YAC5B;AAAA,UACF;AAAA,UACA,SAAS,MAAM,eAAe,QAAQ;AAAA,UAErC;AAAA,gBAAI,YAAY,EAAE,IAAI,CAAC,SACtB,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBAEC,WAAU;AAAA,gBAET,qBAAW,KAAK,OAAO,UAAU,MAAM,KAAK,WAAW,CAAC;AAAA;AAAA,cAHpD,KAAK;AAAA,cADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKA,CACD;AAAA,YACA,cACC,gBAAAA,SAAC,QAAG,WAAU,8DACZ,0BAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,SAAS,CAAC,MAAM,aAAa,GAAG,QAAQ;AAAA,gBACxC,WAAU;AAAA,gBACX;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKA,KANF;AAAA;AAAA;AAAA;AAAA,mBAOA;AAAA;AAAA;AAAA,QAxBG;AAAA,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2BA,CACD,KA9BH;AAAA;AAAA;AAAA;AAAA,aA+BA;AAAA,SA1DF;AAAA;AAAA;AAAA;AAAA,WA2DA,KA5DF;AAAA;AAAA;AAAA;AAAA,WA6DA;AAAA,OA9EJ;AAAA;AAAA;AAAA;AAAA,SAgFA;AAEJ;;;AC5QA,SAAS,YAAY,gBAAgB,uBAAuB;AA0BpD,mBAAAI,gBAAA;AAZR,IAAM,QAAQ;AAAA,EACZ,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AACZ;AAEO,SAAS,WAAW,EAAE,MAAM,OAAO,SAAS,QAAAC,SAAO,GAAoB;AAC5E,MAAM,OAAO,MAAM,IAAI;AAEvB,SACE,gBAAAD,SAAC,SAAI,WAAU,oEACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,8GACb,0BAAAA,SAAC,QAAK,WAAU,qEAAhB;AAAA;AAAA;AAAA;AAAA,WAAkF,KADpF;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,gBAAAA,SAAC,QAAG,WAAU,gFACX,mBADH;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,gBAAAA,SAAC,OAAE,WAAU,iFACV,qBADH;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACCC,YACC,gBAAAD;AAAA,MAAC;AAAA;AAAA,QACC,SAASC,SAAO;AAAA,QAChB,WAAU;AAAA,QAET,UAAAA,SAAO;AAAA;AAAA,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA;AAAA,OAhBJ;AAAA;AAAA;AAAA;AAAA,SAkBA;AAEJ;;;AC5CA,SAAS,aAAAC,YAAW,YAAAC,iBAAgB;AACpC,SAAS,oBAAoB;AAC7B,SAAS,iBAAiB;AAC1B,SAAS,aAAAC,kBAAiB;AA6BtB,qBAAAC,WACE,UAAAC,gBADF;AAjBG,SAAS,kBAAkB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA2B;AACzB,MAAM,CAAC,SAAS,UAAU,IAAIC,UAAS,EAAK;AAO5C,MALAC,WAAU,OACR,WAAW,EAAI,GACR,MAAM,WAAW,EAAK,IAC5B,CAAC,CAAC,GAED,CAAC;AAAS,WAAO;AAErB,MAAM,iBACJ,gBAAAF,SAAAD,WAAA,EACE;AAAA,oBAAAC;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA,SAAS,gBAAgB;AAAA,QAC3B;AAAA,QACA,SAAS;AAAA;AAAA,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA;AAAA,IACA,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA,SAAS,kBAAkB;AAAA,QAC7B;AAAA,QAEA;AAAA,0BAAAA,SAAC,SAAI,WAAU,+IACb;AAAA,4BAAAA,SAAC,QAAG,WAAU,wDAAuD,2BAArE;AAAA;AAAA;AAAA;AAAA,mBAAgF;AAAA,YAChF,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,SAAS;AAAA,gBACT,WAAU;AAAA,gBAEV,0BAAAA,SAAC,aAAU,WAAU,aAArB;AAAA;AAAA;AAAA;AAAA,uBAA+B;AAAA;AAAA,cAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKA;AAAA,eAPF;AAAA;AAAA;AAAA;AAAA,iBAQA;AAAA,UACC,OACC,gBAAAA,SAAC,SAAI,WAAU,0BACb,0BAAAA,SAAC,SAAI,WAAU,iBACZ,kBAAQ,IAAI,CAAC,WACZ,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,WAAU;AAAA,cAEV;AAAA,gCAAAA,SAAC,SAAI,WAAU,uFACb,0BAAAA,SAAC,SAAI,WAAU,qCACb;AAAA,kCAAAA,SAAC,UAAK,WAAU,wDACb,UAAAG,WAAU,OAAO,IAAI,KADxB;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA,kBACA,gBAAAH,SAAC,UAAK,WAAU,sDACb,iBAAO,QADV;AAAA;AAAA;AAAA;AAAA,yBAEA;AAAA,qBANF;AAAA;AAAA;AAAA;AAAA,uBAOA,KARF;AAAA;AAAA;AAAA;AAAA,uBASA;AAAA,gBACA,gBAAAA,SAAC,SAAI,WAAU,uCACb,0BAAAA,SAAC,SAAI,WAAU,kEACZ,0BAAgB,IAAI,OAAO,IAAI,CAAC,KADnC;AAAA;AAAA;AAAA;AAAA,uBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,uBAIA;AAAA;AAAA;AAAA,YAjBK,OAAO;AAAA,YADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAmBA,CACD,KAtBH;AAAA;AAAA;AAAA;AAAA,iBAuBA,KAxBF;AAAA;AAAA;AAAA;AAAA,iBAyBA;AAAA;AAAA;AAAA,MAzCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA2CA;AAAA,OAnDF;AAAA;AAAA;AAAA;AAAA,SAoDA;AAGF,SAAO,aAAa,gBAAgB,SAAS,IAAI;AACnD;;;ALlFA,SAAS,eAAAI,cAAa,YAAAC,iBAAgB;AACtC,SAAS,UAAU,aAAAC,kBAAiB;;;AMPpC,SAAS,YAAAC,WAAU,aAAAC,kBAAiB;AAE7B,SAAS,YAAY;AAC1B,MAAM,CAAC,UAAU,WAAW,IAAID,UAAS,EAAK;AAE9C,SAAAC,WAAU,MAAM;AACd,gBAAY,EAAI;AAAA,EAClB,GAAG,CAAC,CAAC,GAEE;AACT;;;ANAA;AACA;AA4IY,SAiFJ,YAAAC,WAjFI,UAAAC,gBAAA;AA/HZ,eAAsBC,QAAO,EAAE,QAAQ,QAAQ,GAAuB;AACpE,MAAM,YAAY,OAAO;AACzB,MAAI,CAAC;AACH,UAAM,IAAI,MAAM,wBAAwB;AAG1C,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG,GACzB,SAAS,IAAI,aAAa,IAAI,QAAQ,KAAK,QAC3C,YAAY,IAAI,aAAa,IAAI,WAAW,GAE5C,OAAO,MAAM,eAAe,WAAW,QAAQ,SAAS,GAExD,eADS,MAAM,YAAY,GACN,KAAK,OAAK,EAAE,SAAS,SAAS;AAEzD,MAAI,CAAC;AACH,UAAM,IAAI,MAAM,SAAS,qBAAqB;AAGhD,SAAOC,MAAK;AAAA,IACV;AAAA,IACA;AAAA,IACA,SAAS,YAAY;AAAA,EACvB,CAAC;AACH;AAEe,SAAR,YAA6B;AAClC,MAAM,EAAE,WAAW,MAAM,QAAQ,IAAIC,eAA0B,GACzD,CAAC,cAAc,eAAe,IAAIC,iBAAgB,GAClD,WAAW,UAAU,GACrB,CAAC,aAAa,cAAc,IAAIC,UAAwB,IAAI,GAC5D,CAAC,WAAW,YAAY,IAAIA,UAAS,EAAK,GAC1C,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI,GAEhD,YAAY,aAAa,IAAI,KAAK,KAAK,WACvC,SAAS,aAAa,IAAI,QAAQ,KAAK,QACvC,YAAa,aAAa,IAAI,WAAW,KAAwB,QAEjE,aAAaC,aAAY,CAAC,aAAqB;AACnD,oBAAgB,UAAQ;AACtB,UAAM,YAAY,IAAI,gBAAgB,IAAI;AAC1C,uBAAU,IAAI,UAAU,QAAQ,GAChC,UAAU,IAAI,aAAa,KAAK,IAAI,QAAQ,MAAM,YAAY,KAAK,IAAI,WAAW,MAAM,QAAQ,SAAS,KAAK,GACvG;AAAA,IACT,CAAC;AAAA,EACH,GAAG,CAAC,eAAe,CAAC,GAEd,kBAAkBA,aAAY,CAAC,UAAkB;AACrD,oBAAgB,UAAQ;AACtB,UAAM,YAAY,IAAI,gBAAgB,IAAI;AAC1C,uBAAU,IAAI,OAAO,KAAK,GACnB;AAAA,IACT,CAAC;AAAA,EACH,GAAG,CAAC,eAAe,CAAC,GAEd,aAAaA,aAAY,OAAO,UAAkB,YAAqC;AAC3F,QAAK,WAEL;AAAA,mBAAa,EAAI,GACjB,SAAS,IAAI;AACb,UAAI;AACF,YAAM,WAAW,MAAM,MAAM,eAAe,kBAAkB,YAAY;AAAA,UACxE,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,gBAAgB;AAAA,UAClB;AAAA,UACA,MAAM,KAAK,UAAU,OAAO;AAAA,QAC9B,CAAC;AAED,YAAI,CAAC,SAAS;AACZ,gBAAM,IAAI,MAAM,yBAAyB,SAAS,YAAY;AAAA,MAElE,SAAS,KAAP;AACA,uBAAS,eAAe,QAAQ,IAAI,UAAU,sBAAsB,GAC9D;AAAA,MACR,UAAE;AACA,qBAAa,EAAK;AAAA,MACpB;AAAA;AAAA,EACF,GAAG,CAAC,SAAS,CAAC,GAER,eAAeA,aAAY,OAAO,aAAqB;AAC3D,QAAK,WAEL;AAAA,mBAAa,EAAI,GACjB,SAAS,IAAI;AACb,UAAI;AACF,YAAM,WAAW,MAAM,MAAM,eAAe,kBAAkB,YAAY;AAAA,UACxE,QAAQ;AAAA,QACV,CAAC;AAED,YAAI,CAAC,SAAS;AACZ,gBAAM,IAAI,MAAM,yBAAyB,SAAS,YAAY;AAGhE,QAAI,gBAAgB,YAClB,eAAe,IAAI;AAAA,MAEvB,SAAS,KAAP;AACA,uBAAS,eAAe,QAAQ,IAAI,UAAU,sBAAsB,GAC9D;AAAA,MACR,UAAE;AACA,qBAAa,EAAK;AAAA,MACpB;AAAA;AAAA,EACF,GAAG,CAAC,WAAW,WAAW,CAAC,GAErB,kBAAkBA,aAAY,CAAC,UAC/B,UAAU,OAAa,SACvB,UAAU,SAAkB,KAC5B,OAAO,SAAU,WAAiB,KAAK,UAAU,KAAK,IACnD,OAAO,KAAK,GAClB,CAAC,CAAC,GAEC,OAAO;AAAA,IACX,EAAE,IAAI,WAAW,OAAO,UAAU;AAAA,IAClC,EAAE,IAAI,aAAa,OAAO,YAAY;AAAA,IACtC,EAAE,IAAI,WAAW,OAAO,UAAU;AAAA,IAClC,EAAE,IAAI,gBAAgB,OAAO,eAAe;AAAA,EAC9C,GAEM,mBAAmB,MAAM;AAC7B,QAAI,CAAC;AACH,aAAO;AAGT,YAAQ,WAAW;AAAA,MACjB,KAAK;AACH,eAAI,KAAK,KAAK,WAAW,IAErB,gBAAAN;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAM;AAAA,YACN,SAAQ;AAAA;AAAA,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIA,IAIF,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC;AAAA,YACA,MAAM,KAAK;AAAA,YACX;AAAA,YACA;AAAA,YACA,QAAQ;AAAA,YACR;AAAA,YACA,YAAY;AAAA,YACZ,QAAQ;AAAA,YACR,UAAU;AAAA,YACV,aAAa,SAAS,WAAW,IAAI,cAAc;AAAA,YACnD,aAAa;AAAA,YACb;AAAA,YACA,OAAO,SAAS;AAAA;AAAA,UAblB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAcA;AAAA,MAEJ,KAAK;AACH,eAAI,QAAQ,WAAW,IAEnB,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAM;AAAA,YACN,SAAQ;AAAA;AAAA,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAIA,IAIF,gBAAAA,SAAC,SAAI,WAAU,aACb,0BAAAA,SAAC,SAAI,WAAU,mBACb,0BAAAA,SAAC,WAAM,WAAU,4DACf;AAAA,0BAAAA,SAAC,WAAM,WAAU,+BACf,0BAAAA,SAAC,QACC;AAAA,4BAAAA,SAAC,QAAG,OAAM,OAAM,WAAU,qGAAoG,oBAA9H;AAAA;AAAA;AAAA;AAAA,mBAAkI;AAAA,YAClI,gBAAAA,SAAC,QAAG,OAAM,OAAM,WAAU,qGAAoG,oBAA9H;AAAA;AAAA;AAAA;AAAA,mBAAkI;AAAA,YAClI,gBAAAA,SAAC,QAAG,OAAM,OAAM,WAAU,qGAAoG,wBAA9H;AAAA;AAAA;AAAA;AAAA,mBAAsI;AAAA,YACtI,gBAAAA,SAAC,QAAG,OAAM,OAAM,WAAU,qGAAoG,uBAA9H;AAAA;AAAA;AAAA;AAAA,mBAAqI;AAAA,eAJvI;AAAA;AAAA;AAAA;AAAA,iBAKA,KANF;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,UACA,gBAAAA,SAAC,WAAM,WAAU,2EACd,kBAAQ,IAAI,CAAC,QAAQ,QACpB,gBAAAA,SAAC,QAAa,WAAU,2CACtB;AAAA,4BAAAA,SAAC,QAAG,WAAU,wEAAwE,iBAAO,QAA7F;AAAA;AAAA;AAAA;AAAA,mBAAkG;AAAA,YAClG,gBAAAA,SAAC,QAAG,WAAU,wEAAwE,iBAAO,QAA7F;AAAA;AAAA;AAAA;AAAA,mBAAkG;AAAA,YAClG,gBAAAA,SAAC,QAAG,WAAU,wEAAwE,iBAAO,WAAW,QAAQ,QAAhH;AAAA;AAAA;AAAA;AAAA,mBAAqH;AAAA,YACrH,gBAAAA,SAAC,QAAG,WAAU,wEAAwE,iBAAO,gBAAgB,OAA7G;AAAA;AAAA;AAAA;AAAA,mBAAiH;AAAA,eAJ1G,KAAT;AAAA;AAAA;AAAA;AAAA,iBAKA,CACD,KARH;AAAA;AAAA;AAAA;AAAA,iBASA;AAAA,aAlBF;AAAA;AAAA;AAAA;AAAA,eAmBA,KApBF;AAAA;AAAA;AAAA;AAAA,eAqBA,KAtBF;AAAA;AAAA;AAAA;AAAA,eAuBA;AAAA,MAEJ;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAEA,SACE,gBAAAA,SAAC,SAAI,WAAU,wBACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,yFACb,0BAAAA,SAAC,QAAG,WAAU,2DACX,UAAAO,WAAU,SAAS,KADtB;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IAEA,gBAAAP,SAAC,SAAI,WAAU,gCACb;AAAA,sBAAAA,SAAC,SAAI,WAAU,2DACb,0BAAAA;AAAA,QAAC;AAAA;AAAA,UACC;AAAA,UACA;AAAA,UACA,aAAa;AAAA;AAAA,QAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA,KALF;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,MACA,gBAAAA,SAAAD,WAAA,EACE;AAAA,wBAAAC,SAAC,SAAI,WAAU,sCACZ,2BAAiB,KADpB;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,KAAK,gBAAgB,OAAO,KAAK,KAAK,WAAW,IAAI;AAAA,YACrD;AAAA,YACA,QAAQ,gBAAgB;AAAA,YACxB,SAAS,MAAM,eAAe,IAAI;AAAA,YAClC;AAAA;AAAA,UALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMA;AAAA,WAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,SAnBF;AAAA;AAAA;AAAA;AAAA,WAoBA;AAAA,OA3BF;AAAA;AAAA;AAAA;AAAA,SA4BA;AAEJ;;;AOvPA;AAAA;AAAA,gBAAAQ;AAAA;AAAA,SAAS,QAAAC,cAAqC;AAC9C,SAAS,KAAAC,UAAS;AAIlB,SAAS,MAAAC,WAAU;AAGnB,IAAM,cAAcC,GAAE,OAAO;AAAA,EAC3B,cAAcA,GAAE,OAAO;AAAA,EACvB,OAAOA,GAAE,OAAO,EAAE,IAAI,CAAC;AACzB,CAAC;AAED,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAMC,QAAO,MAAM,YAAY,OAAO;AAEtC,MAAI,QAAQ,WAAW;AACrB,UAAMC,OAAK,EAAE,OAAO,qBAAqB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAG7D,MAAM,EAAE,cAAc,MAAM,IAAI,YAAY,MAAM,MAAM,QAAQ,KAAK,CAAC,GAGhE,aAAa,MAAM,GAAG,MAAM,oBAAoB,UAAU;AAAA,IAC9D,OAAOC,IAAG,oBAAoB,IAAI,YAAY;AAAA,IAC9C,MAAM;AAAA,MACJ,cAAc;AAAA,QACZ,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,OAAOA,IAAG,oBAAoB,QAAQF,MAAK,EAAE;AAAA,UAC/C;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,MAAI,CAAC,cAAc,CAAC,WAAW,aAAa,QAAQ;AAClD,UAAMC,OAAK,EAAE,OAAO,uBAAuB,GAAG,EAAE,QAAQ,IAAI,CAAC;AAK/D,MAAME,QAAO,MADG,kBAAkB,YAAY,EACnB,cAAc,YAAY,GAG/C,YAAY,KAAK,IAAI,GACvB,QACA,OACA,SAAS;AAEb,MAAI;AACF,QAAM,SAAS,MAAMA,MAAK,QAAQ;AAClC,QAAI;AACF,eAAS,MAAM,OAAO,MAAM,KAAK;AAAA,IACnC,SAAS,GAAP;AACA,cAAQ,EAAE,SACV,SAAS,SACT,SAAS;AAAA,IACX,UAAE;AACA,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF,SAAS,GAAP;AACA,YAAQ,EAAE,SACV,SAAS,SACT,SAAS;AAAA,EACX;AAGA,MAAM,kBADU,KAAK,IAAI,IACS;AAalC,MAVA,MAAM,GAAG,OAAO,YAAY,EAAE,OAAO;AAAA,IACnC,gBAAgB,WAAW;AAAA,IAC3B;AAAA,IACA,QAAQH,MAAK;AAAA,IACb;AAAA,IACA,iBAAiB,gBAAgB,SAAS;AAAA,IAC1C;AAAA,IACA,OAAO,SAAS;AAAA,EAClB,CAAC,GAEG;AACF,UAAMC,OAAK,EAAE,MAAM,GAAG,EAAE,QAAQ,IAAI,CAAC;AAGvC,SAAOA,OAAK;AAAA,IACV,MAAM,OAAO;AAAA,IACb,UAAU,OAAO;AAAA,IACjB,QAAQ,OAAO,OAAO,IAAI,QAAM;AAAA,MAC9B,MAAM,EAAE;AAAA,MACR,YAAY,EAAE;AAAA,IAChB,EAAE;AAAA,IACF;AAAA,EACF,CAAC;AACH;;;AC9FA;AAAA;AAAA;AAAA,gBAAAG;AAAA,EAAA,YAAAC;AAAA;AAAA,SAAS,QAAAC,cAAwD;AACjE,SAAS,iBAAAC,sBAAqB;AAC9B,SAAS,YAAAC,iBAAgB;;;ACFzB,SAAS,QAAAC,aAAY;AAErB,SAAS,aAAAC,kBAA6B;AAsC1B,mBAAAC,gBAAA;AAhCZ,SAAS,YAAY,OAAuB;AAC1C,MAAM,QAAQ,CAAC,KAAK,MAAM,MAAM,MAAM,IAAI,GACtC,OAAO,OACP,YAAY;AAEhB,SAAO,QAAQ,QAAQ,YAAY,MAAM,SAAS;AAChD,YAAQ,MACR;AAGF,SAAO,GAAG,KAAK,QAAQ,CAAC,KAAK,MAAM,SAAS;AAC9C;AAEA,SAAS,aAAa,KAAqB;AACzC,SAAI,CAAC,OAAO,MAAM,IAAU,MACrB,IAAI,KAAK,aAAa,EAAE,OAAO,GAAG;AAC3C;AAEA,SAAS,gBAAgB,MAAsB;AAC7C,SAAOD,WAAU,KAAK,YAAY,CAAC;AACrC;AAEO,SAAS,UAAU,EAAE,OAAO,GAAmB;AACpD,SACE,gBAAAC,SAAC,SAAI,WAAU,wDACZ,iBAAO,IAAI,CAAC,UACX,gBAAAA;AAAA,IAACF;AAAA,IAAA;AAAA,MAEC,IAAI,IAAI,MAAM;AAAA,MACd,WAAU;AAAA,MAEV;AAAA,wBAAAE,SAAC,SAAI,WAAU,0CACb;AAAA,0BAAAA,SAAC,QAAG,WAAU,sKACX,0BAAgB,MAAM,IAAI,KAD7B;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,gBAAAA,SAAC,UAAK,WAAU,gJACd,0BAAAA,SAAC,SAAI,WAAU,WAAU,MAAK,QAAO,QAAO,gBAAe,SAAQ,aACjE,0BAAAA,SAAC,UAAK,eAAc,SAAQ,gBAAe,SAAQ,aAAa,GAAG,GAAE,qIAArE;AAAA;AAAA;AAAA;AAAA,iBAAuM,KADzM;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,aARF;AAAA;AAAA;AAAA;AAAA,eASA;AAAA,QACA,gBAAAA,SAAC,SAAI,WAAU,aACb;AAAA,0BAAAA,SAAC,SAAI,WAAU,qBACb;AAAA,4BAAAA,SAAC,OAAE,WAAU,4CACX;AAAA,8BAAAA,SAAC,UAAK,WAAU,aAAa,gBAAM,QAAQ,UAA3C;AAAA;AAAA;AAAA;AAAA,qBAAkD;AAAA,cAAQ;AAAA,cAC1D,gBAAAA,SAAC,UAAK,WAAU,2CAA0C,uBAA1D;AAAA;AAAA;AAAA;AAAA,qBAAiE;AAAA,iBAFnE;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,YACA,gBAAAA,SAAC,SAAI,WAAU,gDAAf;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAAA,YAC5D,gBAAAA,SAAC,OAAE,WAAU,4CACX;AAAA,8BAAAA,SAAC,UAAK,WAAU,aAAa,uBAAa,MAAM,QAAQ,KAAxD;AAAA;AAAA;AAAA;AAAA,qBAA0D;AAAA,cAAQ;AAAA,cAClE,gBAAAA,SAAC,UAAK,WAAU,2CAA0C,oBAA1D;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAAA,iBAFhE;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,YACA,gBAAAA,SAAC,SAAI,WAAU,gDAAf;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAAA,YAC5D,gBAAAA,SAAC,OAAE,WAAU,4CACX;AAAA,8BAAAA,SAAC,UAAK,WAAU,aAAa,sBAAY,MAAM,WAAW,KAA1D;AAAA;AAAA;AAAA;AAAA,qBAA4D;AAAA,cAAQ;AAAA,cACpE,gBAAAA,SAAC,UAAK,WAAU,2CAA0C,oBAA1D;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAAA,iBAFhE;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,eAdF;AAAA;AAAA;AAAA;AAAA,iBAeA;AAAA,UACC,MAAM,QAAQ,MAAM,UAAU,KAAK,MAAM,WAAW,SAAS,KAC5D,gBAAAA,SAAC,OAAE,WAAU,qDACX;AAAA,4BAAAA,SAAC,UAAK,WAAU,gDAA+C,4BAA/D;AAAA;AAAA;AAAA;AAAA,mBAA2E;AAAA,YAAQ;AAAA,YACnF,gBAAAA,SAAC,UAAK,WAAU,kDACb,gBAAM,WAAW,IAAI,eAAe,EAAE,KAAK,IAAI,KADlD;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,eAJF;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA,aAvBJ;AAAA;AAAA;AAAA;AAAA,eAyBA;AAAA,QACA,gBAAAA,SAAC,SAAI,WAAU,uEACb;AAAA,0BAAAA,SAAC,UAAK,0BAAN;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAAA,UAChB,gBAAAA,SAAC,SAAI,WAAU,6EAA4E,MAAK,QAAO,QAAO,gBAAe,SAAQ,aACnI,0BAAAA,SAAC,UAAK,eAAc,SAAQ,gBAAe,SAAQ,aAAa,GAAG,GAAE,kBAArE;AAAA;AAAA;AAAA;AAAA,iBAAoF,KADtF;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA;AAAA;AAAA,IA7CK,MAAM;AAAA,IADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,CACD,KAlDH;AAAA;AAAA;AAAA;AAAA,SAmDA;AAEJ;;;AC5EM,mBAAAC,gBAAA;AAHC,SAAS,cAAc,EAAE,SAAS,GAAuB;AAC9D,SACE,gBAAAA,SAAC,SAAI,WAAU,yCACb,0BAAAA,SAAC,SAAI,WAAU,uFACZ,YADH;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;;;AF2BU,mBAAAC,gBAAA;AAlCH,IAAMC,QAAqB,MACzB;AAAA,EACL,EAAE,OAAO,cAAc;AAAA,EACvB,EAAE,MAAM,eAAe,SAAS,6BAA6B;AAC/D;AAGF,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAI;AACF,QAAM,EAAE,aAAAC,aAAY,IAAI,MAAM,uEACxB,SAAS,MAAMA,aAAY;AACjC,WAAOC,OAAK,EAAE,OAAO,CAAC;AAAA,EACxB,SAAS,OAAP;AACA,mBAAQ,MAAM,yBAAyB,KAAK,GACrCA,OAAK,EAAE,QAAQ,CAAC,EAAE,CAAC;AAAA,EAC5B;AACF;AAMe,SAAR,QAAyB;AAC9B,MAAM,EAAE,OAAO,IAAIC,eAA0B,GACvC,CAAC,YAAY,aAAa,IAAIC,UAAS,EAAE,GAEzC,iBAAiB,OAAO;AAAA,IAAO,CAAC,UACpC,MAAM,KAAK,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC;AAAA,EAC5D;AAEA,SACE,gBAAAN,SAAC,iBACC;AAAA,oBAAAA,SAAC,SAAI,WAAU,qEACb,0BAAAA,SAAC,SAAI,WAAU,YACb;AAAA,sBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,aAAY;AAAA,UACZ,OAAO;AAAA,UACP,UAAU,CAAC,MAAM,cAAc,EAAE,OAAO,KAAK;AAAA,UAC7C,WAAU;AAAA;AAAA,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,MACA,gBAAAA,SAAC,SAAI,WAAU,wEACb,0BAAAA,SAAC,SAAI,WAAU,yBAAwB,OAAM,8BAA6B,SAAQ,aAAY,MAAK,gBACjG,0BAAAA,SAAC,UAAK,UAAS,WAAU,GAAE,oHAAmH,UAAS,aAAvJ;AAAA;AAAA;AAAA;AAAA,aAAiK,KADnK;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SAZF;AAAA;AAAA;AAAA;AAAA,WAaA,KAdF;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,IACA,gBAAAA,SAAC,aAAU,QAAQ,kBAAnB;AAAA;AAAA;AAAA;AAAA,WAAmC;AAAA,OAjBrC;AAAA;AAAA;AAAA;AAAA,SAkBA;AAEJ;;;AG1DA;AAAA;AAAA,gBAAAO;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAAA,SAAS,QAAAC,QAAM,YAAAC,iBAAgB;AAE/B,SAAS,QAAAC,OAAM,QAAAC,OAAM,iBAAAC,sBAAqB;;;ACF1C,SAAS,8BAAAC,6BAA4B,YAAAC,iBAAgB;AACrD,YAAYC,aAAY;AAGxB,SAAS,MAAAC,WAAU;AAKZ,IAAMC,kBAAiBC,4BAA2B;AAAA,EACvD,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS,CAAC,QAAQ,IAAI,kBAAkB,8BAA8B;AAAA,IACtE,QAAQ;AAAA,EACV;AACF,CAAC,GAEK,mBAAmB,UACnB,iBAAiB,KAAK,KAAK,KAAK;AAEtC,eAAsB,WAAW,OAAe,UAAiC;AAC/E,MAAM,iBAAiB,MAAa,aAAK,UAAU,EAAE;AAIrD,MAFqB,MAAM,GAAG,MAAM,KAAK,EAAE,MAAMF,IAAG,MAAM,OAAO,KAAK,CAAC,EAAE,IAAI;AAG3E,UAAM,IAAI,MAAM,qBAAqB;AAWvC,UARe,MAAM,GAAG,OAAO,KAAK,EAAE,OAAO;AAAA,IAC3C;AAAA,IACA,MAAM,MAAM,MAAM,GAAG,EAAE,CAAC;AAAA;AAAA,IACxB,cAAc;AAAA,IACd,WAAW,oBAAI,KAAK;AAAA,IACpB,WAAW,oBAAI,KAAK;AAAA,EACtB,CAAC,EAAE,UAAU,GAEC,CAAC;AACjB;AAiBA,eAAsBG,mBAAkB;AAAA,EACtC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAKG;AACD,MAAM,UAAU,MAAM,WAAW,OAAO;AACxC,iBAAQ,IAAI,kBAAkB,MAAM,GAE7BC,UAAS,YAAY;AAAA,IAC1B,SAAS;AAAA,MACP,cAAc,MAAMC,gBAAe,cAAc,SAAS;AAAA,QACxD,QAAQ,WAAW,iBAAiB;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;AAEA,eAAsBC,gBAAe,SAAkB;AACrD,SAAOD,gBAAe,WAAW,QAAQ,QAAQ,IAAI,QAAQ,CAAC;AAChE;AAwCA,eAAsB,WAAW,SAAkB;AACjD,MAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ;AAC3C,SAAOE,gBAAe,WAAW,MAAM;AACzC;AAEO,SAAS,iBAAiB,UAAiC;AAChE,SAAI,SAAS,SAAS,IACb,2CAGJ,KAAK,KAAK,QAAQ,IAIlB,QAAQ,KAAK,QAAQ,IAIrB,QAAQ,KAAK,QAAQ,IAInB,OAHE,wDAJA,wDAJA;AAYX;;;ADpDY,mBAAAC,gBAAA;AAzFZ,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAE5D,SADa,MAAMC,gBAAe,OAAO,IACxBC,UAAS,GAAG,IACtBC,OAAK,CAAC,CAAC;AAChB;AAEA,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAM,WAAW,MAAM,QAAQ,SAAS,GAClC,QAAQ,SAAS,IAAI,OAAO,GAC5B,WAAW,SAAS,IAAI,UAAU,GAClC,kBAAkB,SAAS,IAAI,iBAAiB;AAEtD,MAAI,CAAC,SAAS,CAAC,YAAY,CAAC;AAC1B,WAAOD;AAAA,MACL;AAAA,QACE,QAAQ;AAAA,UACN,OAAQ,QAA8B,OAAtB;AAAA,UAChB,UAAW,WAAoC,OAAzB;AAAA,UACtB,iBAAkB,kBAAwD,OAAtC;AAAA,QACtC;AAAA,MACF;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAGF,MAAI,OAAO,SAAU,YAAY,OAAO,YAAa,YAAY,OAAO,mBAAoB;AAC1F,WAAOA;AAAA,MACL;AAAA,QACE,QAAQ;AAAA,UACN,OAAO,OAAO,SAAU,WAAW,kBAAkB;AAAA,UACrD,UAAU,OAAO,YAAa,WAAW,qBAAqB;AAAA,UAC9D,iBAAiB,OAAO,mBAAoB,WAAW,kCAAkC;AAAA,QAC3F;AAAA,MACF;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAGF,MAAM,SAAS;AAAA,IACb,OAAO;AAAA,IACP,UAAU;AAAA,IACV,iBAAiB;AAAA,EACnB;AAGA,EADmB,6BACH,KAAK,KAAK,MACxB,OAAO,QAAQ;AAGjB,MAAM,gBAAgB,MAAM,iBAAiB,QAAQ;AASrD,MARI,kBACF,OAAO,WAAW,gBAGhB,aAAa,oBACf,OAAO,kBAAkB,2BAGvB,OAAO,OAAO,MAAM,EAAE,KAAK,OAAO;AACpC,WAAOA,OAAK,EAAE,OAAO,GAAG,EAAE,QAAQ,IAAI,CAAC;AAGzC,MAAI;AACF,QAAME,QAAO,MAAM,WAAW,OAAO,QAAQ;AAC7C,WAAOC,mBAAkB;AAAA,MACvB;AAAA,MACA,QAAQD,MAAK;AAAA,MACb,UAAU;AAAA,MACV,YAAY;AAAA,IACd,CAAC;AAAA,EACH,SAAS,OAAP;AACA,QAAI,iBAAiB,SAAS,MAAM,YAAY;AAC9C,aAAOF;AAAA,QACL,EAAE,QAAQ,EAAE,OAAO,wCAAwC,EAAE;AAAA,QAC7D,EAAE,QAAQ,IAAI;AAAA,MAChB;AAEF,UAAM;AAAA,EACR;AACF;AAEe,SAAR,SAA0B;AAC/B,MAAM,aAAaI,eAA6B;AAEhD,SACE,gBAAAR,SAAC,SAAI,WAAU,4DACb,0BAAAA,SAAC,SAAI,WAAU,mBACb,0BAAAA,SAAC,SAAI,WAAU,gDACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,oBACb;AAAA,sBAAAA,SAAC,QAAG,WAAU,sBAAqB,iCAAnC;AAAA;AAAA;AAAA;AAAA,aAAoD;AAAA,MACpD,gBAAAA,SAAC,OAAE,WAAU,iBAAgB,6CAA7B;AAAA;AAAA;AAAA;AAAA,aAA0D;AAAA,SAF5D;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEA,gBAAAA,SAACS,OAAA,EAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,sBAAAT,SAAC,SACC;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,UAAQ;AAAA,YACR,WAAW;AAAA,YACX,cAAa;AAAA,YACb,gBAAc,YAAY,QAAQ,QAAQ,KAAO;AAAA,YACjD,oBAAiB;AAAA,YACjB,WAAU;AAAA;AAAA,UATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA;AAAA,QACC,YAAY,QAAQ,SACnB,gBAAAA,SAAC,SAAI,WAAU,qBAAoB,IAAG,eACnC,qBAAW,OAAO,SADrB;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WArBJ;AAAA;AAAA;AAAA;AAAA,aAuBA;AAAA,MAEA,gBAAAA,SAAC,SACC;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,UAAQ;AAAA,YACR,cAAa;AAAA,YACb,gBAAc,YAAY,QAAQ,WAAW,KAAO;AAAA,YACpD,oBAAiB;AAAA,YACjB,WAAU;AAAA;AAAA,UARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA,QACC,YAAY,QAAQ,YACnB,gBAAAA,SAAC,SAAI,WAAU,qBAAoB,IAAG,kBACnC,qBAAW,OAAO,YADrB;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WApBJ;AAAA;AAAA;AAAA;AAAA,aAsBA;AAAA,MAEA,gBAAAA,SAAC,SACC;AAAA,wBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAQ;AAAA,YACR,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,IAAG;AAAA,YACH,UAAQ;AAAA,YACR,cAAa;AAAA,YACb,gBAAc,YAAY,QAAQ,kBAAkB,KAAO;AAAA,YAC3D,oBAAiB;AAAA,YACjB,WAAU;AAAA;AAAA,UARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA,QACC,YAAY,QAAQ,mBACnB,gBAAAA,SAAC,SAAI,WAAU,qBAAoB,IAAG,yBACnC,qBAAW,OAAO,mBADrB;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WApBJ;AAAA;AAAA;AAAA;AAAA,aAsBA;AAAA,MAEA,gBAAAA,SAAC,SACC,0BAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,WAAU;AAAA,UACX;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,KANF;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,SAjFF;AAAA;AAAA;AAAA;AAAA,WAkFA;AAAA,IAEA,gBAAAA,SAAC,SAAI,WAAU,0CAAyC;AAAA;AAAA,MAC7B;AAAA,MACzB,gBAAAA;AAAA,QAACU;AAAA,QAAA;AAAA,UACC,IAAG;AAAA,UACH,WAAU;AAAA,UACX;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,SAPF;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAlGF;AAAA;AAAA;AAAA;AAAA,SAmGA,KApGF;AAAA;AAAA;AAAA;AAAA,SAqGA,KAtGF;AAAA;AAAA;AAAA;AAAA,SAuGA;AAEJ;;;AEnMA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA;AAAA,SAAS,YAAAC,iBAAgB;AACzB,SAAS,UAAAC,eAAc;;;ACmBf,mBAAAC,gBAAA;AAfR,IAAM,cAAc;AAAA,EAClB,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AACN;AAEO,SAAS,eAAe,EAAE,OAAO,MAAM,YAAY,GAAG,GAAwB;AACnF,SACE,gBAAAA,SAAC,SAAI,MAAK,UAAS,WACjB;AAAA,oBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,WAAW,GAAG,YAAY,IAAI;AAAA,QAC9B,SAAQ;AAAA,QACR,MAAK;AAAA,QACL,OAAM;AAAA,QAEN;AAAA,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,GAAE;AAAA,cACF,MAAK;AAAA;AAAA,YAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAGA;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,GAAE;AAAA,cACF,MAAK;AAAA;AAAA,YAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAGA;AAAA;AAAA;AAAA,MAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA;AAAA,IACA,gBAAAA,SAAC,UAAK,WAAU,WAAU,0BAA1B;AAAA;AAAA;AAAA;AAAA,WAAoC;AAAA,OAhBtC;AAAA;AAAA;AAAA;AAAA,SAiBA;AAEJ;;;AChCA,SAAS,aAAa,iBAAiB,yBAAyB,6BAA6B;AAgDnF,mBAAAC,gBAAA;AAvCV,IAAM,cAAc;AAAA,EAClB,OAAO;AAAA,IACL,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,EACR;AAAA,EACA,SAAS;AAAA,IACP,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,EACR;AAAA,EACA,SAAS;AAAA,IACP,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,EACR;AAAA,EACA,MAAM;AAAA,IACJ,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,MAAM;AAAA,EACR;AACF;AAEO,SAAS,MAAM,EAAE,MAAM,OAAO,SAAS,YAAY,GAAG,GAAe;AAC1E,MAAM,SAAS,YAAY,IAAI,GACzB,OAAO,OAAO;AAEpB,SACE,gBAAAA,SAAC,SAAI,WAAW,kBAAkB,OAAO,aAAa,aACpD,0BAAAA,SAAC,SAAI,WAAU,QACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,iBACb,0BAAAA,SAAC,QAAK,WAAW,WAAW,OAAO,QAAQ,eAAY,UAAvD;AAAA;AAAA;AAAA;AAAA,WAA8D,KADhE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,gBAAAA,SAAC,SAAI,WAAU,QACb;AAAA,sBAAAA,SAAC,QAAG,WAAW,uBAAuB,OAAO,SAAU,mBAAvD;AAAA;AAAA;AAAA;AAAA,aAA6D;AAAA,MAC5D,WACC,gBAAAA,SAAC,SAAI,WAAW,gBAAgB,OAAO,WACrC,0BAAAA,SAAC,OAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,aAAY,KADd;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SALJ;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OAXF;AAAA;AAAA;AAAA;AAAA,SAYA,KAbF;AAAA;AAAA;AAAA;AAAA,SAcA;AAEJ;;;AFtDA,SAAS,QAAAC,cAAqC;AAC9C,SAAS,iBAAAC,gBAAe,QAAAC,OAAM,eAAe,iBAAAC,sBAAqB;;;AGHlE,SAAS,YAAAC,iBAAgB;AAEzB,IAAM,wBAAwB,KACxB,WAAW,KASJ,cAAN,MAAkB;AAAA,EAIf,cAAc;AACpB,SAAK,oBAAoB,kBAAkB,YAAY;AAAA,EACzD;AAAA,EAEA,OAAc,cAA2B;AACvC,WAAK,YAAY,aACf,YAAY,WAAW,IAAI,YAAY,IAElC,YAAY;AAAA,EACrB;AAAA,EAEA,MAAc,YACZ,SACAC,MACA,WACA,QACA;AACA,QAAM,gBAAgB,KAAK,IAAI,IAAI;AAEnC,UAAM,GAAG,OAAOC,aAAY,EAAE,OAAO;AAAA,MACnC,IAAIF,UAAS;AAAA,MACb,cAAc,QAAQ;AAAA,MACtB,QAAQ,QAAQ;AAAA,MAChB,OAAOC;AAAA,MACP,QAAQ,OAAO,UAAU,YAAY;AAAA,MACrC,OAAO,OAAO;AAAA,MACd,iBAAiB,cAAc,SAAS;AAAA,MACxC,UAAU,OAAO,UAAU,SAAS;AAAA,IACtC,CAAC;AAAA,EACH;AAAA,EAEA,MAAa,aACXA,MACA,SACsB;AACtB,QAAM,YAAY,KAAK,IAAI,GAErB,SAAS,OADF,MAAM,KAAK,kBAAkB,cAAc,QAAQ,YAAY,GAClD,QAAQ;AAElC,QAAI;AAEF,UAAM,UAAU,QAAQ,WAAW;AACnC,YAAM,OAAO,MAAM,2BAA2B,SAAS;AAGvD,UAAM,UAAU,QAAQ,WAAW,UAC7B,aAAa,KAAK,YAAYA,MAAK,OAAO,GAE1C,SAAS,MAAM,OAAO,MAAM,UAAU;AAE5C,mBAAM,KAAK,YAAY,SAASA,MAAK,WAAW;AAAA,QAC9C,SAAS;AAAA,QACT,UAAU,OAAO;AAAA,MACnB,CAAC,GAEM;AAAA,QACL,MAAM,OAAO;AAAA,QACb,QAAQ,OAAO,OAAO,IAAI,YAAU;AAAA,UAClC,MAAM,MAAM;AAAA,UACZ,YAAY,MAAM;AAAA,QACpB,EAAE;AAAA,MACJ;AAAA,IACF,SAAS,OAAP;AACA,kBAAM,KAAK,YAAY,SAASA,MAAK,WAAW;AAAA,QAC9C,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAClD,CAAC,GACK;AAAA,IACR,UAAE;AACA,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AAAA,EAEQ,YAAYA,MAAa,OAAuB;AACtD,QAAM,gBAAgBA,KAAI,KAAK,EAAE,YAAY;AAQ7C,WALI,CAAC,cAAc,WAAW,QAAQ,KAKlC,cAAc,SAAS,OAAO,IACzBA,OAGF,GAAGA,cAAa;AAAA,EACzB;AACF;;;AC7GA,SAAS,WAAW;AACpB,SAAS,eAAe;;;ACDxB,SAAS,aAAAE,YAAW,YAAAC,iBAAgB;AAE7B,SAASC,YAAW;AACzB,MAAM,CAAC,QAAQ,SAAS,IAAID,UAAS,EAAK;AAE1C,SAAAD,WAAU,MAAM;AAEd,QAAM,qBAAqB,OAAO,WAAW,8BAA8B;AAC3E,cAAU,mBAAmB,OAAO;AAGpC,QAAM,WAAW,CAAC,MAA2B,UAAU,EAAE,OAAO;AAChE,8BAAmB,iBAAiB,UAAU,QAAQ,GAE/C,MAAM,mBAAmB,oBAAoB,UAAU,QAAQ;AAAA,EACxE,GAAG,CAAC,CAAC,GAEE,EAAE,OAAO;AAClB;;;ADfA,SAAS,kBAA8B;AACvC,SAAoB,mBAAgC;AACpD,SAAS,eAAAG,cAAa,aAAAC,YAAW,QAAQ,WAAAC,gBAAe;AACxD,SAAS,kBAAkB;AAC3B,SAAS,QAAQ,kBAA8B;AAC/C,SAAS,sBAA2D;AA8PhE,mBAAAC,gBAAA;AAhPJ,IAAM,eAAe;AAAA,EACnB;AAAA,EAAU;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAY;AAAA,EAAY;AAAA,EACnD;AAAA,EAAQ;AAAA,EAAa;AAAA,EAAc;AAAA,EAAc;AAAA,EACjD;AAAA,EAAe;AAAA,EAAU;AAAA,EAAU;AAAA,EAAO;AAAA,EAC1C;AAAA,EAAgB;AAAA,EAAe;AAAA,EAAc;AAAA,EAC7C;AAAA,EAAS;AAAA,EAAQ;AAAA,EAAY;AAAA,EAAW;AAAA,EACxC;AAAA,EAAe;AAAA,EAAe;AAAA,EAAY;AAAA,EAAU;AAAA,EACpD;AAAA,EAAS;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EAAO;AAAA,EACrC;AAAA,EAAO;AAAA,EAAM;AAAA,EAAM;AAAA,EAAU;AAAA,EAAQ;AAAA,EACrC;AAAA,EAAO;AAAA,EAAQ;AAAA,EAAS;AAAA,EAAU;AACpC;AAEA,SAAS,kBAAkB,SAA4B,QAAiD;AAEtG,MAAM,cAAc,QAAQ,YAAY,MAAM,GACxC,eAAe,QAAQ,MAAM,IAAI,YAAY,KAAK,IAAI,GAAG,QAAQ,MAAM,CAAC,GAAG,QAAQ,GAAG;AAO5F,MAJI,CAAC,QAAQ,YAAY,iBAAiB,OAAO,iBAAiB,OAI9D,CAAC;AAAa,WAAO;AAGzB,MAAM,WADa,QAAQ,MAAM,IAAI,YAAY,GAAG,QAAQ,GAAG,EACnC,MAAM,KAAK,EAAE,IAAI,GAAG,YAAY,KAAK,IAE7D,UAAU,CAAC;AASf,MANA,QAAQ,KAAK,GAAG,aAAa,IAAI,cAAY;AAAA,IAC3C,OAAO;AAAA,IACP,MAAM;AAAA,IACN,OAAO;AAAA,EACT,EAAE,CAAC,GAEC,QAAQ;AAEV,IAAI,CAAC,QAAQ,QAAQ,UAAU,MAAM,EAAE,SAAS,QAAQ,KACtD,QAAQ,KAAK,GAAG,OAAO,IAAI,YAAU;AAAA,MACnC,OAAO,MAAM;AAAA,MACb,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM,GAAG,MAAM,QAAQ;AAAA,IACzB,EAAE,CAAC;AAIL,QAAM,eAAe,OAAO,KAAK,WAAS,aAAa,MAAM,KAAK,YAAY,CAAC;AAC/E,KAAI,CAAC,UAAU,SAAS,MAAM,IAAI,EAAE,SAAS,QAAQ,KAAK,gBAAgB,iBAAiB,QACzF,OAAO,QAAQ,WAAS;AACtB,YAAM,QAAQ,QAAQ,YAAU;AAC9B,gBAAQ,KAAK;AAAA,UACX,OAAO,OAAO;AAAA,UACd,MAAM;AAAA,UACN,OAAO;AAAA,UACP,MAAM,GAAG,MAAM,QAAQ,OAAO,SAAS,OAAO;AAAA,QAChD,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA;AAIL,SAAO;AAAA,IACL,MAAM,YAAY;AAAA,IAClB;AAAA,IACA,UAAU;AAAA,EACZ;AACF;AAEA,SAAS,kBAAkB;AACzB,SAAO,OAAO,CAAC,SAAS;AACtB,QAAMC,QAAO,KAAK,MAAM,IAAI,SAAS;AACrC,QAAI,CAACA,MAAK,KAAK;AAAG,aAAO,CAAC;AAE1B,QAAM,cAA4B,CAAC;AAGnC,IAAKA,MAAK,YAAY,EAAE,MAAM,uDAAuD,KACnF,YAAY,KAAK;AAAA,MACf,MAAM;AAAA,MACN,IAAIA,MAAK;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,IACX,CAAC;AAGH,QAAM,gBAAgBA,MAAK,MAAM,IAAI,KAAK,CAAC,GAAG,QACxC,gBAAgBA,MAAK,MAAM,IAAI,KAAK,CAAC,GAAG;AAC9C,WAAI,eAAe,MAAM,KACvB,YAAY,KAAK;AAAA,MACf,MAAM;AAAA,MACN,IAAIA,MAAK;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,IACX,CAAC,GAEC,eAAe,MAAM,KACvB,YAAY,KAAK;AAAA,MACf,MAAM;AAAA,MACN,IAAIA,MAAK;AAAA,MACT,UAAU;AAAA,MACV,SAAS;AAAA,IACX,CAAC,GAGI;AAAA,EACT,GAAG;AAAA,IACD,OAAO;AAAA;AAAA,EACT,CAAC;AACH;AAEA,IAAM,aAAa,WAAW,MAAM;AAAA,EAClC,KAAK;AAAA,IACH,iBAAiB;AAAA,EACnB;AAAA,EACA,eAAe;AAAA,IACb,iBAAiB;AAAA,IACjB,QAAQ;AAAA,EACV;AAAA,EACA,eAAe;AAAA,IACb,YAAY;AAAA,EACd;AAAA,EACA,2BAA2B;AAAA,IACzB,iBAAiB;AAAA,EACnB;AAAA,EACA,mBAAmB;AAAA,IACjB,OAAO;AAAA,EACT;AACF,CAAC;AAEM,SAAS,UAAU;AAAA,EACxB;AAAA,EACA;AAAA,EACA,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,SAAS;AAAA,EACT;AAAA,EACA;AACF,GAAmB;AACjB,MAAM,EAAE,OAAO,IAAIC,UAAS,GACtB,YAAY,OAAuB,IAAI,GACvC,UAAU,OAAmB,GAC7B,YAAYH,SAAQ,MAAM,gBAAgB,GAAG,CAAC,CAAC,GAC/C,mBAAmB,OAAO,EAAK,GAG/B,mBAAmBA,SAAQ,MAAM,IAAI,YAAY,GAAG,CAAC,CAAC,GACtD,kBAAkBA,SAAQ,MAAM,IAAI,YAAY,GAAG,CAAC,CAAC,GACrD,wBAAwBA,SAAQ,MAAM,IAAI,YAAY,GAAG,CAAC,CAAC,GAE3D,eAAeF,aAAY,MAAM;AACrC,QAAI,CAAC,UAAU;AAAS;AAExB,QAAM,iBAA8B;AAAA,MAClC;AAAA,MACA,IAAI;AAAA,MACJ,WAAW,eAAe,GAAG,CAAC,WAAuB;AACnD,YAAI,OAAO,YAAY;AACrB,2BAAiB,UAAU;AAC3B,cAAM,WAAW,OAAO,MAAM,IAAI,SAAS;AAC3C,mBAAS,QAAQ,GAEjB,WAAW,MAAM;AACf,6BAAiB,UAAU;AAAA,UAC7B,GAAG,CAAC;AAAA;AAAA,MAER,CAAC;AAAA,MACD,WAAW,MAAM;AAAA,QACf,KAAK;AAAA,UACH;AAAA,QACF;AAAA,MACF,CAAC;AAAA,MACD,iBAAiB,GAAG,SAAS,UAAU,UAAU;AAAA,MACjD,gBAAgB,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC;AAAA,IAC9C;AAGA,IAAI,UACF,eAAe;AAAA,MACb,sBAAsB;AAAA,QACpB,eAAe;AAAA,UACb,UAAU,CAAC,aAAW,kBAAkB,SAAS,MAAM,CAAC;AAAA,UACxD,aAAa;AAAA,UACb,eAAe;AAAA,UACf,oBAAoB;AAAA,UACpB,kBAAkB;AAAA,UAClB,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAGF,QAAM,OAAO,IAAI,WAAW;AAAA,MAC1B,KAAK;AAAA,MACL,YAAY;AAAA,MACZ,QAAQ,UAAU;AAAA,IACpB,CAAC;AAED,mBAAQ,UAAU,MAEX,MAAM;AACX,WAAK,QAAQ;AAAA,IACf;AAAA,EACF,GAAG,CAAC,UAAU,QAAQ,QAAQ,QAAQ,SAAS,CAAC;AAGhD,SAAAC,WAAU,MAAM;AACd,QAAM,OAAO,QAAQ;AACrB,IAAI,QACF,KAAK,SAAS;AAAA,MACZ,SAAS,iBAAiB,YAAY,SAAS,UAAU,UAAU;AAAA,IACrE,CAAC;AAAA,EAEL,GAAG,CAAC,MAAM,CAAC,GAGXA,WAAU,MAAM;AACd,QAAM,OAAO,QAAQ;AACrB,QAAI,CAAC,iBAAiB,WAAW,QAAQ,KAAK,MAAM,IAAI,SAAS,MAAM,OAAO;AAC5E,UAAM,cAAc,KAAK,MAAM,OAAO;AAAA,QACpC,SAAS;AAAA,UACP,MAAM;AAAA,UACN,IAAI,KAAK,MAAM,IAAI;AAAA,UACnB,QAAQ;AAAA,QACV;AAAA,QACA,WAAW,KAAK,MAAM;AAAA,MACxB,CAAC;AACD,WAAK,SAAS,WAAW;AAAA;AAAA,EAE7B,GAAG,CAAC,KAAK,CAAC,GAGVA,WAAU,MAAM;AACd,QAAI,UAAU;AACZ,aAAO,aAAa;AAAA,EAExB,GAAG,CAAC,YAAY,CAAC,GAGf,gBAAAE;AAAA,IAAC;AAAA;AAAA,MACC,KAAK;AAAA,MACL,WAAW,iFAAiF;AAAA,MAC5F,OAAO,EAAE,OAAO;AAAA;AAAA,IAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAIA;AAEJ;;;AJhQA;AA0EQ,SAiHU,YAAAG,WAjHV,UAAAC,gBAAA;AA/DR,eAAsBC,UAAS;AAC7B,MAAM,SAAS,MAAM,YAAY;AACjC,SAAOC,OAAiB,EAAE,OAAO,CAAC;AACpC;AAEA,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAM,WAAW,MAAM,QAAQ,SAAS,GAClC,QAAQ,SAAS,IAAI,OAAO,GAC5B,eAAe,SAAS,IAAI,cAAc;AAEhD,MAAI,CAAC,OAAO,KAAK;AACf,WAAOD,OAAiB,EAAE,OAAO,oBAAoB,CAAC;AAGxD,MAAI,CAAC;AACH,WAAOA,OAAiB,EAAE,OAAO,kCAAkC,CAAC;AAGtE,MAAI;AACF,QAAME,QAAO,MAAM,YAAY,OAAO,GAEhC,SAAS,MADK,YAAY,YAAY,EACX,aAAa,OAAO;AAAA,MACnD;AAAA,MACA,QAAQA,MAAK;AAAA,IACf,CAAC;AACD,WAAOF,OAAiB,EAAE,OAAO,CAAC;AAAA,EACpC,SAAS,OAAP;AACA,WAAOA,OAAiB;AAAA,MACtB,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IAClD,CAAC;AAAA,EACH;AACF;AAEe,SAAR,YAA6B;AAClC,MAAM,CAAC,OAAO,QAAQ,IAAIG,UAAS,EAAE,GAC/B,CAAC,cAAc,eAAe,IAAIA,UAAS,EAAK,GAChD,CAAC,aAAa,cAAc,IAAIA,UAAwB,IAAI,GAC5D,aAAaC,eAA0B,GACvC,EAAE,OAAO,IAAIC,eAA0B,GAEvC,cADa,cAAc,EACF,UAAU,cAEnC,eAAe,YAAY;AAC/B,QAAK,MAAM,KAAK,GAEhB;AAAA,sBAAgB,EAAI;AACpB,UAAI;AACF,YAAM,YAAYC,QAAO,OAAO,EAAE,UAAU,aAAa,CAAC;AAC1D,iBAAS,SAAS;AAAA,MACpB,SAAS,KAAP;AACA,gBAAQ,MAAM,2BAA2B,GAAG;AAAA,MAC9C,UAAE;AACA,wBAAgB,EAAK;AAAA,MACvB;AAAA;AAAA,EACF,GAEM,oBAAoB,CAAC,UAAyB;AAClD,mBAAe,KAAK;AAAA,EACtB,GAEM,cAAc,MACd,cAEA,gBAAAR;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,OAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAU;AAAA;AAAA,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAIA,YAAY,QAEZ,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,OAAM;AAAA,MACN,SAAS,WAAW;AAAA,MACpB,WAAU;AAAA;AAAA,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAIG,MAGH,gBAAgB,MAChB,cAEA,gBAAAA,SAAC,SAAI,WAAU,4DACb;AAAA,oBAAAA,SAAC,kBAAe,MAAK,QAArB;AAAA;AAAA;AAAA;AAAA,WAA0B;AAAA,IAC1B,gBAAAA,SAAC,OAAE,WAAU,2DAA0D,kCAAvE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAJF;AAAA;AAAA;AAAA;AAAA,SAKA,IAIC,YAAY,SAUb,WAAW,OAAO,KAAK,WAAW,IAElC,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,OAAM;AAAA,MACN,SAAQ;AAAA,MACR,WAAU;AAAA;AAAA,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAKF,gBAAAA,SAAC,SACC;AAAA,oBAAAA,SAAC,QAAG,WAAU,kFAAiF,uBAA/F;AAAA;AAAA;AAAA;AAAA,WAAsG;AAAA,IACtG,gBAAAA,SAAC,SAAI,WAAU,mBACb,0BAAAA,SAAC,WAAM,WAAU,+DACf;AAAA,sBAAAA,SAAC,WAAM,WAAU,kDACf,0BAAAA,SAAC,QACE,qBAAW,OAAO,QAAQ,IAAI,CAAC,UAC9B,gBAAAA;AAAA,QAAC;AAAA;AAAA,UAEC,WAAU;AAAA,UAET,gBAAM;AAAA;AAAA,QAHF,MAAM;AAAA,QADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,CACD,KARH;AAAA;AAAA;AAAA;AAAA,aASA,KAVF;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,MACA,gBAAAA,SAAC,WAAM,WAAU,sGACd,qBAAW,OAAO,MAAM,IAAI,CAAC,KAAK,aACjC,gBAAAA,SAAC,QAAkB,WAAU,8DAC1B,iBAAO,OAAO,GAAG,EAAE,IAAI,CAAC,OAAO,aAC9B,gBAAAA;AAAA,QAAC;AAAA;AAAA,UAEC,WAAU;AAAA,UAET,oBAAU,OAAO,SAAS,OAAO,KAAK;AAAA;AAAA,QAHlC;AAAA,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,CACD,KARM,UAAT;AAAA;AAAA;AAAA;AAAA,aASA,CACD,KAZH;AAAA;AAAA;AAAA;AAAA,aAaA;AAAA,SA1BF;AAAA;AAAA;AAAA;AAAA,WA2BA,KA5BF;AAAA;AAAA;AAAA;AAAA,WA6BA;AAAA,OA/BF;AAAA;AAAA;AAAA;AAAA,SAgCA,IApDE,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC,MAAK;AAAA,MACL,OAAM;AAAA,MACN,SAAQ;AAAA;AAAA,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAIA;AAoDN,SACE,gBAAAA,SAAC,iBACC;AAAA,oBAAAA,SAAC,SAAI,WAAU,uBACb,0BAAAA,SAAC,QAAG,WAAU,6EAA4E,yBAA1F;AAAA;AAAA;AAAA;AAAA,WAAmG,KADrG;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,gBAAAA,SAAC,SAAI,WAAU,sCACb,0BAAAA,SAAC,SAAI,WAAU,aACb;AAAA,sBAAAA,SAAC,SACC;AAAA,wBAAAA,SAAC,SAAI,WAAU,6BACb;AAAA,0BAAAA,SAAC,WAAM,SAAQ,SAAQ,WAAU,iFAAgF,yBAAjH;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,SAAS;AAAA,cACT,MAAK;AAAA,cACL,UAAU,gBAAgB,CAAC,MAAM,KAAK;AAAA,cACtC,WAAU;AAAA,cAET,yBACC,gBAAAA,SAAAD,WAAA,EACE;AAAA,gCAAAC,SAAC,kBAAe,MAAK,QAArB;AAAA;AAAA;AAAA;AAAA,uBAA0B;AAAA,gBAC1B,gBAAAA,SAAC,UAAK,6BAAN;AAAA;AAAA;AAAA;AAAA,uBAAmB;AAAA,mBAFrB;AAAA;AAAA;AAAA;AAAA,qBAGA,IAEA,gBAAAA,SAAC,UAAK,4BAAN;AAAA;AAAA;AAAA;AAAA,qBAAkB;AAAA;AAAA,YAZtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAcA;AAAA,aAlBF;AAAA;AAAA;AAAA;AAAA,eAmBA;AAAA,QACA,gBAAAA,SAACS,OAAA,EAAK,QAAO,QACX;AAAA,0BAAAT,SAAC,WAAM,MAAK,UAAS,MAAK,SAAQ,OAAO,SAAzC;AAAA;AAAA;AAAA;AAAA,iBAAgD;AAAA,UAC/C,YAAY;AAAA,UACb,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,OAAO;AAAA,cACP,UAAU;AAAA,cACV,SAAS;AAAA,cACT,WAAU;AAAA,cACV;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA;AAAA,UACA,gBAAAA,SAAC,SAAI,WAAU,QACb,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,UAAU,eAAe,CAAC,MAAM,KAAK;AAAA,cACrC,WAAU;AAAA,cAET,wBACC,gBAAAA,SAAAD,WAAA,EACE;AAAA,gCAAAC,SAAC,kBAAe,MAAK,MAAK,WAAU,gBAApC;AAAA;AAAA;AAAA;AAAA,uBAAiD;AAAA,gBACjD,gBAAAA,SAAC,UAAK,4BAAN;AAAA;AAAA;AAAA;AAAA,uBAAkB;AAAA,mBAFpB;AAAA;AAAA;AAAA;AAAA,qBAGA,IAEA,gBAAAA,SAAC,UAAK,6BAAN;AAAA;AAAA;AAAA;AAAA,qBAAmB;AAAA;AAAA,YAXvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAaA,KAdF;AAAA;AAAA;AAAA;AAAA,iBAeA;AAAA,aAzBF;AAAA;AAAA;AAAA;AAAA,eA0BA;AAAA,WA/CF;AAAA;AAAA;AAAA;AAAA,aAgDA;AAAA,MAEC,cAAc;AAAA,SAnDjB;AAAA;AAAA;AAAA;AAAA,WAoDA,KArDF;AAAA;AAAA;AAAA;AAAA,WAsDA;AAAA,OA3DF;AAAA;AAAA;AAAA;AAAA,SA4DA;AAEJ;;;AMlPA,IAAO,0BAAQ,EAAC,OAAQ,EAAC,QAAS,mCAAkC,SAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,kCAAkC,EAAC,GAAE,QAAS,EAAC,MAAO,EAAC,IAAK,QAAO,UAAW,QAAU,MAAO,IAAG,OAAQ,QAAU,eAAgB,QAAU,QAAS,2BAA0B,SAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,qBAAoB,EAAC,IAAK,qBAAoB,UAAW,QAAO,MAAO,cAAa,OAAQ,QAAU,eAAgB,QAAU,QAAS,wCAAuC,SAAU,CAAC,oCAAmC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,sBAAqB,EAAC,IAAK,sBAAqB,UAAW,QAAO,MAAO,SAAQ,OAAQ,QAAU,eAAgB,QAAU,QAAS,yCAAwC,SAAU,CAAC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,yBAAwB,EAAC,IAAK,yBAAwB,UAAW,QAAO,MAAO,YAAW,OAAQ,QAAU,eAAgB,QAAU,QAAS,4CAA2C,SAAU,CAAC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,QAAU,OAAQ,IAAK,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,0BAAyB,EAAC,IAAK,0BAAyB,UAAW,QAAO,MAAO,mBAAkB,OAAQ,QAAU,eAAgB,QAAU,QAAS,6CAA4C,SAAU,QAAU,WAAY,IAAK,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,oBAAmB,EAAC,IAAK,oBAAmB,UAAW,QAAO,MAAO,aAAY,OAAQ,QAAU,eAAgB,QAAU,QAAS,uCAAsC,SAAU,QAAU,WAAY,IAAK,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,wBAAuB,EAAC,IAAK,wBAAuB,UAAW,QAAO,MAAO,iBAAgB,OAAQ,QAAU,eAAgB,QAAU,QAAS,2CAA0C,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,4BAA2B,EAAC,IAAK,4BAA2B,UAAW,wBAAuB,MAAO,OAAM,OAAQ,QAAU,eAAgB,QAAU,QAAS,+CAA8C,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,2CAA0C,EAAC,IAAK,2CAA0C,UAAW,wBAAuB,MAAO,sBAAqB,OAAQ,QAAU,eAAgB,QAAU,QAAS,8DAA6D,SAAU,CAAC,oCAAmC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,4BAA2B,EAAC,IAAK,4BAA2B,UAAW,wBAAuB,MAAO,OAAM,OAAQ,QAAU,eAAgB,QAAU,QAAS,+CAA8C,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,gBAAe,EAAC,IAAK,gBAAe,UAAW,QAAO,MAAO,SAAQ,OAAQ,QAAU,eAAgB,QAAU,QAAS,mCAAkC,SAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,UAAS,OAAQ,QAAU,eAAgB,QAAU,QAAS,oCAAmC,SAAU,QAAU,WAAY,IAAK,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,EAAC,GAAE,SAAU,YAAW,KAAM,EAAC,SAAU,oCAAmC,WAAY,cAAa,GAAE,KAAM,8BAA6B;;;ACevrK,IAAM,OAAO,eAEP,uBAAuB,gBACvB,SAAS,EAAC,mBAAoB,IAAM,sBAAuB,IAAM,qBAAsB,IAAM,gBAAiB,IAAM,gBAAiB,IAAM,uBAAwB,IAAM,uBAAwB,GAAK,GACtM,aAAa,WACb,QAAQ,EAAE,QAAQ,qBAAY,GAC9B,SAAS;AAAA,EACpB,MAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,2CAA2C;AAAA,IACvC,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,4BAA4B;AAAA,IACxB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,4BAA4B;AAAA,IACxB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,0BAA0B;AAAA,IACtB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,yBAAyB;AAAA,IACrB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,wBAAwB;AAAA,IACpB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,sBAAsB;AAAA,IAClB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,qBAAqB;AAAA,IACjB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,oBAAoB;AAAA,IAChB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AACF;",
  "names": ["pkg", "Pool", "pool", "pool", "sql", "jsxDEV", "jsxDEV", "user", "organizationMembers", "databaseConnections", "user", "jsxDEV", "user", "loader", "json", "Form", "useLoaderData", "text", "timestamp", "pgTable", "uuid", "createId", "text", "timestamp", "pgTable", "uuid", "users", "organizations", "pgTable", "uuid", "createId", "text", "timestamp", "organizationMembers", "users", "eq", "createId", "organizations", "organizationMembers", "organizationMembers", "eq", "text", "timestamp", "pgTable", "jsonb", "uuid", "createId", "databaseConnections", "pgTable", "uuid", "createId", "text", "organizations", "users", "jsonb", "timestamp", "queryHistory", "eq", "pkg", "eq", "Pool", "pkg", "pool", "eq", "databaseConnections", "z", "useState", "Transition", "Form", "Fragment", "jsxDEV", "pkg", "Pool", "pool", "jsxDEV", "z", "loader", "user", "eq", "databaseConnections", "json", "useLoaderData", "useState", "Form", "action", "loader", "json", "redirect", "Form", "useLoaderData", "z", "jsxDEV", "loader", "user", "json", "action", "redirect", "useLoaderData", "Form", "action", "json", "redirect", "Form", "z", "jsxDEV", "action", "user", "json", "redirect", "Form", "action", "json", "z", "eq", "z", "action", "user", "eq", "json", "databaseConnections", "action", "json", "Form", "Link", "useActionData", "eq", "eq", "user", "jsxDEV", "action", "json", "useActionData", "Form", "Link", "loader", "json", "Link", "useLoaderData", "jsxDEV", "loader", "user", "organizations", "json", "useLoaderData", "Link", "action", "meta", "json", "Form", "Link", "useActionData", "useSearchParams", "jsxDEV", "meta", "action", "json", "useActionData", "useSearchParams", "Form", "Link", "loader", "json", "useLoaderData", "useSearchParams", "clsx", "jsxDEV", "startCase", "useState", "jsxDEV", "useState", "error", "startCase", "jsxDEV", "action", "useEffect", "useState", "startCase", "Fragment", "jsxDEV", "useState", "useEffect", "startCase", "useCallback", "useState", "startCase", "useState", "useEffect", "Fragment", "jsxDEV", "loader", "json", "useLoaderData", "useSearchParams", "useState", "useCallback", "startCase", "action", "json", "z", "eq", "z", "action", "user", "json", "eq", "pool", "loader", "meta", "json", "useLoaderData", "useState", "Link", "startCase", "jsxDEV", "jsxDEV", "jsxDEV", "meta", "loader", "fetchSchema", "json", "useLoaderData", "useState", "action", "loader", "json", "redirect", "Form", "Link", "useActionData", "createCookieSessionStorage", "redirect", "bcrypt", "eq", "sessionStorage", "createCookieSessionStorage", "createUserSession", "redirect", "sessionStorage", "getUserSession", "sessionStorage", "jsxDEV", "loader", "getUserSession", "redirect", "json", "action", "user", "createUserSession", "useActionData", "Form", "Link", "action", "loader", "useState", "format", "jsxDEV", "jsxDEV", "json", "useActionData", "Form", "useLoaderData", "createId", "sql", "queryHistory", "useEffect", "useState", "useTheme", "useCallback", "useEffect", "useMemo", "jsxDEV", "text", "useTheme", "Fragment", "jsxDEV", "loader", "json", "action", "user", "useState", "useActionData", "useLoaderData", "format", "Form"]
}
