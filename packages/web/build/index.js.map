{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/utils/theme.tsx", "../app/components/Layout.tsx", "../app/routes/$tableName.tsx", "../app/components/TabView.tsx", "../app/components/DataView.tsx", "../app/utils/cn.ts", "../app/hooks/useClient.ts", "../app/utils/pool.server.ts", "../app/utils/sql-sanitizer.server.ts", "../app/utils/api.ts", "../app/routes/_index.tsx", "../app/components/TableList.tsx", "../app/components/PageContainer.tsx", "../app/routes/query.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  loadContext: AppLoadContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    headers: responseHeaders,\n    status: responseStatusCode,\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\nimport { LinksFunction } from \"@remix-run/node\";\nimport styles from \"./tailwind.css\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { ThemeProvider } from \"./utils/theme\";\nimport { Layout } from \"./components/Layout\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: styles }];\n\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full bg-gray-50 dark:bg-gray-900\">\n        <QueryClientProvider client={queryClient}>\n          <ThemeProvider>\n            <Layout>\n              <Outlet />\n            </Layout>\n            <ScrollRestoration />\n            <Scripts />\n            <LiveReload />\n            <ReactQueryDevtools />\n          </ThemeProvider>\n        </QueryClientProvider>\n      </body>\n    </html>);\n\n}", "import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Only check localStorage and media query on the client side\n    if (typeof window === \"undefined\") return \"light\";\n    \n    const saved = localStorage.getItem(\"theme\") as Theme;\n    if (saved) return saved;\n    \n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    // Remove both classes first\n    root.classList.remove(\"light\", \"dark\");\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    \n    // Store the theme preference\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    console.log(\"Toggle theme\");\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  // Set initial theme class on the client side\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.add(theme);\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n", "import { Link, useLocation } from \"@remix-run/react\";\nimport { useTheme } from \"~/utils/theme\";\nimport { TableCellsIcon as TableIcon, CircleStackIcon as DatabaseIcon,  SunIcon, MoonIcon } from \"@heroicons/react/24/outline\";\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  const { theme, toggleTheme } = useTheme();\n  const location = useLocation();\n\n  const navigation = [\n    { name: 'Tables', href: '/', icon: TableIcon },\n    { name: 'Run Query', href: '/query', icon: DatabaseIcon },\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Floating Sidebar */}\n      <div className=\"fixed left-4 top-4 bottom-4 w-64\">\n        <div className=\"flex h-full flex-col rounded-2xl bg-white dark:bg-gray-800 shadow-lg\">\n          <div className=\"flex flex-1 flex-col overflow-y-auto pt-5 pb-4\">\n            <div className=\"flex flex-shrink-0 items-center px-4\">\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">Data Studio</h1>\n            </div>\n            <nav className=\"mt-5 flex-1 space-y-1 px-2\">\n              {navigation.map((item) => {\n                const isActive = location.pathname === item.href;\n                return (\n                  <Link\n                    key={item.name}\n                    to={item.href}\n                    className={`${\n                      isActive\n                        ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'\n                        : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                    } group flex items-center px-3 py-2 text-sm font-medium rounded-xl transition-colors`}\n                  >\n                    <item.icon\n                      className={`${\n                        isActive\n                          ? 'text-gray-500 dark:text-gray-300'\n                          : 'text-gray-400 dark:text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300'\n                      } mr-3 flex-shrink-0 h-5 w-5`}\n                      aria-hidden=\"true\"\n                    />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          <div className=\"flex flex-shrink-0 p-4\">\n            <button\n              onClick={toggleTheme}\n              className=\"group flex w-full items-center px-3 py-2 text-sm font-medium rounded-xl text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n            >\n              {theme === 'dark' ? (\n                <SunIcon className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\n              ) : (\n                <MoonIcon className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\n              )}\n              {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 pl-72\">\n        <main className=\"h-screen\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData, useSearchParams } from \"@remix-run/react\";\nimport { TabView } from \"~/components/TabView\";\nimport { DataView } from \"~/components/DataView\";\nimport { fetchTableData } from \"~/utils/api\";\nimport { useCallback } from \"react\";\nimport { startCase } from \"lodash-es\";\nimport { useClient } from \"~/hooks/useClient\";\n\nexport async function loader({ params, request }: LoaderFunctionArgs) {\n  const tableName = params.tableName;\n  if (!tableName) {\n    throw new Error(\"Table name is required\");\n  }\n\n  const url = new URL(request.url);\n  const sortBy = url.searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = url.searchParams.get(\"sortOrder\") as \"asc\" | \"desc\" | undefined;\n\n  const data = await fetchTableData(tableName, sortBy, sortOrder);\n  return json({ tableName, data });\n}\n\nexport default function TablePage() {\n  const { tableName, data } = useLoaderData<typeof loader>();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const isClient = useClient();\n\n  const activeTab = searchParams.get(\"tab\") || \"data\";\n  const sortBy = searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = (searchParams.get(\"sortOrder\") as \"asc\" | \"desc\") || undefined;\n\n  const columns = Object.keys(data.data[0] || {}).map(name => ({\n    name,\n    type: typeof data.data[0]?.[name]\n  }));\n\n  const handleTabChange = useCallback((tabId: string) => {\n    setSearchParams(prev => {\n      prev.set(\"tab\", tabId);\n      return prev;\n    }, { replace: true });\n  }, [setSearchParams]);\n\n  const handleSort = useCallback((column: string) => {\n    setSearchParams(prev => {\n      const currentSortBy = prev.get(\"sortBy\");\n      const currentSortOrder = prev.get(\"sortOrder\");\n\n      if (currentSortBy === column) {\n        if (currentSortOrder === \"asc\") {\n          prev.set(\"sortOrder\", \"desc\");\n        } else if (currentSortOrder === \"desc\") {\n          prev.delete(\"sortBy\");\n          prev.delete(\"sortOrder\");\n        }\n      } else {\n        prev.set(\"sortBy\", column);\n        prev.set(\"sortOrder\", \"asc\");\n      }\n\n      return prev;\n    }, { replace: true });\n  }, [setSearchParams]);\n\n  const formatCellValue = useCallback((value: any): string => {\n    if (value === null) return \"NULL\";\n    if (value === undefined) return \"\";\n    if (typeof value === \"object\") return JSON.stringify(value);\n    return String(value);\n  }, []);\n\n  const handleEdit = useCallback((rowIndex: number, newData: Record<string, any>) => {\n    console.log(\"Edit row\", rowIndex, newData);\n  }, []);\n\n  const handleDelete = useCallback((rowIndex: number) => {\n    console.log(\"Delete row\", rowIndex);\n  }, []);\n\n  const handleRowSelect = useCallback((rowIndex: number | null) => {\n    setSearchParams(prev => {\n      if (rowIndex === null) {\n        prev.delete(\"selectedRow\");\n      } else {\n        prev.set(\"selectedRow\", String(rowIndex));\n      }\n      return prev;\n    }, { replace: true });\n  }, [setSearchParams]);\n\n  const selectedRow = searchParams.has(\"selectedRow\")\n    ? Number(searchParams.get(\"selectedRow\"))\n    : undefined;\n\n  const tabs = [\n    { id: \"data\", label: \"Data\" },\n    { id: \"schema\", label: \"Schema\" },\n    { id: \"sql\", label: \"SQL\" },\n  ];\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n          {startCase(tableName)}\n        </h1>\n      </div>\n\n      <TabView\n        tabs={tabs}\n        activeTab={activeTab}\n        onTabChange={handleTabChange}\n      />\n\n      <div className=\"flex-1 min-h-0 p-6\">\n        {activeTab === \"data\" && (\n          <DataView\n            columns={columns}\n            rows={data.data}\n            sortBy={sortBy}\n            sortOrder={sortOrder}\n            onSort={handleSort}\n            formatCellValue={formatCellValue}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            isEditable={isClient}\n            selectedRow={selectedRow}\n            onRowSelect={handleRowSelect}\n          />\n        )}\n        {activeTab === \"schema\" && (\n          <pre className=\"whitespace-pre-wrap font-mono text-sm\">\n            {JSON.stringify(columns, null, 2)}\n          </pre>\n        )}\n        {activeTab === \"sql\" && (\n          <pre className=\"whitespace-pre-wrap font-mono text-sm\">\n            {`SELECT * FROM ${tableName};`}\n          </pre>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import { ReactNode } from \"react\";\nimport { startCase } from \"lodash-es\";\nimport { useClient } from \"~/hooks/useClient\";\nimport { ClientOnly } from \"./ClientOnly\";\n\ninterface Tab {\n  id: string;\n  label: string;\n}\n\ninterface TabViewProps {\n  tabs: Tab[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n}\n\ninterface DataViewProps {\n  columns: string[];\n  rows: any[];\n  currentPage: number;\n  totalPages: number;\n  pageSize: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onPageChange: (page: number) => void;\n  onSort: (column: string) => void;\n  formatCellValue: (value: any) => string;\n}\n\nexport function TabView({ tabs, activeTab, onTabChange }: TabViewProps) {\n  return (\n    <div className=\"flex flex-col bg-white dark:bg-gray-900\">\n      <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n        {tabs.map((tab) => {\n          const isActive = activeTab === tab.id;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={`px-6 py-3 text-sm font-medium border-b-2 -mb-px ${\n                isActive\n                  ? \"border-purple-500 text-purple-600 dark:text-purple-400\"\n                  : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:border-gray-600\"\n              }`}\n            >\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function DataView({\n  columns,\n  rows,\n  currentPage,\n  totalPages,\n  pageSize,\n  sortBy,\n  sortOrder,\n  onPageChange,\n  onSort,\n  formatCellValue,\n}: DataViewProps) {\n  return (\n    <div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              {columns.map((column) => (\n                <th\n                  key={column}\n                  scope=\"col\"\n                  className=\"group px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => onSort(column)}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{startCase(column.toLowerCase())}</span>\n                    <span className=\"invisible group-hover:visible\">\n                      {sortBy === column ? (\n                        <span>{sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\"}</span>\n                      ) : (\n                        \"\u2195\"\n                      )}\n                    </span>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n            {rows.map((row, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                {columns.map((column) => (\n                  <td\n                    key={column}\n                    className=\"px-6 py-4 whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-300 font-mono\"\n                  >\n                    {formatCellValue(row[column])}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n", "import { startCase } from \"lodash-es\";\nimport type { Column } from \"~/types\";\nimport {\n  createColumnHelper,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  getSortedRowModel,\n  type SortingState,\n} from '@tanstack/react-table';\nimport { useMemo } from \"react\";\nimport { useSearchParams } from \"@remix-run/react\";\nimport { cn } from \"~/utils/cn\";\nimport { useClient } from \"~/hooks/useClient\";\n\ninterface DataViewProps {\n  columns: Column[];\n  rows: Record<string, any>[];\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onSort: (column: string) => void;\n  formatCellValue: (value: any) => string;\n  onEdit?: (rowIndex: number, data: Record<string, any>) => void;\n  onDelete?: (rowIndex: number) => void;\n  isEditable?: boolean;\n  selectedRow?: number;\n  onRowSelect?: (index: number | null) => void;\n}\n\nexport function DataView({\n  columns,\n  rows,\n  sortBy,\n  sortOrder,\n  onSort,\n  formatCellValue,\n  onEdit,\n  onDelete,\n  isEditable = false,\n  selectedRow,\n  onRowSelect,\n}: DataViewProps) {\n  const isClient = useClient();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const editingCell = searchParams.get(\"editCell\")?.split(\",\").map(Number);\n  const editedValue = searchParams.get(\"editValue\");\n\n  const handleStartEditing = (rowIndex: number, columnId: string) => {\n    if (!isClient || !isEditable) return;\n    \n    setSearchParams(prev => {\n      prev.set(\"editCell\", `${rowIndex},${columnId}`);\n      prev.set(\"editValue\", formatCellValue(rows[rowIndex][columnId]));\n      return prev;\n    }, { replace: true });\n  };\n\n  const handleFinishEditing = (rowIndex: number, columnId: string) => {\n    if (!isClient) return;\n    \n    if (onEdit && editedValue !== null) {\n      onEdit(rowIndex, {\n        ...rows[rowIndex],\n        [columnId]: editedValue,\n      });\n    }\n    setSearchParams(prev => {\n      prev.delete(\"editCell\");\n      prev.delete(\"editValue\");\n      return prev;\n    }, { replace: true });\n  };\n\n  const columnHelper = createColumnHelper<Record<string, any>>();\n\n  const tableColumns = useMemo(() => [\n    ...columns.map((col) =>\n      columnHelper.accessor(col.name, {\n        header: () => (\n          <div className=\"flex items-center space-x-1\">\n            <span>{startCase(col.name)}</span>\n            <span className=\"text-xs text-gray-500\">({col.type})</span>\n          </div>\n        ),\n        cell: ({ row, column, getValue }) => {\n          const value = getValue();\n          const isEditing = isClient && isEditable && \n            editingCell?.[0] === row.index &&\n            String(column.id) === String(editingCell?.[1]);\n\n          if (isEditing) {\n            return (\n              <input\n                className=\"w-full px-2 py-1 border rounded bg-white dark:bg-gray-800\"\n                value={editedValue ?? formatCellValue(value)}\n                onChange={(e) =>\n                  setSearchParams(prev => {\n                    prev.set(\"editValue\", e.target.value);\n                    return prev;\n                  }, { replace: true })\n                }\n                onBlur={() => handleFinishEditing(row.index, column.id)}\n                autoFocus\n              />\n            );\n          }\n\n          return (\n            <div\n              className={cn(\n                \"overflow-hidden text-ellipsis\",\n                isEditable && \"cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\",\n                selectedRow === row.index && \"bg-blue-50 dark:bg-blue-900\"\n              )}\n              onClick={() => {\n                if (!isClient) return;\n                \n                if (isEditable) {\n                  handleStartEditing(row.index, column.id);\n                }\n                if (onRowSelect) {\n                  onRowSelect(selectedRow === row.index ? null : row.index);\n                }\n              }}\n              style={{ maxWidth: '300px' }}\n            >\n              {formatCellValue(value)}\n            </div>\n          );\n        },\n      })\n    ),\n    ...(isEditable && onDelete\n      ? [\n          columnHelper.display({\n            id: \"actions\",\n            header: \"Actions\",\n            cell: ({ row }) => (\n              <button\n                onClick={() => isClient && onDelete(row.index)}\n                className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\"\n              >\n                Delete\n              </button>\n            ),\n          }),\n        ]\n      : []),\n  ], [columns, isEditable, onDelete, selectedRow, editingCell, editedValue, formatCellValue, isClient]);\n\n  const table = useReactTable({\n    data: rows,\n    columns: tableColumns,\n    state: {\n      sorting: sortBy ? [{ id: sortBy, desc: sortOrder === \"desc\" }] : [],\n    },\n    onSortingChange: (updater) => {\n      const newSorting = (typeof updater === 'function' ? updater([]) : updater) as SortingState;\n      if (newSorting.length > 0) {\n        onSort(newSorting[0].id);\n      }\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    enableColumnResizing: true,\n    columnResizeMode: \"onChange\",\n  });\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 min-h-0 relative\">\n        <div className=\"absolute inset-0 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden\">\n          <div className=\"h-full overflow-auto\">\n            <table className=\"w-full divide-y divide-gray-200 dark:divide-gray-700\" style={{ width: table.getTotalSize() }}>\n              <thead className=\"sticky top-0 bg-white dark:bg-gray-900 shadow-sm z-10\">\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <tr key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => (\n                      <th\n                        key={header.id}\n                        className=\"group relative px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer whitespace-nowrap select-none bg-white dark:bg-gray-900\"\n                        onClick={header.column.getToggleSortingHandler()}\n                        style={{\n                          width: header.getSize(),\n                          position: 'relative',\n                        }}\n                      >\n                        <div className=\"flex items-center justify-center\">\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          <span className=\"ml-1\">\n                            {header.column.getIsSorted() === \"asc\" ? \"\u2191\" : \"\"}\n                            {header.column.getIsSorted() === \"desc\" ? \"\u2193\" : \"\"}\n                          </span>\n                        </div>\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                {table.getRowModel().rows.map((row) => (\n                  <tr key={row.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                    {row.getVisibleCells().map((cell) => (\n                      <td\n                        key={cell.id}\n                        className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\"\n                      >\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n", "import { useState, useEffect } from 'react';\n\nexport function useClient() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\n", "import pg from 'pg';\nconst { Pool } = pg;\n\nexport const pool = new Pool({\n  user: process.env.PGUSER || 'postgres',\n  host: process.env.PGHOST || 'localhost',\n  database: process.env.PGDATABASE || 'graphql',\n  password: process.env.PGPASSWORD || 'postgres',\n  port: parseInt(process.env.PGPORT || '5432'),\n});\n\n// Add error handler\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n", "import { format } from \"sql-formatter\";\n\n/**\n * Sanitizes table and column names to prevent SQL injection.\n * Only allows alphanumeric characters and underscores.\n * Removes any other characters that could be used for SQL injection.\n */\nexport function sanitizeTableName(name: string): string {\n  if (!name) {\n    throw new Error('Table or column name cannot be empty');\n  }\n\n  // Remove any characters that aren't alphanumeric or underscores\n  const sanitized = name.replace(/[^a-zA-Z0-9_]/g, '');\n\n  // Ensure the name starts with a letter\n  if (!/^[a-zA-Z]/.test(sanitized)) {\n    throw new Error('Table or column name must start with a letter');\n  }\n\n  // Ensure we still have a valid name after sanitization\n  if (sanitized.length === 0) {\n    throw new Error('Invalid table or column name');\n  }\n\n  // Convert to lowercase for consistency\n  return sanitized.toLowerCase();\n}\n\n/**\n * Validates and formats a schema name.\n * By default, uses 'public' schema if none is provided.\n */\nexport function sanitizeSchemaName(schema: string = 'public'): string {\n  const sanitized = sanitizeTableName(schema);\n  return sanitized;\n}\n\n/**\n * Validates and formats column names for SELECT statements.\n */\nexport function sanitizeColumnList(columns: string[]): string {\n  if (!columns || columns.length === 0) {\n    return '*';\n  }\n\n  return columns\n    .map(col => {\n      // Handle special case for *\n      if (col === '*') return col;\n      return sanitizeTableName(col);\n    })\n    .join(', ');\n}\n\n/**\n * Creates a safe parameterized WHERE clause.\n * Returns both the clause string and the values array for parameterized queries.\n */\nexport function createWhereClause(\n  conditions: Record<string, any>\n): { clause: string; values: any[] } {\n  const values: any[] = [];\n  const clauses: string[] = [];\n\n  Object.entries(conditions).forEach(([key, value], index) => {\n    const sanitizedKey = sanitizeTableName(key);\n    clauses.push(`${sanitizedKey} = $${index + 1}`);\n    values.push(value);\n  });\n\n  return {\n    clause: clauses.length > 0 ? `WHERE ${clauses.join(' AND ')}` : '',\n    values,\n  };\n}\n\n/**\n * Creates a safe ORDER BY clause.\n */\nexport function createOrderByClause(\n  orderBy: { column: string; direction?: 'ASC' | 'DESC' }[]\n): string {\n  if (!orderBy || orderBy.length === 0) return '';\n\n  const orderClauses = orderBy.map(({ column, direction = 'ASC' }) => {\n    const sanitizedColumn = sanitizeTableName(column);\n    const sanitizedDirection = direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC';\n    return `${sanitizedColumn} ${sanitizedDirection}`;\n  });\n\n  return `ORDER BY ${orderClauses.join(', ')}`;\n}\n\n/**\n * Validates and formats a LIMIT clause value.\n */\nexport function sanitizeLimit(limit?: number): string {\n  if (!limit || limit <= 0) return '';\n  return `LIMIT ${Math.floor(limit)}`;\n}\n\nclass SQLSanitizer {\n  private readonly allowedTableNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n  private readonly allowedColumnNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n\n  private validateTableName(tableName: string): boolean {\n    return this.allowedTableNamePattern.test(tableName);\n  }\n\n  private validateColumnName(columnName: string): boolean {\n    return this.allowedColumnNamePattern.test(columnName);\n  }\n\n  private escapeValue(value: any): string {\n    if (value === null) return \"NULL\";\n    if (typeof value === \"number\") return value.toString();\n    if (typeof value === \"boolean\") return value ? \"TRUE\" : \"FALSE\";\n    return `'${value.toString().replace(/'/g, \"''\")}'`;\n  }\n\n  sanitizeTableQuery(tableName: string, filters?: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    let query = `SELECT * FROM \"${tableName}\"`;\n\n    if (filters && Object.keys(filters).length > 0) {\n      const whereConditions = Object.entries(filters)\n        .filter(([column]) => this.validateColumnName(column))\n        .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n        .join(\" AND \");\n\n      if (whereConditions) {\n        query += ` WHERE ${whereConditions}`;\n      }\n    }\n\n    return format(query + \";\");\n  }\n\n  sanitizeSchemaQuery(tableName: string): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    const query = `\n      SELECT \n        column_name,\n        data_type,\n        is_nullable,\n        column_default,\n        CASE \n          WHEN pk.constraint_type = 'PRIMARY KEY' THEN true\n          ELSE false\n        END as is_primary_key\n      FROM information_schema.columns c\n      LEFT JOIN (\n        SELECT kcu.column_name, tc.constraint_type\n        FROM information_schema.table_constraints tc\n        JOIN information_schema.key_column_usage kcu\n          ON tc.constraint_name = kcu.constraint_name\n          AND tc.table_schema = kcu.table_schema\n        WHERE tc.table_name = '${tableName}'\n          AND tc.constraint_type = 'PRIMARY KEY'\n      ) pk ON c.column_name = pk.column_name\n      WHERE table_name = '${tableName}'\n      ORDER BY ordinal_position;\n    `;\n\n    return format(query);\n  }\n\n  sanitizeUpdateQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any },\n    data: Record<string, any>\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new Error(\"Invalid primary key column name\");\n    }\n\n    const setClauses = Object.entries(data)\n      .filter(([column]) => this.validateColumnName(column))\n      .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n      .join(\", \");\n\n    const query = `\n      UPDATE \"${tableName}\"\n      SET ${setClauses}\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)}\n      RETURNING *;\n    `;\n\n    return format(query);\n  }\n\n  sanitizeDeleteQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any }\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new Error(\"Invalid primary key column name\");\n    }\n\n    const query = `\n      DELETE FROM \"${tableName}\"\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)};\n    `;\n\n    return format(query);\n  }\n\n  sanitizeInsertQuery(tableName: string, data: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    const columns = Object.keys(data).filter((column) =>\n      this.validateColumnName(column)\n    );\n    const values = columns.map((column) => this.escapeValue(data[column]));\n\n    const query = `\n      INSERT INTO \"${tableName}\" (${columns.map((c) => `\"${c}\"`).join(\", \")})\n      VALUES (${values.join(\", \")})\n      RETURNING *;\n    `;\n\n    return format(query);\n  }\n}\n\nexport const sqlSanitizer = new SQLSanitizer();\n", "import type { TableDataResponse, TableSchema, QueryResult } from '~/types';\nimport { pool } from './pool.server';\nimport { sanitizeTableName } from './sql-sanitizer.server';\n\ninterface RawSchemaResponse {\n  table_name: string;\n  columns: Array<{\n    column_name: string;\n    data_type: string;\n    is_nullable: string;\n    column_default: string | null;\n  }>;\n  primary_key: string[] | null;\n}\n\nexport async function fetchSchema(): Promise<TableSchema[]> {\n  console.log('Attempting to fetch schema...');\n  const client = await pool.connect();\n  try {\n    console.log('Connected to database, executing query...');\n    const result = await client.query<{\n      table_name: string;\n      columns: Array<{\n        name: string;\n        type: string;\n        nullable: boolean;\n        defaultValue?: string;\n      }>;\n      primary_key: string[] | null;\n      row_count: string;\n      size_bytes: string;\n    }>(`\n      WITH table_sizes AS (\n        SELECT \n          n.nspname as schema_name,\n          c.relname as table_name,\n          pg_total_relation_size(quote_ident(n.nspname) || '.' || quote_ident(c.relname)) as total_bytes,\n          c.reltuples::bigint as row_estimate\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relkind = 'r'\n          AND n.nspname = 'public'\n      )\n      SELECT \n        t.table_name,\n        array_agg(\n          json_build_object(\n            'name', c.column_name,\n            'type', c.data_type,\n            'nullable', c.is_nullable = 'YES',\n            'defaultValue', c.column_default\n          )\n        ) as columns,\n        array_agg(\n          CASE WHEN tc.constraint_type = 'PRIMARY KEY' \n          THEN c.column_name \n          ELSE NULL \n          END\n        ) FILTER (WHERE tc.constraint_type = 'PRIMARY KEY') as primary_key,\n        COALESCE(ts.row_estimate::text, '0') as row_count,\n        COALESCE(ts.total_bytes::text, '0') as size_bytes\n      FROM information_schema.tables t\n      JOIN information_schema.columns c ON t.table_name = c.table_name\n        AND t.table_schema = c.table_schema\n      LEFT JOIN information_schema.table_constraints tc \n        ON t.table_name = tc.table_name \n        AND t.table_schema = tc.table_schema\n        AND tc.constraint_type = 'PRIMARY KEY'\n      LEFT JOIN information_schema.key_column_usage kcu\n        ON tc.constraint_name = kcu.constraint_name\n        AND c.column_name = kcu.column_name\n      LEFT JOIN table_sizes ts ON t.table_name = ts.table_name\n      WHERE t.table_schema = 'public'\n        AND t.table_type = 'BASE TABLE'\n      GROUP BY t.table_name, ts.row_estimate, ts.total_bytes\n    `);\n\n    console.log('Query executed successfully, found tables:', result.rows.length);\n    return result.rows.map(row => ({\n      name: row.table_name,\n      columns: row.columns,\n      primaryKey: row.primary_key ?? undefined,\n      rowCount: parseInt(row.row_count || '0', 10),\n      sizeInBytes: parseInt(row.size_bytes || '0', 10)\n    }));\n  } catch (error) {\n    console.error('Error fetching schema:', error);\n    throw error;\n  } finally {\n    console.log('Releasing database connection');\n    client.release();\n  }\n}\n\nexport async function fetchTableData(\n  tableName: string,\n  sortBy?: string,\n  sortOrder?: 'asc' | 'desc'\n): Promise<TableDataResponse> {\n  const client = await pool.connect();\n  try {\n    let query = `SELECT * FROM ${sanitizeTableName(tableName)}`;\n    \n    if (sortBy) {\n      query += ` ORDER BY ${sanitizeTableName(sortBy)} ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;\n    }\n    \n    const result = await client.query(query);\n\n    return {\n      data: result.rows,\n      totalRows: result.rows.length\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function executeQuery(sql: string): Promise<QueryResult> {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(sql);\n    return {\n      rows: result.rows,\n      fields: result.fields.map(f => ({\n        name: f.name,\n        dataTypeID: f.dataTypeID\n      }))\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function updateTableSchema(\n  tableName: string,\n  schema: TableSchema\n): Promise<void> {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n\n    // Get current schema\n    const currentSchema = (await fetchSchema()).find(s => s.name === tableName);\n    if (!currentSchema) {\n      throw new Error(`Table ${tableName} not found`);\n    }\n\n    // Find columns to add, modify, and remove\n    const currentColumns = new Map(currentSchema.columns.map(c => [c.name, c]));\n    const newColumns = new Map(schema.columns.map(c => [c.name, c]));\n\n    // Columns to add\n    for (const [name, column] of newColumns) {\n      if (!currentColumns.has(name)) {\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          ADD COLUMN ${sanitizeTableName(name)} ${column.type}\n          ${column.nullable ? '' : 'NOT NULL'}\n          ${column.defaultValue ? `DEFAULT ${column.defaultValue}` : ''}\n        `);\n      }\n    }\n\n    // Columns to modify\n    for (const [name, column] of newColumns) {\n      const currentColumn = currentColumns.get(name);\n      if (currentColumn) {\n        // Modify column type if different\n        if (currentColumn.type !== column.type) {\n          await client.query(`\n            ALTER TABLE ${sanitizeTableName(tableName)}\n            ALTER COLUMN ${sanitizeTableName(name)}\n            TYPE ${column.type}\n            USING ${sanitizeTableName(name)}::${column.type}\n          `);\n        }\n\n        // Modify nullable constraint if different\n        if (currentColumn.nullable !== column.nullable) {\n          await client.query(`\n            ALTER TABLE ${sanitizeTableName(tableName)}\n            ALTER COLUMN ${sanitizeTableName(name)}\n            ${column.nullable ? 'DROP NOT NULL' : 'SET NOT NULL'}\n          `);\n        }\n\n        // Modify default value if different\n        if (currentColumn.defaultValue !== column.defaultValue) {\n          if (column.defaultValue) {\n            await client.query(`\n              ALTER TABLE ${sanitizeTableName(tableName)}\n              ALTER COLUMN ${sanitizeTableName(name)}\n              SET DEFAULT ${column.defaultValue}\n            `);\n          } else {\n            await client.query(`\n              ALTER TABLE ${sanitizeTableName(tableName)}\n              ALTER COLUMN ${sanitizeTableName(name)}\n              DROP DEFAULT\n            `);\n          }\n        }\n      }\n    }\n\n    // Columns to remove\n    for (const [name] of currentColumns) {\n      if (!newColumns.has(name)) {\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          DROP COLUMN ${sanitizeTableName(name)}\n        `);\n      }\n    }\n\n    // Update primary key if changed\n    if (JSON.stringify(currentSchema.primaryKey) !== JSON.stringify(schema.primaryKey)) {\n      // Drop existing primary key\n      await client.query(`\n        DO $$ \n        BEGIN \n          IF EXISTS (\n            SELECT 1 FROM information_schema.table_constraints \n            WHERE table_name = '${tableName}'\n            AND constraint_type = 'PRIMARY KEY'\n          ) THEN\n            EXECUTE (\n              SELECT 'ALTER TABLE ' || quote_ident('${tableName}') || \n                     ' DROP CONSTRAINT ' || quote_ident(constraint_name)\n              FROM information_schema.table_constraints\n              WHERE table_name = '${tableName}'\n              AND constraint_type = 'PRIMARY KEY'\n            );\n          END IF;\n        END $$;\n      `);\n\n      // Add new primary key if specified\n      if (schema.primaryKey && schema.primaryKey.length > 0) {\n        const primaryKeyColumns = schema.primaryKey\n          .map(col => sanitizeTableName(col))\n          .join(', ');\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          ADD PRIMARY KEY (${primaryKeyColumns})\n        `);\n      }\n    }\n\n    await client.query('COMMIT');\n  } catch (error) {\n    await client.query('ROLLBACK');\n    console.error('Error updating schema:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\nexport async function createTableRow(\n  tableName: string,\n  data: Record<string, any>\n): Promise<void> {\n  const client = await pool.connect();\n  try {\n    const columns = Object.keys(data);\n    const values = Object.values(data);\n    const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');\n    \n    const query = `\n      INSERT INTO ${sanitizeTableName(tableName)} \n      (${columns.map(sanitizeTableName).join(', ')})\n      VALUES (${placeholders})\n    `;\n    \n    await client.query(query, values);\n  } catch (error) {\n    console.error('Error creating row:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n", "import { json, type LoaderFunctionArgs, type MetaFunction } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { fetchSchema } from \"~/utils/api\";\nimport { TableList } from \"~/components/TableList\";\nimport { PageContainer } from \"~/components/PageContainer\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Data Studio\" },\n    { name: \"description\", content: \"Database management studio\" },\n  ];\n};\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  try {\n    const tables = await fetchSchema();\n    return json({ tables });\n  } catch (error) {\n    console.error('Error loading tables:', error);\n    return json({ tables: [] });\n  }\n}\n\nexport default function Index() {\n  const { tables } = useLoaderData<typeof loader>();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredTables = tables.filter((table) =>\n    table.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search tables...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full p-3 pl-10 rounded-lg bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n          />\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <svg className=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        <TableList tables={filteredTables} />\n      </div>\n    </PageContainer>\n  );\n}\n", "import { Link } from \"@remix-run/react\";\nimport type { TableSchema } from \"~/types\";\nimport { startCase, capitalize } from \"lodash-es\";\n\ninterface TableListProps {\n  tables: TableSchema[];\n}\n\nfunction formatBytes(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n  \n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  \n  return `${size.toFixed(1)} ${units[unitIndex]}`;\n}\n\nfunction formatNumber(num: number): string {\n  if (!num || num < 0) return '0';\n  return new Intl.NumberFormat().format(num);\n}\n\nfunction prettyPrintName(name: string): string {\n  return startCase(name.toLowerCase());\n}\n\nexport function TableList({ tables }: TableListProps) {\n  return (\n    <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n      {tables.map((table) => (\n        <Link\n          key={table.name}\n          to={`/${table.name}`}\n          className=\"group block w-full p-6 rounded-xl bg-white dark:bg-gray-800 shadow-sm border border-gray-200 dark:border-gray-700 hover:bg-white dark:hover:bg-gray-700 transition-all duration-200 transform hover:-translate-y-1 hover:shadow-xl\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <h5 className=\"text-xl font-bold tracking-tight text-gray-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors truncate max-w-[80%]\">\n              {prettyPrintName(table.name)}\n            </h5>\n            <span className=\"flex-shrink-0 flex items-center justify-center w-8 h-8 rounded-full bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-400\">\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n            </span>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{table.columns.length}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">columns</span>\n              </p>\n              <div className=\"mx-3 h-4 w-px bg-gray-300 dark:bg-gray-600\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{formatNumber(table.rowCount)}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">rows</span>\n              </p>\n              <div className=\"mx-3 h-4 w-px bg-gray-300 dark:bg-gray-600\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{formatBytes(table.sizeInBytes)}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">size</span>\n              </p>\n            </div>\n            {Array.isArray(table.primaryKey) && table.primaryKey.length > 0 && (\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                <span className=\"font-normal text-gray-500 dark:text-gray-400\">Primary Key:</span>{' '}\n                <span className=\"font-mono text-purple-600 dark:text-purple-400\">\n                  {table.primaryKey.map(prettyPrintName).join(\", \")}\n                </span>\n              </p>\n            )}\n          </div>\n          <div className=\"mt-4 flex items-center text-sm text-purple-600 dark:text-purple-400\">\n            <span>View table</span>\n            <svg className=\"flex-shrink-0 w-4 h-4 ml-1 transition-transform group-hover:translate-x-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n}\n", "import { type ReactNode } from \"react\";\n\ninterface PageContainerProps {\n  children: ReactNode;\n}\n\nexport function PageContainer({ children }: PageContainerProps) {\n  return (\n    <div className=\"h-screen p-4 bg-gray-100 dark:bg-gray-950\">\n      <div className=\"h-full bg-white dark:bg-gray-900 rounded-lg shadow-sm overflow-hidden flex flex-col\">\n        {children}\n      </div>\n    </div>\n  );\n}\n", "import { useState } from \"react\";\nimport { executeQuery } from \"~/utils/api\";\nimport { format } from \"sql-formatter\";\nimport type { QueryResult } from \"~/types\";\nimport { PageContainer } from \"~/components/PageContainer\";\n\nexport default function QueryPage() {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<QueryResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleExecuteQuery = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const result = await executeQuery(query);\n      setResults(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFormat = () => {\n    try {\n      const formatted = format(query, { language: 'postgresql' });\n      setQuery(formatted);\n    } catch (err) {\n      setError('Error formatting query');\n    }\n  };\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n        <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">SQL Query</h1>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between mb-2\">\n              <label htmlFor=\"query\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                SQL Query\n              </label>\n              <button\n                onClick={handleFormat}\n                className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300\"\n              >\n                Format Query\n              </button>\n            </div>\n            <textarea\n              id=\"query\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              rows={4}\n              className=\"w-full px-3 py-2 text-gray-700 dark:text-gray-300 border rounded-lg focus:outline-none focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600\"\n              placeholder=\"Enter your SQL query here...\"\n            />\n          </div>\n\n          <div>\n            <button\n              onClick={handleExecuteQuery}\n              disabled={isLoading || !query.trim()}\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? 'Executing...' : 'Execute Query'}\n            </button>\n          </div>\n\n          {error && (\n            <div className=\"p-4 bg-red-50 dark:bg-red-900/50 rounded-lg\">\n              <p className=\"text-sm text-red-700 dark:text-red-300\">{error}</p>\n            </div>\n          )}\n\n          {results && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Results</h2>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full divide-y divide-gray-300 dark:divide-gray-700\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                    <tr>\n                      {results.fields?.map((field) => (\n                        <th\n                          key={field.name}\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\"\n                        >\n                          {field.name}\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n                    {results.rows?.map((row, rowIndex) => (\n                      <tr key={rowIndex}>\n                        {Object.values(row).map((value, colIndex) => (\n                          <td\n                            key={colIndex}\n                            className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\"\n                          >\n                            {value === null ? 'NULL' : String(value)}\n                          </td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </PageContainer>\n  );\n}\n", "export default {'entry':{'module':'/build/entry.client-F52VPBZ7.js','imports':['/build/_shared/chunk-3VPVJWTU.js','/build/_shared/chunk-HDRCTI32.js','/build/_shared/chunk-RTBKPWXJ.js','/build/_shared/chunk-NO3FWBWP.js','/build/_shared/chunk-ULL77KT2.js','/build/_shared/chunk-UG3ISROB.js','/build/_shared/chunk-R3YRPWCC.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-3VTWYCAD.js','imports':['/build/_shared/chunk-56WY5XKF.js','/build/_shared/chunk-2ITZUYVB.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/$tableName':{'id':'routes/$tableName','parentId':'root','path':':tableName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$tableName-S2KUSMX4.js','imports':['/build/_shared/chunk-FRNKA3J3.js','/build/_shared/chunk-W3H43JBD.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-OREX2632.js','imports':['/build/_shared/chunk-FRNKA3J3.js','/build/_shared/chunk-HZ3UXEUT.js','/build/_shared/chunk-W3H43JBD.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/query':{'id':'routes/query','parentId':'root','path':'query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/query-QJSQYMXK.js','imports':['/build/_shared/chunk-HZ3UXEUT.js','/build/_shared/chunk-W3H43JBD.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'6d40be42','hmr':{'runtime':'/build/_shared/chunk-UG3ISROB.js','timestamp':1732655250359},'url':'/build/manifest-6D40BE42.js'};", "\nimport * as entryServer from \"/Users/jacob/AI/drizzle-server/packages/web/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/$tableName.tsx\";\nimport * as route2 from \"./routes/_index.tsx\";\nimport * as route3 from \"./routes/query.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":true,\"v3_relativeSplatPath\":true,\"v3_throwAbortReason\":true,\"v3_routeConfig\":false,\"v3_singleFetch\":true,\"v3_lazyRouteDiscovery\":true,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/$tableName\": {\n      id: \"routes/$tableName\",\n      parentId: \"root\",\n      path: \":tableName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/query\": {\n      id: \"routes/query\",\n      parentId: \"root\",\n      path: \"query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "jsxDEV", "jsxDEV", "useSearchParams", "jsxDEV", "startCase", "useState", "useEffect", "jsxDEV", "startCase", "startCase", "jsxDEV", "useSearchParams", "startCase", "loader", "json", "useLoaderData", "useState", "Link", "startCase", "jsxDEV", "jsxDEV", "jsxDEV", "loader", "json", "useLoaderData", "useState", "useState", "format", "jsxDEV", "useState", "format"]
}
