{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/utils/theme.tsx", "../app/components/Layout.tsx", "../app/routes/$tableName.tsx", "../app/utils/pool.server.ts", "../app/utils/sql-sanitizer.server.ts", "../app/utils/api.ts", "../app/components/DataView.tsx", "../app/components/RowDetailsSidebar.tsx", "../app/utils/cn.ts", "../app/components/TableStructure.tsx", "../app/components/StructureView.tsx", "../app/components/TabView.tsx", "../app/components/Button.tsx", "../app/components/CreateRowModal.tsx", "../app/components/PageContainer.tsx", "../app/routes/_index.tsx", "../app/components/TableList.tsx", "../app/routes/query.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  loadContext: AppLoadContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    headers: responseHeaders,\n    status: responseStatusCode,\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\nimport { LinksFunction } from \"@remix-run/node\";\nimport styles from \"./tailwind.css\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\nimport { ThemeProvider } from \"./utils/theme\";\nimport { Layout } from \"./components/Layout\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: styles }];\n\n\nconst queryClient = new QueryClient();\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full bg-gray-50 dark:bg-gray-900\">\n        <QueryClientProvider client={queryClient}>\n          <ThemeProvider>\n            <Layout>\n              <Outlet />\n            </Layout>\n            <ScrollRestoration />\n            <Scripts />\n            <LiveReload />\n            <ReactQueryDevtools />\n          </ThemeProvider>\n        </QueryClientProvider>\n      </body>\n    </html>);\n\n}", "import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Only check localStorage and media query on the client side\n    if (typeof window === \"undefined\") return \"light\";\n    \n    const saved = localStorage.getItem(\"theme\") as Theme;\n    if (saved) return saved;\n    \n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    // Remove both classes first\n    root.classList.remove(\"light\", \"dark\");\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    \n    // Store the theme preference\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    console.log(\"Toggle theme\");\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  // Set initial theme class on the client side\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.add(theme);\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n", "import { Link, useLocation } from \"@remix-run/react\";\nimport { useTheme } from \"~/utils/theme\";\nimport { TableCellsIcon as TableIcon, CircleStackIcon as DatabaseIcon,  SunIcon, MoonIcon } from \"@heroicons/react/24/outline\";\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  const { theme, toggleTheme } = useTheme();\n  const location = useLocation();\n\n  const navigation = [\n    { name: 'Tables', href: '/', icon: TableIcon },\n    { name: 'Run Query', href: '/query', icon: DatabaseIcon },\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Floating Sidebar */}\n      <div className=\"fixed left-4 top-4 bottom-4 w-64\">\n        <div className=\"flex h-full flex-col rounded-2xl bg-white dark:bg-gray-800 shadow-lg\">\n          <div className=\"flex flex-1 flex-col overflow-y-auto pt-5 pb-4\">\n            <div className=\"flex flex-shrink-0 items-center px-4\">\n              <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">Data Studio</h1>\n            </div>\n            <nav className=\"mt-5 flex-1 space-y-1 px-2\">\n              {navigation.map((item) => {\n                const isActive = location.pathname === item.href;\n                return (\n                  <Link\n                    key={item.name}\n                    to={item.href}\n                    className={`${\n                      isActive\n                        ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'\n                        : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                    } group flex items-center px-3 py-2 text-sm font-medium rounded-xl transition-colors`}\n                  >\n                    <item.icon\n                      className={`${\n                        isActive\n                          ? 'text-gray-500 dark:text-gray-300'\n                          : 'text-gray-400 dark:text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300'\n                      } mr-3 flex-shrink-0 h-5 w-5`}\n                      aria-hidden=\"true\"\n                    />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          <div className=\"flex flex-shrink-0 p-4\">\n            <button\n              onClick={toggleTheme}\n              className=\"group flex w-full items-center px-3 py-2 text-sm font-medium rounded-xl text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors\"\n            >\n              {theme === 'dark' ? (\n                <SunIcon className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\n              ) : (\n                <MoonIcon className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\n              )}\n              {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 pl-72\">\n        <main className=\"h-screen\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n", "import { json, type LoaderFunctionArgs, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData, useSearchParams, useSubmit } from \"@remix-run/react\";\nimport { fetchTableData, fetchSchema, updateTableSchema, createTableRow } from \"~/utils/api\";\nimport type { TableSchema, TableDataResponse } from \"~/types\";\nimport { useState } from \"react\";\nimport { DataView } from \"~/components/DataView\";\nimport { StructureView } from \"~/components/StructureView\";\nimport { TabView } from \"~/components/TabView\";\nimport { Button } from \"~/components/Button\";\nimport { CreateRowModal } from \"~/components/CreateRowModal\";\nimport { PageContainer } from \"~/components/PageContainer\";\n\nexport async function loader({ params, request }: LoaderFunctionArgs) {\n  const url = new URL(request.url);\n  const sortBy = url.searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = url.searchParams.get(\"sortOrder\") as \"asc\" | \"desc\" | undefined;\n  const activeTab = url.searchParams.get(\"tab\") || \"data\";\n  const showCreateModal = url.searchParams.get(\"showCreateModal\") === \"true\";\n\n  const tableName = params.tableName;\n  if (!tableName) {\n    throw new Response(\"Table name is required\", { status: 400 });\n  }\n\n  try {\n    const [schemas, tableData] = await Promise.all([\n      fetchSchema(),\n      fetchTableData(tableName, sortBy, sortOrder)\n    ]);\n\n    const schema = schemas.find(s => s.name === tableName);\n    if (!schema) {\n      throw new Response(\"Table not found\", { status: 404 });\n    }\n\n    return json({\n      tableName,\n      schema,\n      tableData,\n      activeTab,\n      showCreateModal\n    });\n  } catch (error) {\n    console.error(`Error loading table ${tableName}:`, error);\n    throw new Response(\"Error loading table data\", { status: 500 });\n  }\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const tableName = params.tableName;\n  if (!tableName) {\n    throw new Response(\"Table name is required\", { status: 400 });\n  }\n\n  const formData = await request.formData();\n  const data = Object.fromEntries(formData);\n\n  try {\n    await createTableRow(tableName, data);\n    return json({ success: true });\n  } catch (error) {\n    console.error(`Error creating row in table ${tableName}:`, error);\n    throw new Response(\"Error creating row\", { status: 500 });\n  }\n}\n\nexport default function TableRoute() {\n  const { tableName, schema, tableData, activeTab, showCreateModal } = useLoaderData<typeof loader>();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const submit = useSubmit();\n\n  const sortBy = searchParams.get(\"sortBy\");\n  const sortOrder = searchParams.get(\"sortOrder\") as \"asc\" | \"desc\" | undefined;\n\n  const handleSort = (column: string) => {\n    const newSortOrder = sortBy === column && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    setSearchParams(prev => {\n      prev.set(\"sortBy\", column);\n      prev.set(\"sortOrder\", newSortOrder);\n      return prev;\n    });\n  };\n\n  const handleTabChange = (tab: string) => {\n    setSearchParams(prev => {\n      prev.set(\"tab\", tab);\n      return prev;\n    });\n  };\n\n  const handleCreateModalToggle = (show: boolean) => {\n    setSearchParams(prev => {\n      if (show) {\n        prev.set(\"showCreateModal\", \"true\");\n      } else {\n        prev.delete(\"showCreateModal\");\n      }\n      return prev;\n    });\n  };\n\n  const handleSchemaUpdate = async (updatedSchema: TableSchema) => {\n    try {\n      await updateTableSchema(tableName, updatedSchema);\n      // Reload the page to get the updated schema\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Failed to update schema:\", error);\n      alert(\"Failed to update schema. Please try again.\");\n    }\n  };\n\n  const handleCreateRow = async (data: Record<string, any>) => {\n    try {\n      const formData = new FormData();\n      Object.entries(data).forEach(([key, value]) => {\n        formData.append(key, value);\n      });\n      await submit(formData, { method: \"post\" });\n      handleCreateModalToggle(false);\n    } catch (error) {\n      console.error(\"Failed to create row:\", error);\n      alert(\"Failed to create row. Please try again.\");\n    }\n  };\n\n  const handleEdit = async (rowIndex: number, data: Record<string, any>) => {\n    try {\n      // TODO: Implement edit functionality\n      console.log('Editing row:', rowIndex, data);\n    } catch (error) {\n      console.error('Error editing row:', error);\n    }\n  };\n\n  const handleDelete = async (rowIndex: number) => {\n    try {\n      // TODO: Implement delete functionality\n      console.log('Deleting row:', rowIndex);\n    } catch (error) {\n      console.error('Error deleting row:', error);\n    }\n  };\n\n  const formatCellValue = (value: any): string => {\n    if (value === null) return 'null';\n    if (value === undefined) return '';\n    \n    // Handle JSON objects and arrays\n    if (typeof value === 'object') {\n      try {\n        return JSON.stringify(value, null, 2);\n      } catch {\n        return String(value);\n      }\n    }\n    \n    return String(value);\n  };\n\n  const tabs = [\n    { label: \"Data\", id: \"data\" },\n    { label: \"Structure\", id: \"structure\" },\n  ];\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none\">\n        <div className=\"flex items-center justify-between p-4\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n            {tableName}\n          </h1>\n          {activeTab === \"data\" && (\n            <div className=\"flex gap-2\">\n              <Button onClick={() => handleCreateModalToggle(true)}>\n                Create Row\n              </Button>\n            </div>\n          )}\n        </div>\n        <TabView\n          tabs={tabs}\n          activeTab={activeTab}\n          onTabChange={handleTabChange}\n        />\n      </div>\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        {activeTab === \"data\" ? (\n          tableData ? (\n            <DataView\n              columns={schema?.columns || []}\n              rows={tableData.data}\n              sortBy={sortBy || ''}\n              sortOrder={sortOrder}\n              onSort={handleSort}\n              formatCellValue={formatCellValue}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n              isEditable={true}\n            />\n          ) : null\n        ) : (\n          <StructureView\n            schema={schema}\n            onSave={handleSchemaUpdate}\n          />\n        )}\n      </div>\n      {showCreateModal && (\n        <CreateRowModal\n          tableName={tableName}\n          fields={schema?.columns || []}\n          onClose={() => handleCreateModalToggle(false)}\n          onSubmit={handleCreateRow}\n        />\n      )}\n    </PageContainer>\n  );\n}\n", "import pg from 'pg';\nconst { Pool } = pg;\n\nexport const pool = new Pool({\n  user: process.env.PGUSER || 'postgres',\n  host: process.env.PGHOST || 'localhost',\n  database: process.env.PGDATABASE || 'graphql',\n  password: process.env.PGPASSWORD || 'postgres',\n  port: parseInt(process.env.PGPORT || '5432'),\n});\n\n// Add error handler\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n", "import { format } from \"sql-formatter\";\n\n/**\n * Sanitizes table and column names to prevent SQL injection.\n * Only allows alphanumeric characters and underscores.\n * Removes any other characters that could be used for SQL injection.\n */\nexport function sanitizeTableName(name: string): string {\n  if (!name) {\n    throw new Error('Table or column name cannot be empty');\n  }\n\n  // Remove any characters that aren't alphanumeric or underscores\n  const sanitized = name.replace(/[^a-zA-Z0-9_]/g, '');\n\n  // Ensure the name starts with a letter\n  if (!/^[a-zA-Z]/.test(sanitized)) {\n    throw new Error('Table or column name must start with a letter');\n  }\n\n  // Ensure we still have a valid name after sanitization\n  if (sanitized.length === 0) {\n    throw new Error('Invalid table or column name');\n  }\n\n  // Convert to lowercase for consistency\n  return sanitized.toLowerCase();\n}\n\n/**\n * Validates and formats a schema name.\n * By default, uses 'public' schema if none is provided.\n */\nexport function sanitizeSchemaName(schema: string = 'public'): string {\n  const sanitized = sanitizeTableName(schema);\n  return sanitized;\n}\n\n/**\n * Validates and formats column names for SELECT statements.\n */\nexport function sanitizeColumnList(columns: string[]): string {\n  if (!columns || columns.length === 0) {\n    return '*';\n  }\n\n  return columns\n    .map(col => {\n      // Handle special case for *\n      if (col === '*') return col;\n      return sanitizeTableName(col);\n    })\n    .join(', ');\n}\n\n/**\n * Creates a safe parameterized WHERE clause.\n * Returns both the clause string and the values array for parameterized queries.\n */\nexport function createWhereClause(\n  conditions: Record<string, any>\n): { clause: string; values: any[] } {\n  const values: any[] = [];\n  const clauses: string[] = [];\n\n  Object.entries(conditions).forEach(([key, value], index) => {\n    const sanitizedKey = sanitizeTableName(key);\n    clauses.push(`${sanitizedKey} = $${index + 1}`);\n    values.push(value);\n  });\n\n  return {\n    clause: clauses.length > 0 ? `WHERE ${clauses.join(' AND ')}` : '',\n    values,\n  };\n}\n\n/**\n * Creates a safe ORDER BY clause.\n */\nexport function createOrderByClause(\n  orderBy: { column: string; direction?: 'ASC' | 'DESC' }[]\n): string {\n  if (!orderBy || orderBy.length === 0) return '';\n\n  const orderClauses = orderBy.map(({ column, direction = 'ASC' }) => {\n    const sanitizedColumn = sanitizeTableName(column);\n    const sanitizedDirection = direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC';\n    return `${sanitizedColumn} ${sanitizedDirection}`;\n  });\n\n  return `ORDER BY ${orderClauses.join(', ')}`;\n}\n\n/**\n * Validates and formats a LIMIT clause value.\n */\nexport function sanitizeLimit(limit?: number): string {\n  if (!limit || limit <= 0) return '';\n  return `LIMIT ${Math.floor(limit)}`;\n}\n\nclass SQLSanitizer {\n  private readonly allowedTableNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n  private readonly allowedColumnNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n\n  private validateTableName(tableName: string): boolean {\n    return this.allowedTableNamePattern.test(tableName);\n  }\n\n  private validateColumnName(columnName: string): boolean {\n    return this.allowedColumnNamePattern.test(columnName);\n  }\n\n  private escapeValue(value: any): string {\n    if (value === null) return \"NULL\";\n    if (typeof value === \"number\") return value.toString();\n    if (typeof value === \"boolean\") return value ? \"TRUE\" : \"FALSE\";\n    return `'${value.toString().replace(/'/g, \"''\")}'`;\n  }\n\n  sanitizeTableQuery(tableName: string, filters?: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    let query = `SELECT * FROM \"${tableName}\"`;\n\n    if (filters && Object.keys(filters).length > 0) {\n      const whereConditions = Object.entries(filters)\n        .filter(([column]) => this.validateColumnName(column))\n        .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n        .join(\" AND \");\n\n      if (whereConditions) {\n        query += ` WHERE ${whereConditions}`;\n      }\n    }\n\n    return format(query + \";\");\n  }\n\n  sanitizeSchemaQuery(tableName: string): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    const query = `\n      SELECT \n        column_name,\n        data_type,\n        is_nullable,\n        column_default,\n        CASE \n          WHEN pk.constraint_type = 'PRIMARY KEY' THEN true\n          ELSE false\n        END as is_primary_key\n      FROM information_schema.columns c\n      LEFT JOIN (\n        SELECT kcu.column_name, tc.constraint_type\n        FROM information_schema.table_constraints tc\n        JOIN information_schema.key_column_usage kcu\n          ON tc.constraint_name = kcu.constraint_name\n          AND tc.table_schema = kcu.table_schema\n        WHERE tc.table_name = '${tableName}'\n          AND tc.constraint_type = 'PRIMARY KEY'\n      ) pk ON c.column_name = pk.column_name\n      WHERE table_name = '${tableName}'\n      ORDER BY ordinal_position;\n    `;\n\n    return format(query);\n  }\n\n  sanitizeUpdateQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any },\n    data: Record<string, any>\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new Error(\"Invalid primary key column name\");\n    }\n\n    const setClauses = Object.entries(data)\n      .filter(([column]) => this.validateColumnName(column))\n      .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n      .join(\", \");\n\n    const query = `\n      UPDATE \"${tableName}\"\n      SET ${setClauses}\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)}\n      RETURNING *;\n    `;\n\n    return format(query);\n  }\n\n  sanitizeDeleteQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any }\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new Error(\"Invalid primary key column name\");\n    }\n\n    const query = `\n      DELETE FROM \"${tableName}\"\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)};\n    `;\n\n    return format(query);\n  }\n\n  sanitizeInsertQuery(tableName: string, data: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new Error(\"Invalid table name\");\n    }\n\n    const columns = Object.keys(data).filter((column) =>\n      this.validateColumnName(column)\n    );\n    const values = columns.map((column) => this.escapeValue(data[column]));\n\n    const query = `\n      INSERT INTO \"${tableName}\" (${columns.map((c) => `\"${c}\"`).join(\", \")})\n      VALUES (${values.join(\", \")})\n      RETURNING *;\n    `;\n\n    return format(query);\n  }\n}\n\nexport const sqlSanitizer = new SQLSanitizer();\n", "import type { TableDataResponse, TableSchema, QueryResult } from '~/types';\nimport { pool } from './pool.server';\nimport { sanitizeTableName } from './sql-sanitizer.server';\n\ninterface RawSchemaResponse {\n  table_name: string;\n  columns: Array<{\n    column_name: string;\n    data_type: string;\n    is_nullable: string;\n    column_default: string | null;\n  }>;\n  primary_key: string[] | null;\n}\n\nexport async function fetchSchema(): Promise<TableSchema[]> {\n  console.log('Attempting to fetch schema...');\n  const client = await pool.connect();\n  try {\n    console.log('Connected to database, executing query...');\n    const result = await client.query<{\n      table_name: string;\n      columns: Array<{\n        name: string;\n        type: string;\n        nullable: boolean;\n        defaultValue?: string;\n      }>;\n      primary_key: string[] | null;\n      row_count: string;\n      size_bytes: string;\n    }>(`\n      WITH table_sizes AS (\n        SELECT \n          n.nspname as schema_name,\n          c.relname as table_name,\n          pg_total_relation_size(quote_ident(n.nspname) || '.' || quote_ident(c.relname)) as total_bytes,\n          c.reltuples::bigint as row_estimate\n        FROM pg_class c\n        JOIN pg_namespace n ON n.oid = c.relnamespace\n        WHERE c.relkind = 'r'\n          AND n.nspname = 'public'\n      )\n      SELECT \n        t.table_name,\n        array_agg(\n          json_build_object(\n            'name', c.column_name,\n            'type', c.data_type,\n            'nullable', c.is_nullable = 'YES',\n            'defaultValue', c.column_default\n          )\n        ) as columns,\n        array_agg(\n          CASE WHEN tc.constraint_type = 'PRIMARY KEY' \n          THEN c.column_name \n          ELSE NULL \n          END\n        ) FILTER (WHERE tc.constraint_type = 'PRIMARY KEY') as primary_key,\n        COALESCE(ts.row_estimate::text, '0') as row_count,\n        COALESCE(ts.total_bytes::text, '0') as size_bytes\n      FROM information_schema.tables t\n      JOIN information_schema.columns c ON t.table_name = c.table_name\n        AND t.table_schema = c.table_schema\n      LEFT JOIN information_schema.table_constraints tc \n        ON t.table_name = tc.table_name \n        AND t.table_schema = tc.table_schema\n        AND tc.constraint_type = 'PRIMARY KEY'\n      LEFT JOIN information_schema.key_column_usage kcu\n        ON tc.constraint_name = kcu.constraint_name\n        AND c.column_name = kcu.column_name\n      LEFT JOIN table_sizes ts ON t.table_name = ts.table_name\n      WHERE t.table_schema = 'public'\n        AND t.table_type = 'BASE TABLE'\n      GROUP BY t.table_name, ts.row_estimate, ts.total_bytes\n    `);\n\n    console.log('Query executed successfully, found tables:', result.rows.length);\n    return result.rows.map(row => ({\n      name: row.table_name,\n      columns: row.columns,\n      primaryKey: row.primary_key ?? undefined,\n      rowCount: parseInt(row.row_count || '0', 10),\n      sizeInBytes: parseInt(row.size_bytes || '0', 10)\n    }));\n  } catch (error) {\n    console.error('Error fetching schema:', error);\n    throw error;\n  } finally {\n    console.log('Releasing database connection');\n    client.release();\n  }\n}\n\nexport async function fetchTableData(\n  tableName: string,\n  sortBy?: string,\n  sortOrder?: 'asc' | 'desc'\n): Promise<TableDataResponse> {\n  const client = await pool.connect();\n  try {\n    let query = `SELECT * FROM ${sanitizeTableName(tableName)}`;\n    \n    if (sortBy) {\n      query += ` ORDER BY ${sanitizeTableName(sortBy)} ${sortOrder === 'desc' ? 'DESC' : 'ASC'}`;\n    }\n    \n    const result = await client.query(query);\n\n    return {\n      data: result.rows,\n      totalRows: result.rows.length\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function executeQuery(sql: string): Promise<QueryResult> {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(sql);\n    return {\n      rows: result.rows,\n      fields: result.fields.map(f => ({\n        name: f.name,\n        dataTypeID: f.dataTypeID\n      }))\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function updateTableSchema(\n  tableName: string,\n  schema: TableSchema\n): Promise<void> {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n\n    // Get current schema\n    const currentSchema = (await fetchSchema()).find(s => s.name === tableName);\n    if (!currentSchema) {\n      throw new Error(`Table ${tableName} not found`);\n    }\n\n    // Find columns to add, modify, and remove\n    const currentColumns = new Map(currentSchema.columns.map(c => [c.name, c]));\n    const newColumns = new Map(schema.columns.map(c => [c.name, c]));\n\n    // Columns to add\n    for (const [name, column] of newColumns) {\n      if (!currentColumns.has(name)) {\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          ADD COLUMN ${sanitizeTableName(name)} ${column.type}\n          ${column.nullable ? '' : 'NOT NULL'}\n          ${column.defaultValue ? `DEFAULT ${column.defaultValue}` : ''}\n        `);\n      }\n    }\n\n    // Columns to modify\n    for (const [name, column] of newColumns) {\n      const currentColumn = currentColumns.get(name);\n      if (currentColumn) {\n        // Modify column type if different\n        if (currentColumn.type !== column.type) {\n          await client.query(`\n            ALTER TABLE ${sanitizeTableName(tableName)}\n            ALTER COLUMN ${sanitizeTableName(name)}\n            TYPE ${column.type}\n            USING ${sanitizeTableName(name)}::${column.type}\n          `);\n        }\n\n        // Modify nullable constraint if different\n        if (currentColumn.nullable !== column.nullable) {\n          await client.query(`\n            ALTER TABLE ${sanitizeTableName(tableName)}\n            ALTER COLUMN ${sanitizeTableName(name)}\n            ${column.nullable ? 'DROP NOT NULL' : 'SET NOT NULL'}\n          `);\n        }\n\n        // Modify default value if different\n        if (currentColumn.defaultValue !== column.defaultValue) {\n          if (column.defaultValue) {\n            await client.query(`\n              ALTER TABLE ${sanitizeTableName(tableName)}\n              ALTER COLUMN ${sanitizeTableName(name)}\n              SET DEFAULT ${column.defaultValue}\n            `);\n          } else {\n            await client.query(`\n              ALTER TABLE ${sanitizeTableName(tableName)}\n              ALTER COLUMN ${sanitizeTableName(name)}\n              DROP DEFAULT\n            `);\n          }\n        }\n      }\n    }\n\n    // Columns to remove\n    for (const [name] of currentColumns) {\n      if (!newColumns.has(name)) {\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          DROP COLUMN ${sanitizeTableName(name)}\n        `);\n      }\n    }\n\n    // Update primary key if changed\n    if (JSON.stringify(currentSchema.primaryKey) !== JSON.stringify(schema.primaryKey)) {\n      // Drop existing primary key\n      await client.query(`\n        DO $$ \n        BEGIN \n          IF EXISTS (\n            SELECT 1 FROM information_schema.table_constraints \n            WHERE table_name = '${tableName}'\n            AND constraint_type = 'PRIMARY KEY'\n          ) THEN\n            EXECUTE (\n              SELECT 'ALTER TABLE ' || quote_ident('${tableName}') || \n                     ' DROP CONSTRAINT ' || quote_ident(constraint_name)\n              FROM information_schema.table_constraints\n              WHERE table_name = '${tableName}'\n              AND constraint_type = 'PRIMARY KEY'\n            );\n          END IF;\n        END $$;\n      `);\n\n      // Add new primary key if specified\n      if (schema.primaryKey && schema.primaryKey.length > 0) {\n        const primaryKeyColumns = schema.primaryKey\n          .map(col => sanitizeTableName(col))\n          .join(', ');\n        await client.query(`\n          ALTER TABLE ${sanitizeTableName(tableName)}\n          ADD PRIMARY KEY (${primaryKeyColumns})\n        `);\n      }\n    }\n\n    await client.query('COMMIT');\n  } catch (error) {\n    await client.query('ROLLBACK');\n    console.error('Error updating schema:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n\nexport async function createTableRow(\n  tableName: string,\n  data: Record<string, any>\n): Promise<void> {\n  const client = await pool.connect();\n  try {\n    const columns = Object.keys(data);\n    const values = Object.values(data);\n    const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');\n    \n    const query = `\n      INSERT INTO ${sanitizeTableName(tableName)} \n      (${columns.map(sanitizeTableName).join(', ')})\n      VALUES (${placeholders})\n    `;\n    \n    await client.query(query, values);\n  } catch (error) {\n    console.error('Error creating row:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n}\n", "import { startCase } from \"lodash-es\";\nimport type { Column } from \"~/types\";\nimport {\n  createColumnHelper,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  getSortedRowModel,\n  type SortingState,\n} from '@tanstack/react-table';\nimport { useMemo } from \"react\";\nimport { useSearchParams } from \"@remix-run/react\";\nimport { RowDetailsSidebar } from \"./RowDetailsSidebar\";\nimport { cn } from \"~/utils/cn\";\nimport { ArrowTopRightOnSquareIcon } from \"@heroicons/react/24/outline\";\n\ninterface DataViewProps {\n  columns: Column[];\n  rows: Record<string, any>[];\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onSort: (column: string) => void;\n  formatCellValue: (value: any) => string;\n  onEdit?: (rowIndex: number, data: Record<string, any>) => void;\n  onDelete?: (rowIndex: number) => void;\n  isEditable?: boolean;\n  selectedRow?: number;\n  onRowSelect?: (index: number | null) => void;\n}\n\nexport function DataView({\n  columns,\n  rows,\n  sortBy,\n  sortOrder,\n  onSort,\n  formatCellValue,\n  onEdit,\n  onDelete,\n  isEditable = false,\n  selectedRow,\n  onRowSelect,\n}: DataViewProps) {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const editingCell = searchParams.get(\"editCell\")?.split(\",\").map(Number);\n  const editedValue = searchParams.get(\"editValue\");\n\n  const handleStartEditing = (rowIndex: number, columnId: string) => {\n    if (isEditable) {\n      setSearchParams(prev => {\n        prev.set(\"editCell\", `${rowIndex},${columnId}`);\n        prev.set(\"editValue\", formatCellValue(rows[rowIndex][columnId]));\n        return prev;\n      }, { replace: true });\n    }\n  };\n\n  const handleFinishEditing = (rowIndex: number, columnId: string) => {\n    if (onEdit && editedValue !== null) {\n      onEdit(rowIndex, {\n        ...rows[rowIndex],\n        [columnId]: editedValue,\n      });\n    }\n    setSearchParams(prev => {\n      prev.delete(\"editCell\");\n      prev.delete(\"editValue\");\n      return prev;\n    }, { replace: true });\n  };\n\n  const columnHelper = createColumnHelper<Record<string, any>>();\n\n  const tableColumns = useMemo(() => [\n    ...columns.map((col) =>\n      columnHelper.accessor(col.name, {\n        header: () => (\n          <div className=\"flex items-center space-x-1\">\n            <span>{startCase(col.name)}</span>\n            <span className=\"text-xs text-gray-500\">({col.type})</span>\n          </div>\n        ),\n        cell: ({ row, column, getValue }) => {\n          const value = getValue();\n          const isEditing = isEditable && \n            editingCell?.[0] === row.index &&\n            String(column.id) === String(editingCell?.[1]);\n\n          if (isEditing) {\n            return (\n              <input\n                className=\"w-full px-2 py-1 border rounded bg-white dark:bg-gray-800\"\n                value={editedValue ?? formatCellValue(value)}\n                onChange={(e) =>\n                  setSearchParams(prev => {\n                    prev.set(\"editValue\", e.target.value);\n                    return prev;\n                  }, { replace: true })\n                }\n                onBlur={() => handleFinishEditing(row.index, column.id)}\n                autoFocus\n              />\n            );\n          }\n\n          return (\n            <div\n              className={cn(\n                \"overflow-hidden text-ellipsis\",\n                isEditable && \"cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\",\n                selectedRow === row.index && \"bg-blue-50 dark:bg-blue-900\"\n              )}\n              onClick={() => {\n                if (isEditable) {\n                  handleStartEditing(row.index, column.id);\n                }\n                if (onRowSelect) {\n                  onRowSelect(selectedRow === row.index ? null : row.index);\n                }\n              }}\n              style={{ maxWidth: '300px' }}\n            >\n              {formatCellValue(value)}\n            </div>\n          );\n        },\n      })\n    ),\n    ...(isEditable && onDelete\n      ? [\n          columnHelper.display({\n            id: \"actions\",\n            header: \"Actions\",\n            cell: ({ row }) => (\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={() => onDelete(row.index)}\n                  className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\"\n                >\n                  Delete\n                </button>\n              </div>\n            ),\n          }),\n        ]\n      : []),\n  ], [columns, isEditable, onDelete, selectedRow, editingCell, editedValue, formatCellValue]);\n\n  const table = useReactTable({\n    data: rows,\n    columns: tableColumns,\n    state: {\n      sorting: sortBy ? [{ id: sortBy, desc: sortOrder === \"desc\" }] : [],\n    },\n    onSortingChange: (updater) => {\n      const newSorting = (typeof updater === 'function' ? updater([]) : updater) as SortingState;\n      if (newSorting.length > 0) {\n        onSort(newSorting[0].id);\n      }\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    enableColumnResizing: true,\n    columnResizeMode: \"onChange\",\n  });\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 min-h-0 relative\">\n        <div className=\"absolute inset-0 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden\">\n          <div className=\"h-full overflow-auto\">\n            <table className=\"w-full divide-y divide-gray-200 dark:divide-gray-700\" style={{ width: table.getTotalSize() }}>\n              <thead className=\"sticky top-0 bg-white dark:bg-gray-900 shadow-sm z-10\">\n                {table.getHeaderGroups().map((headerGroup) => (\n                  <tr key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => (\n                      <th\n                        key={header.id}\n                        className=\"group relative px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer whitespace-nowrap select-none bg-white dark:bg-gray-900\"\n                        onClick={header.column.getToggleSortingHandler()}\n                        style={{\n                          width: header.getSize(),\n                          position: 'relative',\n                        }}\n                      >\n                        <div className=\"flex items-center justify-center\">\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          <span className=\"ml-1\">\n                            {header.column.getIsSorted() === \"asc\" ? \"\u2191\" : \"\"}\n                            {header.column.getIsSorted() === \"desc\" ? \"\u2193\" : \"\"}\n                          </span>\n                        </div>\n                        {header.column.getCanResize() && (\n                          <div\n                            onMouseDown={header.getResizeHandler()}\n                            onTouchStart={header.getResizeHandler()}\n                            className=\"absolute right-0 top-2 bottom-2 w-4 cursor-col-resize select-none touch-none group/resizer\"\n                            style={{ cursor: 'col-resize' }}\n                          >\n                            <div \n                              className={cn(\n                                \"absolute right-0 h-full\",\n                                header.column.getIsResizing()\n                                  ? \"bg-blue-500\"\n                                  : \"bg-gray-200 dark:bg-gray-700 group-hover/resizer:bg-blue-500\"\n                              )}\n                              style={{ width: '1px' }}\n                            />\n                          </div>\n                        )}\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                {table.getRowModel().rows.map((row) => (\n                  <tr\n                    key={row.id}\n                    className={cn(\n                      \"group hover:bg-gray-50 dark:hover:bg-gray-800\",\n                      selectedRow === row.index && \"bg-blue-50 dark:bg-blue-900\"\n                    )}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <td\n                        key={cell.id}\n                        className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\"\n                      >\n                        <div className=\"flex items-center\">\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                          {cell.column.id === columns[0].name && (\n                            <button\n                              type=\"button\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (onRowSelect) {\n                                  onRowSelect(selectedRow === row.index ? null : row.index);\n                                }\n                              }}\n                              className=\"ml-2 opacity-0 group-hover:opacity-100 transition-opacity p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-700\"\n                            >\n                              <ArrowTopRightOnSquareIcon className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n      <RowDetailsSidebar\n        row={rows[selectedRow ?? -1] ?? null}\n        columns={columns}\n        isOpen={selectedRow !== undefined}\n        onClose={() => {\n          if (onRowSelect) {\n            onRowSelect(null);\n          }\n        }}\n        formatCellValue={formatCellValue}\n      />\n    </div>\n  );\n}\n", "import { XMarkIcon } from \"@heroicons/react/24/outline\";\nimport type { Column } from \"~/types\";\nimport { startCase } from \"lodash-es\";\nimport { createPortal } from \"react-dom\";\nimport { useEffect, useState } from \"react\";\nimport { cn } from \"~/utils/cn\";\n\ninterface RowDetailsSidebarProps {\n  row: Record<string, any> | null;\n  columns: Column[];\n  isOpen: boolean;\n  onClose: () => void;\n  formatCellValue: (value: any) => string;\n}\n\nexport function RowDetailsSidebar({\n  row,\n  columns,\n  isOpen,\n  onClose,\n  formatCellValue,\n}: RowDetailsSidebarProps) {\n  const [mounted, setMounted] = useState(false);\n  console.log(row, isOpen);\n\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  const sidebarContent = (\n    <>\n      <div\n        className={cn(\n          \"fixed inset-0 bg-black/30 transition-opacity duration-300 ease-in-out z-40\",\n          isOpen ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n        )}\n        onClick={onClose}\n      />\n      <div\n        className={cn(\n          \"fixed inset-y-0 right-0 w-96 bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 shadow-xl transform transition-transform duration-300 ease-in-out z-50\",\n          isOpen ? \"translate-x-0\" : \"translate-x-full\"\n        )}\n      >\n        <div className=\"h-full flex flex-col\">\n          <div className=\"px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between\">\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">Row Details</h3>\n            <button\n              onClick={onClose}\n              className=\"p-1 rounded-md text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none\"\n            >\n              <XMarkIcon className=\"h-6 w-6\" />\n            </button>\n          </div>\n          {row && (\n            <div className=\"flex-1 overflow-y-auto p-4\">\n              <div className=\"space-y-4\">\n                {columns.map((column) => (\n                  <div key={column.name} className=\"space-y-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">\n                        {startCase(column.name)}\n                      </span>\n                      <span className=\"text-xs text-gray-400 dark:text-gray-500\">\n                        ({column.type})\n                      </span>\n                    </div>\n                    <div className=\"p-3 bg-gray-50 dark:bg-gray-900 rounded-md\">\n                      <pre className=\"text-sm font-mono text-gray-900 dark:text-gray-100 whitespace-pre-wrap break-words\">\n                        {formatCellValue(row[column.name])}\n                      </pre>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n\n  return createPortal(sidebarContent, document.body);\n}\n", "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n", "import { useState } from \"react\";\nimport type { TableSchema, Column } from \"~/types\";\n\ninterface TableStructureProps {\n  schema: TableSchema;\n  onSave?: (updatedSchema: TableSchema) => Promise<void>;\n  readOnly?: boolean;\n}\n\nexport function TableStructure({ schema, onSave, readOnly = false }: TableStructureProps) {\n  const [editingSchema, setEditingSchema] = useState<TableSchema>(schema);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const handleColumnChange = (index: number, field: keyof Column, value: string | boolean) => {\n    const newColumns = [...editingSchema.columns];\n    newColumns[index] = { ...newColumns[index], [field]: value };\n    setEditingSchema({ ...editingSchema, columns: newColumns });\n  };\n\n  const addColumn = () => {\n    const newColumn: Column = {\n      name: \"\",\n      type: \"text\",\n      nullable: true,\n    };\n    setEditingSchema({\n      ...editingSchema,\n      columns: [...editingSchema.columns, newColumn],\n    });\n  };\n\n  const removeColumn = (index: number) => {\n    const newColumns = editingSchema.columns.filter((_, i) => i !== index);\n    setEditingSchema({ ...editingSchema, columns: newColumns });\n  };\n\n  const handleSave = async () => {\n    if (onSave) {\n      await onSave(editingSchema);\n      setIsEditing(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setEditingSchema(schema);\n    setIsEditing(false);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n          Table Structure\n        </h2>\n        {!readOnly && (\n          <div className=\"space-x-2\">\n            {isEditing ? (\n              <>\n                <button\n                  onClick={handleSave}\n                  className=\"px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors\"\n                >\n                  Save Changes\n                </button>\n                <button\n                  onClick={handleCancel}\n                  className=\"px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors\"\n                >\n                  Cancel\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={() => setIsEditing(true)}\n                className=\"px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors\"\n              >\n                Edit Structure\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Column Name\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Data Type\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Nullable\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Default Value\n              </th>\n              {isEditing && (\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Actions\n                </th>\n              )}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n            {editingSchema.columns.map((column, index) => (\n              <tr key={index}>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {isEditing ? (\n                    <input\n                      type=\"text\"\n                      value={column.name}\n                      onChange={(e) => handleColumnChange(index, \"name\", e.target.value)}\n                      className=\"w-full px-2 py-1 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                    />\n                  ) : (\n                    <span className=\"text-gray-900 dark:text-white\">{column.name}</span>\n                  )}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {isEditing ? (\n                    <select\n                      value={column.type}\n                      onChange={(e) => handleColumnChange(index, \"type\", e.target.value)}\n                      className=\"w-full px-2 py-1 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                    >\n                      <option value=\"text\">Text</option>\n                      <option value=\"integer\">Integer</option>\n                      <option value=\"boolean\">Boolean</option>\n                      <option value=\"timestamp\">Timestamp</option>\n                      <option value=\"numeric\">Numeric</option>\n                    </select>\n                  ) : (\n                    <span className=\"text-gray-900 dark:text-white\">{column.type}</span>\n                  )}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {isEditing ? (\n                    <input\n                      type=\"checkbox\"\n                      checked={column.nullable}\n                      onChange={(e) => handleColumnChange(index, \"nullable\", e.target.checked)}\n                      className=\"rounded border-gray-300 dark:border-gray-700 text-purple-600 focus:ring-purple-500\"\n                    />\n                  ) : (\n                    <span className=\"text-gray-900 dark:text-white\">\n                      {column.nullable ? \"Yes\" : \"No\"}\n                    </span>\n                  )}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {isEditing ? (\n                    <input\n                      type=\"text\"\n                      value={column.defaultValue || \"\"}\n                      onChange={(e) => handleColumnChange(index, \"defaultValue\", e.target.value)}\n                      className=\"w-full px-2 py-1 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                    />\n                  ) : (\n                    <span className=\"text-gray-900 dark:text-white\">\n                      {column.defaultValue || \"-\"}\n                    </span>\n                  )}\n                </td>\n                {isEditing && (\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <button\n                      onClick={() => removeColumn(index)}\n                      className=\"text-red-600 hover:text-red-900 dark:hover:text-red-400\"\n                    >\n                      Remove\n                    </button>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {isEditing && (\n        <button\n          onClick={addColumn}\n          className=\"mt-4 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n        >\n          Add Column\n        </button>\n      )}\n\n      {schema.primaryKey && (\n        <div className=\"mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-md\">\n          <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">Primary Key</h3>\n          <p className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\">\n            {schema.primaryKey.join(\", \")}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n", "import type { TableSchema } from \"~/types\";\nimport { TableStructure } from \"./TableStructure\";\n\ninterface StructureViewProps {\n  schema: TableSchema;\n  onSave: (updatedSchema: TableSchema) => Promise<void>;\n}\n\nexport function StructureView({ schema, onSave }: StructureViewProps) {\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <div className=\"p-6\">\n        <TableStructure schema={schema} onSave={onSave} />\n      </div>\n    </div>\n  );\n}\n", "import { ReactNode } from \"react\";\nimport { startCase } from \"lodash-es\";\n\ninterface Tab {\n  id: string;\n  label: string;\n}\n\ninterface TabViewProps {\n  tabs: Tab[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n}\n\ninterface DataViewProps {\n  columns: string[];\n  rows: any[];\n  currentPage: number;\n  totalPages: number;\n  pageSize: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onPageChange: (page: number) => void;\n  onSort: (column: string) => void;\n  formatCellValue: (value: any) => string;\n}\n\nexport function TabView({ tabs, activeTab, onTabChange }: TabViewProps) {\n  return (\n    <div className=\"flex flex-col bg-white dark:bg-gray-900\">\n      <div className=\"flex border-b border-gray-200 dark:border-gray-700\">\n        {tabs.map((tab) => {\n          const isActive = activeTab === tab.id;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={`px-6 py-3 text-sm font-medium border-b-2 -mb-px ${\n                isActive\n                  ? \"border-purple-500 text-purple-600 dark:text-purple-400\"\n                  : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300 dark:hover:border-gray-600\"\n              }`}\n            >\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function DataView({\n  columns,\n  rows,\n  currentPage,\n  totalPages,\n  pageSize,\n  sortBy,\n  sortOrder,\n  onPageChange,\n  onSort,\n  formatCellValue,\n}: DataViewProps) {\n  return (\n    <div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              {columns.map((column) => (\n                <th\n                  key={column}\n                  scope=\"col\"\n                  className=\"group px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => onSort(column)}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{startCase(column.toLowerCase())}</span>\n                    <span className=\"invisible group-hover:visible\">\n                      {sortBy === column ? (\n                        <span>{sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\"}</span>\n                      ) : (\n                        \"\u2195\"\n                      )}\n                    </span>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n            {rows.map((row, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                {columns.map((column) => (\n                  <td\n                    key={column}\n                    className=\"px-6 py-4 whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-300 font-mono\"\n                  >\n                    {formatCellValue(row[column])}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n", "import { forwardRef } from \"react\";\nimport { cn } from \"~/utils/cn\";\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\" | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"primary\", size = \"md\", ...props }, ref) => {\n    return (\n      <button\n        ref={ref}\n        className={cn(\n          \"inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 disabled:opacity-50 disabled:pointer-events-none\",\n          {\n            \"bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\":\n              variant === \"primary\",\n            \"bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700\":\n              variant === \"secondary\",\n            \"bg-red-600 text-white hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600\":\n              variant === \"danger\",\n          },\n          {\n            \"text-sm px-3 py-1.5\": size === \"sm\",\n            \"text-sm px-4 py-2\": size === \"md\",\n            \"text-base px-6 py-3\": size === \"lg\",\n          },\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n", "import { useState } from \"react\";\nimport type { TableSchema } from \"~/types\";\nimport { Button } from \"./Button\";\n\ninterface CreateRowModalProps {\n  tableName: string;\n  fields: TableSchema[\"columns\"];\n  onClose: () => void;\n  onSubmit: (data: Record<string, any>) => Promise<void>;\n}\n\nexport function CreateRowModal({ tableName, fields, onClose, onSubmit }: CreateRowModalProps) {\n  const [formData, setFormData] = useState<Record<string, any>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    try {\n      await onSubmit(formData);\n      onClose();\n    } catch (error) {\n      // Error is handled by parent\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\">\n        <div className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" onClick={onClose} />\n        <div className=\"relative transform overflow-hidden rounded-lg bg-white dark:bg-gray-800 px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6\">\n          <div>\n            <h3 className=\"text-lg font-medium leading-6 text-gray-900 dark:text-white\">\n              Create Row in {tableName}\n            </h3>\n            <form onSubmit={handleSubmit} className=\"mt-4 space-y-4\">\n              {fields.map((field) => (\n                <div key={field.name}>\n                  <label htmlFor={field.name} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    {field.name}\n                    {!field.nullable && <span className=\"text-red-500 ml-1\">*</span>}\n                  </label>\n                  <input\n                    type={field.type === \"number\" ? \"number\" : \"text\"}\n                    name={field.name}\n                    id={field.name}\n                    required={!field.nullable}\n                    value={formData[field.name] || \"\"}\n                    onChange={(e) => setFormData(prev => ({ ...prev, [field.name]: e.target.value }))}\n                    className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white sm:text-sm\"\n                  />\n                </div>\n              ))}\n              <div className=\"mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3\">\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"inline-flex w-full justify-center sm:col-start-2\"\n                >\n                  {isSubmitting ? \"Creating...\" : \"Create\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  onClick={onClose}\n                  disabled={isSubmitting}\n                  className=\"mt-3 inline-flex w-full justify-center sm:col-start-1 sm:mt-0\"\n                  variant=\"secondary\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { type ReactNode } from \"react\";\n\ninterface PageContainerProps {\n  children: ReactNode;\n}\n\nexport function PageContainer({ children }: PageContainerProps) {\n  return (\n    <div className=\"h-screen p-4 bg-gray-100 dark:bg-gray-950\">\n      <div className=\"h-full bg-white dark:bg-gray-900 rounded-lg shadow-sm overflow-hidden flex flex-col\">\n        {children}\n      </div>\n    </div>\n  );\n}\n", "import { json, type LoaderFunctionArgs, type MetaFunction } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { fetchSchema } from \"~/utils/api\";\nimport { TableList } from \"~/components/TableList\";\nimport { PageContainer } from \"~/components/PageContainer\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Data Studio\" },\n    { name: \"description\", content: \"Database management studio\" },\n  ];\n};\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  try {\n    const tables = await fetchSchema();\n    return json({ tables });\n  } catch (error) {\n    console.error('Error loading tables:', error);\n    return json({ tables: [] });\n  }\n}\n\nexport default function Index() {\n  const { tables } = useLoaderData<typeof loader>();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredTables = tables.filter((table) =>\n    table.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search tables...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full p-3 pl-10 rounded-lg bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n          />\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <svg className=\"h-5 w-5 text-gray-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        <TableList tables={filteredTables} />\n      </div>\n    </PageContainer>\n  );\n}\n", "import { Link } from \"@remix-run/react\";\nimport type { TableSchema } from \"~/types\";\nimport { startCase, capitalize } from \"lodash-es\";\n\ninterface TableListProps {\n  tables: TableSchema[];\n}\n\nfunction formatBytes(bytes: number): string {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\n  let size = bytes;\n  let unitIndex = 0;\n  \n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  \n  return `${size.toFixed(1)} ${units[unitIndex]}`;\n}\n\nfunction formatNumber(num: number): string {\n  if (!num || num < 0) return '0';\n  return new Intl.NumberFormat().format(num);\n}\n\nfunction prettyPrintName(name: string): string {\n  return startCase(name.toLowerCase());\n}\n\nexport function TableList({ tables }: TableListProps) {\n  return (\n    <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n      {tables.map((table) => (\n        <Link\n          key={table.name}\n          to={`/${table.name}`}\n          className=\"group block w-full p-6 rounded-xl bg-white dark:bg-gray-800 shadow-sm border border-gray-200 dark:border-gray-700 hover:bg-white dark:hover:bg-gray-700 transition-all duration-200 transform hover:-translate-y-1 hover:shadow-xl\"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <h5 className=\"text-xl font-bold tracking-tight text-gray-900 dark:text-white group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors truncate max-w-[80%]\">\n              {prettyPrintName(table.name)}\n            </h5>\n            <span className=\"flex-shrink-0 flex items-center justify-center w-8 h-8 rounded-full bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-400\">\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n            </span>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{table.columns.length}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">columns</span>\n              </p>\n              <div className=\"mx-3 h-4 w-px bg-gray-300 dark:bg-gray-600\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{formatNumber(table.rowCount)}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">rows</span>\n              </p>\n              <div className=\"mx-3 h-4 w-px bg-gray-300 dark:bg-gray-600\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                <span className=\"font-bold\">{formatBytes(table.sizeInBytes)}</span>{' '}\n                <span className=\"italic text-gray-500 dark:text-gray-400\">size</span>\n              </p>\n            </div>\n            {Array.isArray(table.primaryKey) && table.primaryKey.length > 0 && (\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                <span className=\"font-normal text-gray-500 dark:text-gray-400\">Primary Key:</span>{' '}\n                <span className=\"font-mono text-purple-600 dark:text-purple-400\">\n                  {table.primaryKey.map(prettyPrintName).join(\", \")}\n                </span>\n              </p>\n            )}\n          </div>\n          <div className=\"mt-4 flex items-center text-sm text-purple-600 dark:text-purple-400\">\n            <span>View table</span>\n            <svg className=\"flex-shrink-0 w-4 h-4 ml-1 transition-transform group-hover:translate-x-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n}\n", "import { useState } from \"react\";\nimport { executeQuery } from \"~/utils/api\";\nimport { format } from \"sql-formatter\";\nimport type { QueryResult } from \"~/types\";\nimport { PageContainer } from \"~/components/PageContainer\";\n\nexport default function QueryPage() {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<QueryResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleExecuteQuery = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const result = await executeQuery(query);\n      setResults(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFormat = () => {\n    try {\n      const formatted = format(query, { language: 'postgresql' });\n      setQuery(formatted);\n    } catch (err) {\n      setError('Error formatting query');\n    }\n  };\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n        <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">SQL Query</h1>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between mb-2\">\n              <label htmlFor=\"query\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                SQL Query\n              </label>\n              <button\n                onClick={handleFormat}\n                className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300\"\n              >\n                Format Query\n              </button>\n            </div>\n            <textarea\n              id=\"query\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              rows={4}\n              className=\"w-full px-3 py-2 text-gray-700 dark:text-gray-300 border rounded-lg focus:outline-none focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600\"\n              placeholder=\"Enter your SQL query here...\"\n            />\n          </div>\n\n          <div>\n            <button\n              onClick={handleExecuteQuery}\n              disabled={isLoading || !query.trim()}\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? 'Executing...' : 'Execute Query'}\n            </button>\n          </div>\n\n          {error && (\n            <div className=\"p-4 bg-red-50 dark:bg-red-900/50 rounded-lg\">\n              <p className=\"text-sm text-red-700 dark:text-red-300\">{error}</p>\n            </div>\n          )}\n\n          {results && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Results</h2>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full divide-y divide-gray-300 dark:divide-gray-700\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                    <tr>\n                      {results.fields?.map((field) => (\n                        <th\n                          key={field.name}\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\"\n                        >\n                          {field.name}\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n                    {results.rows?.map((row, rowIndex) => (\n                      <tr key={rowIndex}>\n                        {Object.values(row).map((value, colIndex) => (\n                          <td\n                            key={colIndex}\n                            className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\"\n                          >\n                            {value === null ? 'NULL' : String(value)}\n                          </td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </PageContainer>\n  );\n}\n", "export default {'entry':{'module':'/build/entry.client-F52VPBZ7.js','imports':['/build/_shared/chunk-3VPVJWTU.js','/build/_shared/chunk-HDRCTI32.js','/build/_shared/chunk-RTBKPWXJ.js','/build/_shared/chunk-NO3FWBWP.js','/build/_shared/chunk-ULL77KT2.js','/build/_shared/chunk-UG3ISROB.js','/build/_shared/chunk-R3YRPWCC.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-D6ECVS3Z.js','imports':['/build/_shared/chunk-56WY5XKF.js','/build/_shared/chunk-2ITZUYVB.js','/build/_shared/chunk-UQY4TBPG.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/$tableName':{'id':'routes/$tableName','parentId':'root','path':':tableName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$tableName-2JM76B7Q.js','imports':['/build/_shared/chunk-FRNKA3J3.js','/build/_shared/chunk-47F22B26.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-OUCT5THC.js','imports':['/build/_shared/chunk-FRNKA3J3.js','/build/_shared/chunk-47F22B26.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/query':{'id':'routes/query','parentId':'root','path':'query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/query-6QIF55U7.js','imports':['/build/_shared/chunk-47F22B26.js'],'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'df5abd38','hmr':{'runtime':'/build/_shared/chunk-UG3ISROB.js','timestamp':1732577716500},'url':'/build/manifest-DF5ABD38.js'};", "\nimport * as entryServer from \"/Users/jacob/AI/drizzle-server/packages/web/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/$tableName.tsx\";\nimport * as route2 from \"./routes/_index.tsx\";\nimport * as route3 from \"./routes/query.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":true,\"v3_relativeSplatPath\":true,\"v3_throwAbortReason\":true,\"v3_routeConfig\":false,\"v3_singleFetch\":true,\"v3_lazyRouteDiscovery\":true,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/$tableName\": {\n      id: \"routes/$tableName\",\n      parentId: \"root\",\n      path: \":tableName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/query\": {\n      id: \"routes/query\",\n      parentId: \"root\",\n      path: \"query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    }\n  };"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAU3B;AARW,SAAR,cACL,SACA,oBACA,iBACA,cACA,aACA;AACA,MAAM,SAAS;AAAA,IACb,uBAAC,eAAY,SAAS,cAAc,KAAK,QAAQ,OAAjD;AAAA;AAAA;AAAA;AAAA,WAAsD;AAAA,EACxD;AAEA,yBAAgB,IAAI,gBAAgB,WAAW,GAExC,IAAI,SAAS,oBAAoB,QAAQ;AAAA,IAC9C,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,CAAC;AACH;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACF;;;;;;AAGA,SAAS,aAAa,2BAA2B;AACjD,SAAS,0BAA0B;;;ACXnC,SAAS,eAAe,YAAY,WAAW,gBAAgB;AA+C3D,mBAAAA,eAAA;AAtCJ,IAAM,eAAe,cAA4C,MAAS;AAEnE,SAAS,cAAc,EAAE,SAAS,GAAkC;AACzE,MAAM,CAAC,OAAO,QAAQ,IAAI,SAAgB,MAAM;AAE9C,QAAI,OAAO,SAAW;AAAa,aAAO;AAE1C,QAAM,QAAQ,aAAa,QAAQ,OAAO;AAC1C,WAAI,UAEG,OAAO,WAAW,8BAA8B,EAAE,UAAU,SAAS;AAAA,EAC9E,CAAC;AAED,YAAU,MAAM;AACd,QAAM,OAAO,OAAO,SAAS;AAG7B,SAAK,UAAU,OAAO,SAAS,MAAM,GAGrC,KAAK,UAAU,IAAI,KAAK,GAGxB,aAAa,QAAQ,SAAS,KAAK;AAAA,EACrC,GAAG,CAAC,KAAK,CAAC;AAEV,MAAM,cAAc,MAAM;AACxB,YAAQ,IAAI,cAAc,GAC1B,SAAS,CAAC,cAAe,cAAc,UAAU,SAAS,OAAQ;AAAA,EACpE;AAGA,mBAAU,MAAM;AAEd,IADa,OAAO,SAAS,gBACxB,UAAU,IAAI,KAAK;AAAA,EAC1B,GAAG,CAAC,CAAC,GAGH,gBAAAA,QAAC,aAAa,UAAb,EAAsB,OAAO,EAAE,OAAO,YAAY,GAChD,YADH;AAAA;AAAA;AAAA;AAAA,SAEA;AAEJ;AAEO,SAAS,WAAW;AACzB,MAAM,UAAU,WAAW,YAAY;AACvC,MAAI,YAAY;AACd,UAAM,IAAI,MAAM,8CAA8C;AAEhE,SAAO;AACT;;;AC3DA,SAAS,MAAM,mBAAmB;AAElC,SAAS,kBAAkB,WAAW,mBAAmB,cAAe,SAAS,gBAAgB;AAkBnF,mBAAAC,eAAA;AAhBP,SAAS,OAAO,EAAE,SAAS,GAAkC;AAClE,MAAM,EAAE,OAAO,YAAY,IAAI,SAAS,GAClC,WAAW,YAAY;AAO7B,SACE,gBAAAA,QAAC,SAAI,WAAU,iCAEb;AAAA,oBAAAA,QAAC,SAAI,WAAU,oCACb,0BAAAA,QAAC,SAAI,WAAU,wEACb;AAAA,sBAAAA,QAAC,SAAI,WAAU,kDACb;AAAA,wBAAAA,QAAC,SAAI,WAAU,wCACb,0BAAAA,QAAC,QAAG,WAAU,mDAAkD,2BAAhE;AAAA;AAAA;AAAA;AAAA,eAA2E,KAD7E;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA,QAAC,SAAI,WAAU,8BACZ,UAfM;AAAA,UACjB,EAAE,MAAM,UAAU,MAAM,KAAK,MAAM,UAAU;AAAA,UAC7C,EAAE,MAAM,aAAa,MAAM,UAAU,MAAM,aAAa;AAAA,QAC1D,EAYwB,IAAI,CAAC,SAAS;AACxB,cAAM,WAAW,SAAS,aAAa,KAAK;AAC5C,iBACE,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,IAAI,KAAK;AAAA,cACT,WAAW,GACT,WACI,+DACA;AAAA,cAGN;AAAA,gCAAAA;AAAA,kBAAC,KAAK;AAAA,kBAAL;AAAA,oBACC,WAAW,GACT,WACI,qCACA;AAAA,oBAEN,eAAY;AAAA;AAAA,kBANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAOA;AAAA,gBACC,KAAK;AAAA;AAAA;AAAA,YAhBD,KAAK;AAAA,YADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAkBA;AAAA,QAEJ,CAAC,KAxBH;AAAA;AAAA;AAAA;AAAA,eAyBA;AAAA,WA7BF;AAAA;AAAA;AAAA;AAAA,aA8BA;AAAA,MACA,gBAAAA,QAAC,SAAI,WAAU,0BACb,0BAAAA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,WAAU;AAAA,UAET;AAAA,sBAAU,SACT,gBAAAA,QAAC,WAAQ,WAAU,0DAAnB;AAAA;AAAA;AAAA;AAAA,mBAA0E,IAE1E,gBAAAA,QAAC,YAAS,WAAU,0DAApB;AAAA;AAAA;AAAA;AAAA,mBAA2E;AAAA,YAE5E,UAAU,SAAS,eAAe;AAAA;AAAA;AAAA,QATrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,KAXF;AAAA;AAAA;AAAA;AAAA,aAYA;AAAA,SA5CF;AAAA;AAAA;AAAA;AAAA,WA6CA,KA9CF;AAAA;AAAA;AAAA;AAAA,WA+CA;AAAA,IAGA,gBAAAA,QAAC,SAAI,WAAU,gBACb,0BAAAA,QAAC,UAAK,WAAU,YACb,YADH;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,OAxDF;AAAA;AAAA;AAAA;AAAA,SAyDA;AAEJ;;;AFhDQ,mBAAAC,eAAA;AAVD,IAAM,QAAuB,MAAM;AAAA,EAC1C,EAAE,KAAK,cAAc,MAAM,iBAAO;AAAC,GAG7B,cAAc,IAAI,YAAY;AAErB,SAAR,MAAuB;AAC5B,SACE,gBAAAA,QAAC,UAAK,MAAK,MAAK,WAAU,UACxB;AAAA,oBAAAA,QAAC,UACC;AAAA,sBAAAA,QAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,gBAAAA,QAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,gBAAAA,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,gBAAAA,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAJT;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,gBAAAA,QAAC,UAAK,WAAU,sCACd,0BAAAA,QAAC,uBAAoB,QAAQ,aAC3B,0BAAAA,QAAC,iBACC;AAAA,sBAAAA,QAAC,UACC,0BAAAA,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ,KADV;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,gBAAAA,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,gBAAAA,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,gBAAAA,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,MACZ,gBAAAA,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,aAAoB;AAAA,SAPtB;AAAA;AAAA;AAAA;AAAA,WAQA,KATF;AAAA;AAAA;AAAA;AAAA,WAUA,KAXF;AAAA;AAAA;AAAA;AAAA,WAYA;AAAA,OAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA;AAEJ;;;AG7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,YAA8D;AACvE,SAAS,eAAe,mBAAAC,kBAAiB,iBAAiB;;;ACD1D,OAAO,QAAQ;AACf,IAAM,EAAE,KAAK,IAAI,IAEJ,OAAO,IAAI,KAAK;AAAA,EAC3B,MAAM,QAAQ,IAAI,UAAU;AAAA,EAC5B,MAAM,QAAQ,IAAI,UAAU;AAAA,EAC5B,UAAU,QAAQ,IAAI,cAAc;AAAA,EACpC,UAAU,QAAQ,IAAI,cAAc;AAAA,EACpC,MAAM,SAAS,QAAQ,IAAI,UAAU,MAAM;AAC7C,CAAC;AAGD,KAAK,GAAG,SAAS,CAAC,QAAQ;AACxB,UAAQ,MAAM,mCAAmC,GAAG,GACpD,QAAQ,KAAK,EAAE;AACjB,CAAC;;;ACfD,SAAS,cAAc;AAOhB,SAAS,kBAAkB,MAAsB;AACtD,MAAI,CAAC;AACH,UAAM,IAAI,MAAM,sCAAsC;AAIxD,MAAM,YAAY,KAAK,QAAQ,kBAAkB,EAAE;AAGnD,MAAI,CAAC,YAAY,KAAK,SAAS;AAC7B,UAAM,IAAI,MAAM,+CAA+C;AAIjE,MAAI,UAAU,WAAW;AACvB,UAAM,IAAI,MAAM,8BAA8B;AAIhD,SAAO,UAAU,YAAY;AAC/B;AA2EA,IAAM,eAAN,MAAmB;AAAA,EAAnB;AACE,SAAiB,0BAA0B;AAC3C,SAAiB,2BAA2B;AAAA;AAAA,EAEpC,kBAAkB,WAA4B;AACpD,WAAO,KAAK,wBAAwB,KAAK,SAAS;AAAA,EACpD;AAAA,EAEQ,mBAAmB,YAA6B;AACtD,WAAO,KAAK,yBAAyB,KAAK,UAAU;AAAA,EACtD;AAAA,EAEQ,YAAY,OAAoB;AACtC,WAAI,UAAU,OAAa,SACvB,OAAO,SAAU,WAAiB,MAAM,SAAS,IACjD,OAAO,SAAU,YAAkB,QAAQ,SAAS,UACjD,IAAI,MAAM,SAAS,EAAE,QAAQ,MAAM,IAAI;AAAA,EAChD;AAAA,EAEA,mBAAmB,WAAmB,SAAuC;AAC3E,QAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,YAAM,IAAI,MAAM,oBAAoB;AAGtC,QAAI,QAAQ,kBAAkB;AAE9B,QAAI,WAAW,OAAO,KAAK,OAAO,EAAE,SAAS,GAAG;AAC9C,UAAM,kBAAkB,OAAO,QAAQ,OAAO,EAC3C,OAAO,CAAC,CAAC,MAAM,MAAM,KAAK,mBAAmB,MAAM,CAAC,EACpD,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,IAAI,aAAa,KAAK,YAAY,KAAK,GAAG,EACnE,KAAK,OAAO;AAEf,MAAI,oBACF,SAAS,UAAU;AAAA;AAIvB,WAAO,OAAO,QAAQ,GAAG;AAAA,EAC3B;AAAA,EAEA,oBAAoB,WAA2B;AAC7C,QAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,YAAM,IAAI,MAAM,oBAAoB;AAGtC,QAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAiBe;AAAA;AAAA;AAAA,4BAGL;AAAA;AAAA;AAIxB,WAAO,OAAO,KAAK;AAAA,EACrB;AAAA,EAEA,oBACE,WACA,YACA,MACQ;AACR,QAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,YAAM,IAAI,MAAM,oBAAoB;AAGtC,QAAI,CAAC,KAAK,mBAAmB,WAAW,MAAM;AAC5C,YAAM,IAAI,MAAM,iCAAiC;AAGnD,QAAM,aAAa,OAAO,QAAQ,IAAI,EACnC,OAAO,CAAC,CAAC,MAAM,MAAM,KAAK,mBAAmB,MAAM,CAAC,EACpD,IAAI,CAAC,CAAC,QAAQ,KAAK,MAAM,IAAI,aAAa,KAAK,YAAY,KAAK,GAAG,EACnE,KAAK,IAAI,GAEN,QAAQ;AAAA,gBACF;AAAA,YACJ;AAAA,eACG,WAAW,aAAa,KAAK,YAAY,WAAW,KAAK;AAAA;AAAA;AAIpE,WAAO,OAAO,KAAK;AAAA,EACrB;AAAA,EAEA,oBACE,WACA,YACQ;AACR,QAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,YAAM,IAAI,MAAM,oBAAoB;AAGtC,QAAI,CAAC,KAAK,mBAAmB,WAAW,MAAM;AAC5C,YAAM,IAAI,MAAM,iCAAiC;AAGnD,QAAM,QAAQ;AAAA,qBACG;AAAA,eACN,WAAW,aAAa,KAAK,YAAY,WAAW,KAAK;AAAA;AAGpE,WAAO,OAAO,KAAK;AAAA,EACrB;AAAA,EAEA,oBAAoB,WAAmB,MAAmC;AACxE,QAAI,CAAC,KAAK,kBAAkB,SAAS;AACnC,YAAM,IAAI,MAAM,oBAAoB;AAGtC,QAAM,UAAU,OAAO,KAAK,IAAI,EAAE;AAAA,MAAO,CAAC,WACxC,KAAK,mBAAmB,MAAM;AAAA,IAChC,GACM,SAAS,QAAQ,IAAI,CAAC,WAAW,KAAK,YAAY,KAAK,MAAM,CAAC,CAAC,GAE/D,QAAQ;AAAA,qBACG,eAAe,QAAQ,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,IAAI;AAAA,gBAC1D,OAAO,KAAK,IAAI;AAAA;AAAA;AAI5B,WAAO,OAAO,KAAK;AAAA,EACrB;AACF,GAEa,eAAe,IAAI,aAAa;;;ACnO7C,eAAsB,cAAsC;AAC1D,UAAQ,IAAI,+BAA+B;AAC3C,MAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,MAAI;AACF,YAAQ,IAAI,2CAA2C;AACvD,QAAM,SAAS,MAAM,OAAO,MAWzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA4CF;AAED,mBAAQ,IAAI,8CAA8C,OAAO,KAAK,MAAM,GACrE,OAAO,KAAK,IAAI,UAAQ;AAAA,MAC7B,MAAM,IAAI;AAAA,MACV,SAAS,IAAI;AAAA,MACb,YAAY,IAAI,eAAe;AAAA,MAC/B,UAAU,SAAS,IAAI,aAAa,KAAK,EAAE;AAAA,MAC3C,aAAa,SAAS,IAAI,cAAc,KAAK,EAAE;AAAA,IACjD,EAAE;AAAA,EACJ,SAAS,OAAP;AACA,kBAAQ,MAAM,0BAA0B,KAAK,GACvC;AAAA,EACR,UAAE;AACA,YAAQ,IAAI,+BAA+B,GAC3C,OAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,eACpB,WACA,QACA,WAC4B;AAC5B,MAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,MAAI;AACF,QAAI,QAAQ,iBAAiB,kBAAkB,SAAS;AAExD,IAAI,WACF,SAAS,aAAa,kBAAkB,MAAM,KAAK,cAAc,SAAS,SAAS;AAGrF,QAAM,SAAS,MAAM,OAAO,MAAM,KAAK;AAEvC,WAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,WAAW,OAAO,KAAK;AAAA,IACzB;AAAA,EACF,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,aAAa,KAAmC;AACpE,MAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,MAAI;AACF,QAAM,SAAS,MAAM,OAAO,MAAM,GAAG;AACrC,WAAO;AAAA,MACL,MAAM,OAAO;AAAA,MACb,QAAQ,OAAO,OAAO,IAAI,QAAM;AAAA,QAC9B,MAAM,EAAE;AAAA,QACR,YAAY,EAAE;AAAA,MAChB,EAAE;AAAA,IACJ;AAAA,EACF,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,kBACpB,WACA,QACe;AACf,MAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,MAAI;AACF,UAAM,OAAO,MAAM,OAAO;AAG1B,QAAM,iBAAiB,MAAM,YAAY,GAAG,KAAK,OAAK,EAAE,SAAS,SAAS;AAC1E,QAAI,CAAC;AACH,YAAM,IAAI,MAAM,SAAS,qBAAqB;AAIhD,QAAM,iBAAiB,IAAI,IAAI,cAAc,QAAQ,IAAI,OAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GACpE,aAAa,IAAI,IAAI,OAAO,QAAQ,IAAI,OAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;AAG/D,aAAW,CAAC,MAAM,MAAM,KAAK;AAC3B,MAAK,eAAe,IAAI,IAAI,KAC1B,MAAM,OAAO,MAAM;AAAA,wBACH,kBAAkB,SAAS;AAAA,uBAC5B,kBAAkB,IAAI,KAAK,OAAO;AAAA,YAC7C,OAAO,WAAW,KAAK;AAAA,YACvB,OAAO,eAAe,WAAW,OAAO,iBAAiB;AAAA,SAC5D;AAKL,aAAW,CAAC,MAAM,MAAM,KAAK,YAAY;AACvC,UAAM,gBAAgB,eAAe,IAAI,IAAI;AAC7C,MAAI,kBAEE,cAAc,SAAS,OAAO,QAChC,MAAM,OAAO,MAAM;AAAA,0BACH,kBAAkB,SAAS;AAAA,2BAC1B,kBAAkB,IAAI;AAAA,mBAC9B,OAAO;AAAA,oBACN,kBAAkB,IAAI,MAAM,OAAO;AAAA,WAC5C,GAIC,cAAc,aAAa,OAAO,YACpC,MAAM,OAAO,MAAM;AAAA,0BACH,kBAAkB,SAAS;AAAA,2BAC1B,kBAAkB,IAAI;AAAA,cACnC,OAAO,WAAW,kBAAkB;AAAA,WACvC,GAIC,cAAc,iBAAiB,OAAO,iBACpC,OAAO,eACT,MAAM,OAAO,MAAM;AAAA,4BACH,kBAAkB,SAAS;AAAA,6BAC1B,kBAAkB,IAAI;AAAA,4BACvB,OAAO;AAAA,aACtB,IAED,MAAM,OAAO,MAAM;AAAA,4BACH,kBAAkB,SAAS;AAAA,6BAC1B,kBAAkB,IAAI;AAAA;AAAA,aAEtC;AAAA;AAOT,aAAW,CAAC,IAAI,KAAK;AACnB,MAAK,WAAW,IAAI,IAAI,KACtB,MAAM,OAAO,MAAM;AAAA,wBACH,kBAAkB,SAAS;AAAA,wBAC3B,kBAAkB,IAAI;AAAA,SACrC;AAKL,QAAI,KAAK,UAAU,cAAc,UAAU,MAAM,KAAK,UAAU,OAAO,UAAU,MAE/E,MAAM,OAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,kCAKS;AAAA;AAAA;AAAA;AAAA,sDAIoB;AAAA;AAAA;AAAA,oCAGlB;AAAA;AAAA;AAAA;AAAA;AAAA,OAK7B,GAGG,OAAO,cAAc,OAAO,WAAW,SAAS,IAAG;AACrD,UAAM,oBAAoB,OAAO,WAC9B,IAAI,SAAO,kBAAkB,GAAG,CAAC,EACjC,KAAK,IAAI;AACZ,YAAM,OAAO,MAAM;AAAA,wBACH,kBAAkB,SAAS;AAAA,6BACtB;AAAA,SACpB;AAAA;AAIL,UAAM,OAAO,MAAM,QAAQ;AAAA,EAC7B,SAAS,OAAP;AACA,gBAAM,OAAO,MAAM,UAAU,GAC7B,QAAQ,MAAM,0BAA0B,KAAK,GACvC;AAAA,EACR,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;AAEA,eAAsB,eACpB,WACA,MACe;AACf,MAAM,SAAS,MAAM,KAAK,QAAQ;AAClC,MAAI;AACF,QAAM,UAAU,OAAO,KAAK,IAAI,GAC1B,SAAS,OAAO,OAAO,IAAI,GAC3B,eAAe,OAAO,IAAI,CAAC,GAAG,MAAM,IAAI,IAAI,GAAG,EAAE,KAAK,IAAI,GAE1D,QAAQ;AAAA,oBACE,kBAAkB,SAAS;AAAA,SACtC,QAAQ,IAAI,iBAAiB,EAAE,KAAK,IAAI;AAAA,gBACjC;AAAA;AAGZ,UAAM,OAAO,MAAM,OAAO,MAAM;AAAA,EAClC,SAAS,OAAP;AACA,kBAAQ,MAAM,uBAAuB,KAAK,GACpC;AAAA,EACR,UAAE;AACA,WAAO,QAAQ;AAAA,EACjB;AACF;;;AC3RA,SAAS,aAAAC,kBAAiB;AAE1B;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAEK;AACP,SAAS,eAAe;AACxB,SAAS,uBAAuB;;;ACXhC,SAAS,iBAAiB;AAE1B,SAAS,iBAAiB;AAC1B,SAAS,oBAAoB;AAC7B,SAAS,aAAAC,YAAW,YAAAC,iBAAgB;;;ACJpC,SAAS,YAA6B;AACtC,SAAS,eAAe;AAEjB,SAAS,MAAM,QAAsB;AAC1C,SAAO,QAAQ,KAAK,MAAM,CAAC;AAC7B;;;AD4BI,mBACE,UAAAC,eADF;AAlBG,SAAS,kBAAkB;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAA2B;AACzB,MAAM,CAAC,SAAS,UAAU,IAAIC,UAAS,EAAK;AAQ5C,MAPA,QAAQ,IAAI,KAAK,MAAM,GAEvBC,WAAU,OACR,WAAW,EAAI,GACR,MAAM,WAAW,EAAK,IAC5B,CAAC,CAAC,GAED,CAAC;AAAS,WAAO;AAErB,MAAM,iBACJ,gBAAAF,QAAA,YACE;AAAA,oBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA,SAAS,gBAAgB;AAAA,QAC3B;AAAA,QACA,SAAS;AAAA;AAAA,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA;AAAA,IACA,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA,SAAS,kBAAkB;AAAA,QAC7B;AAAA,QAEA,0BAAAA,QAAC,SAAI,WAAU,wBACb;AAAA,0BAAAA,QAAC,SAAI,WAAU,6FACb;AAAA,4BAAAA,QAAC,QAAG,WAAU,wDAAuD,2BAArE;AAAA;AAAA;AAAA;AAAA,mBAAgF;AAAA,YAChF,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,SAAS;AAAA,gBACT,WAAU;AAAA,gBAEV,0BAAAA,QAAC,aAAU,WAAU,aAArB;AAAA;AAAA;AAAA;AAAA,uBAA+B;AAAA;AAAA,cAJjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKA;AAAA,eAPF;AAAA;AAAA;AAAA;AAAA,iBAQA;AAAA,UACC,OACC,gBAAAA,QAAC,SAAI,WAAU,8BACb,0BAAAA,QAAC,SAAI,WAAU,aACZ,kBAAQ,IAAI,CAAC,WACZ,gBAAAA,QAAC,SAAsB,WAAU,aAC/B;AAAA,4BAAAA,QAAC,SAAI,WAAU,+BACb;AAAA,8BAAAA,QAAC,UAAK,WAAU,wDACb,oBAAU,OAAO,IAAI,KADxB;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,cACA,gBAAAA,QAAC,UAAK,WAAU,4CAA2C;AAAA;AAAA,gBACvD,OAAO;AAAA,gBAAK;AAAA,mBADhB;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,iBANF;AAAA;AAAA;AAAA;AAAA,mBAOA;AAAA,YACA,gBAAAA,QAAC,SAAI,WAAU,8CACb,0BAAAA,QAAC,SAAI,WAAU,sFACZ,0BAAgB,IAAI,OAAO,IAAI,CAAC,KADnC;AAAA;AAAA;AAAA;AAAA,mBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,eAbQ,OAAO,MAAjB;AAAA;AAAA;AAAA;AAAA,iBAcA,CACD,KAjBH;AAAA;AAAA;AAAA;AAAA,iBAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,iBAoBA;AAAA,aA/BJ;AAAA;AAAA;AAAA;AAAA,eAiCA;AAAA;AAAA,MAvCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwCA;AAAA,OAhDF;AAAA;AAAA;AAAA;AAAA,SAiDA;AAGF,SAAO,aAAa,gBAAgB,SAAS,IAAI;AACnD;;;ADxEA,SAAS,iCAAiC;AAgE9B,mBAAAG,eAAA;AAhDL,SAAS,SAAS;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,EACA;AACF,GAAkB;AAChB,MAAM,CAAC,cAAc,eAAe,IAAI,gBAAgB,GAClD,cAAc,aAAa,IAAI,UAAU,GAAG,MAAM,GAAG,EAAE,IAAI,MAAM,GACjE,cAAc,aAAa,IAAI,WAAW,GAE1C,qBAAqB,CAAC,UAAkB,aAAqB;AACjE,IAAI,cACF,gBAAgB,WACd,KAAK,IAAI,YAAY,GAAG,YAAY,UAAU,GAC9C,KAAK,IAAI,aAAa,gBAAgB,KAAK,QAAQ,EAAE,QAAQ,CAAC,CAAC,GACxD,OACN,EAAE,SAAS,GAAK,CAAC;AAAA,EAExB,GAEM,sBAAsB,CAAC,UAAkB,aAAqB;AAClE,IAAI,UAAU,gBAAgB,QAC5B,OAAO,UAAU;AAAA,MACf,GAAG,KAAK,QAAQ;AAAA,MAChB,CAAC,QAAQ,GAAG;AAAA,IACd,CAAC,GAEH,gBAAgB,WACd,KAAK,OAAO,UAAU,GACtB,KAAK,OAAO,WAAW,GAChB,OACN,EAAE,SAAS,GAAK,CAAC;AAAA,EACtB,GAEM,eAAe,mBAAwC,GAEvD,eAAe,QAAQ,MAAM;AAAA,IACjC,GAAG,QAAQ;AAAA,MAAI,CAAC,QACd,aAAa,SAAS,IAAI,MAAM;AAAA,QAC9B,QAAQ,MACN,gBAAAA,QAAC,SAAI,WAAU,+BACb;AAAA,0BAAAA,QAAC,UAAM,UAAAC,WAAU,IAAI,IAAI,KAAzB;AAAA;AAAA;AAAA;AAAA,iBAA2B;AAAA,UAC3B,gBAAAD,QAAC,UAAK,WAAU,yBAAwB;AAAA;AAAA,YAAE,IAAI;AAAA,YAAK;AAAA,eAAnD;AAAA;AAAA;AAAA;AAAA,iBAAoD;AAAA,aAFtD;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QAEF,MAAM,CAAC,EAAE,KAAK,QAAQ,SAAS,MAAM;AACnC,cAAM,QAAQ,SAAS;AAKvB,iBAJkB,cAChB,cAAc,CAAC,MAAM,IAAI,SACzB,OAAO,OAAO,EAAE,MAAM,OAAO,cAAc,CAAC,CAAC,IAI3C,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,WAAU;AAAA,cACV,OAAO,eAAe,gBAAgB,KAAK;AAAA,cAC3C,UAAU,CAAC,MACT,gBAAgB,WACd,KAAK,IAAI,aAAa,EAAE,OAAO,KAAK,GAC7B,OACN,EAAE,SAAS,GAAK,CAAC;AAAA,cAEtB,QAAQ,MAAM,oBAAoB,IAAI,OAAO,OAAO,EAAE;AAAA,cACtD,WAAS;AAAA;AAAA,YAVX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWA,IAKF,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,WAAW;AAAA,gBACT;AAAA,gBACA,cAAc;AAAA,gBACd,gBAAgB,IAAI,SAAS;AAAA,cAC/B;AAAA,cACA,SAAS,MAAM;AACb,gBAAI,cACF,mBAAmB,IAAI,OAAO,OAAO,EAAE,GAErC,eACF,YAAY,gBAAgB,IAAI,QAAQ,OAAO,IAAI,KAAK;AAAA,cAE5D;AAAA,cACA,OAAO,EAAE,UAAU,QAAQ;AAAA,cAE1B,0BAAgB,KAAK;AAAA;AAAA,YAhBxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAiBA;AAAA,QAEJ;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IACA,GAAI,cAAc,WACd;AAAA,MACE,aAAa,QAAQ;AAAA,QACnB,IAAI;AAAA,QACJ,QAAQ;AAAA,QACR,MAAM,CAAC,EAAE,IAAI,MACX,gBAAAA,QAAC,SAAI,WAAU,+BACb,0BAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,MAAM,SAAS,IAAI,KAAK;AAAA,YACjC,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,KANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,MAEJ,CAAC;AAAA,IACH,IACA,CAAC;AAAA,EACP,GAAG,CAAC,SAAS,YAAY,UAAU,aAAa,aAAa,aAAa,eAAe,CAAC,GAEpF,QAAQ,cAAc;AAAA,IAC1B,MAAM;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,MACL,SAAS,SAAS,CAAC,EAAE,IAAI,QAAQ,MAAM,cAAc,OAAO,CAAC,IAAI,CAAC;AAAA,IACpE;AAAA,IACA,iBAAiB,CAAC,YAAY;AAC5B,UAAM,aAAc,OAAO,WAAY,aAAa,QAAQ,CAAC,CAAC,IAAI;AAClE,MAAI,WAAW,SAAS,KACtB,OAAO,WAAW,CAAC,EAAE,EAAE;AAAA,IAE3B;AAAA,IACA,iBAAiB,gBAAgB;AAAA,IACjC,mBAAmB,kBAAkB;AAAA,IACrC,sBAAsB;AAAA,IACtB,kBAAkB;AAAA,EACpB,CAAC;AAED,SACE,gBAAAA,QAAC,SAAI,WAAU,wBACb;AAAA,oBAAAA,QAAC,SAAI,WAAU,2BACb,0BAAAA,QAAC,SAAI,WAAU,2FACb,0BAAAA,QAAC,SAAI,WAAU,wBACb,0BAAAA,QAAC,WAAM,WAAU,wDAAuD,OAAO,EAAE,OAAO,MAAM,aAAa,EAAE,GAC3G;AAAA,sBAAAA,QAAC,WAAM,WAAU,yDACd,gBAAM,gBAAgB,EAAE,IAAI,CAAC,gBAC5B,gBAAAA,QAAC,QACE,sBAAY,QAAQ,IAAI,CAAC,WACxB,gBAAAA;AAAA,QAAC;AAAA;AAAA,UAEC,WAAU;AAAA,UACV,SAAS,OAAO,OAAO,wBAAwB;AAAA,UAC/C,OAAO;AAAA,YACL,OAAO,OAAO,QAAQ;AAAA,YACtB,UAAU;AAAA,UACZ;AAAA,UAEA;AAAA,4BAAAA,QAAC,SAAI,WAAU,oCACZ;AAAA;AAAA,gBACC,OAAO,OAAO,UAAU;AAAA,gBACxB,OAAO,WAAW;AAAA,cACpB;AAAA,cACA,gBAAAA,QAAC,UAAK,WAAU,QACb;AAAA,uBAAO,OAAO,YAAY,MAAM,QAAQ,WAAM;AAAA,gBAC9C,OAAO,OAAO,YAAY,MAAM,SAAS,WAAM;AAAA,mBAFlD;AAAA;AAAA;AAAA;AAAA,qBAGA;AAAA,iBARF;AAAA;AAAA;AAAA;AAAA,mBASA;AAAA,YACC,OAAO,OAAO,aAAa,KAC1B,gBAAAA;AAAA,cAAC;AAAA;AAAA,gBACC,aAAa,OAAO,iBAAiB;AAAA,gBACrC,cAAc,OAAO,iBAAiB;AAAA,gBACtC,WAAU;AAAA,gBACV,OAAO,EAAE,QAAQ,aAAa;AAAA,gBAE9B,0BAAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,WAAW;AAAA,sBACT;AAAA,sBACA,OAAO,OAAO,cAAc,IACxB,gBACA;AAAA,oBACN;AAAA,oBACA,OAAO,EAAE,OAAO,MAAM;AAAA;AAAA,kBAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAeA;AAAA;AAAA;AAAA,QAlCG,OAAO;AAAA,QADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqCA,CACD,KAxCM,YAAY,IAArB;AAAA;AAAA;AAAA;AAAA,aAyCA,CACD,KA5CH;AAAA;AAAA;AAAA;AAAA,aA6CA;AAAA,MACA,gBAAAA,QAAC,WAAM,WAAU,2EACd,gBAAM,YAAY,EAAE,KAAK,IAAI,CAAC,QAC7B,gBAAAA;AAAA,QAAC;AAAA;AAAA,UAEC,WAAW;AAAA,YACT;AAAA,YACA,gBAAgB,IAAI,SAAS;AAAA,UAC/B;AAAA,UAEC,cAAI,gBAAgB,EAAE,IAAI,CAAC,SAC1B,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,WAAU;AAAA,cAEV,0BAAAA,QAAC,SAAI,WAAU,qBACZ;AAAA,2BAAW,KAAK,OAAO,UAAU,MAAM,KAAK,WAAW,CAAC;AAAA,gBACxD,KAAK,OAAO,OAAO,QAAQ,CAAC,EAAE,QAC7B,gBAAAA;AAAA,kBAAC;AAAA;AAAA,oBACC,MAAK;AAAA,oBACL,SAAS,CAAC,MAAM;AACd,wBAAE,eAAe,GACjB,EAAE,gBAAgB,GACd,eACF,YAAY,gBAAgB,IAAI,QAAQ,OAAO,IAAI,KAAK;AAAA,oBAE5D;AAAA,oBACA,WAAU;AAAA,oBAEV,0BAAAA,QAAC,6BAA0B,WAAU,8CAArC;AAAA;AAAA;AAAA;AAAA,2BAAgF;AAAA;AAAA,kBAXlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAYA;AAAA,mBAfJ;AAAA;AAAA;AAAA;AAAA,qBAiBA;AAAA;AAAA,YApBK,KAAK;AAAA,YADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAsBA,CACD;AAAA;AAAA,QA9BI,IAAI;AAAA,QADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgCA,CACD,KAnCH;AAAA;AAAA;AAAA;AAAA,aAoCA;AAAA,SAnFF;AAAA;AAAA;AAAA;AAAA,WAoFA,KArFF;AAAA;AAAA;AAAA;AAAA,WAsFA,KAvFF;AAAA;AAAA;AAAA;AAAA,WAwFA,KAzFF;AAAA;AAAA;AAAA;AAAA,WA0FA;AAAA,IACA,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,KAAK,KAAK,eAAe,EAAE,KAAK;AAAA,QAChC;AAAA,QACA,QAAQ,gBAAgB;AAAA,QACxB,SAAS,MAAM;AACb,UAAI,eACF,YAAY,IAAI;AAAA,QAEpB;AAAA,QACA;AAAA;AAAA,MATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA;AAAA,OAtGF;AAAA;AAAA;AAAA;AAAA,SAuGA;AAEJ;;;AGhRA,SAAS,YAAAE,iBAAgB;AAmDjB,SAMM,YAAAC,WANN,UAAAC,eAAA;AA1CD,SAAS,eAAe,EAAE,QAAQ,QAAQ,WAAW,GAAM,GAAwB;AACxF,MAAM,CAAC,eAAe,gBAAgB,IAAIF,UAAsB,MAAM,GAChE,CAAC,WAAW,YAAY,IAAIA,UAAS,EAAK,GAE1C,qBAAqB,CAAC,OAAe,OAAqB,UAA4B;AAC1F,QAAM,aAAa,CAAC,GAAG,cAAc,OAAO;AAC5C,eAAW,KAAK,IAAI,EAAE,GAAG,WAAW,KAAK,GAAG,CAAC,KAAK,GAAG,MAAM,GAC3D,iBAAiB,EAAE,GAAG,eAAe,SAAS,WAAW,CAAC;AAAA,EAC5D,GAEM,YAAY,MAAM;AACtB,QAAM,YAAoB;AAAA,MACxB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AACA,qBAAiB;AAAA,MACf,GAAG;AAAA,MACH,SAAS,CAAC,GAAG,cAAc,SAAS,SAAS;AAAA,IAC/C,CAAC;AAAA,EACH,GAEM,eAAe,CAAC,UAAkB;AACtC,QAAM,aAAa,cAAc,QAAQ,OAAO,CAAC,GAAG,MAAM,MAAM,KAAK;AACrE,qBAAiB,EAAE,GAAG,eAAe,SAAS,WAAW,CAAC;AAAA,EAC5D;AAcA,SACE,gBAAAE,QAAC,SAAI,WAAU,aACb;AAAA,oBAAAA,QAAC,SAAI,WAAU,qCACb;AAAA,sBAAAA,QAAC,QAAG,WAAU,uDAAsD,+BAApE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACC,CAAC,YACA,gBAAAA,QAAC,SAAI,WAAU,aACZ,sBACC,gBAAAA,QAAAD,WAAA,EACE;AAAA,wBAAAC;AAAA,UAAC;AAAA;AAAA,YACC,SAvBG,YAAY;AAC7B,cAAI,WACF,MAAM,OAAO,aAAa,GAC1B,aAAa,EAAK;AAAA,YAEtB;AAAA,YAmBgB,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,QACA,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAtBK,MAAM;AACzB,+BAAiB,MAAM,GACvB,aAAa,EAAK;AAAA,YACpB;AAAA,YAoBgB,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,WAZF;AAAA;AAAA;AAAA;AAAA,aAaA,IAEA,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS,MAAM,aAAa,EAAI;AAAA,UAChC,WAAU;AAAA,UACX;AAAA;AAAA,QAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,KAtBJ;AAAA;AAAA;AAAA;AAAA,aAwBA;AAAA,SA7BJ;AAAA;AAAA;AAAA;AAAA,WA+BA;AAAA,IAEA,gBAAAA,QAAC,SAAI,WAAU,mBACb,0BAAAA,QAAC,WAAM,WAAU,4DACf;AAAA,sBAAAA,QAAC,WAAM,WAAU,+BACf,0BAAAA,QAAC,QACC;AAAA,wBAAAA,QAAC,QAAG,WAAU,qGAAoG,2BAAlH;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA,QAAC,QAAG,WAAU,qGAAoG,yBAAlH;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA,QAAC,QAAG,WAAU,qGAAoG,wBAAlH;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,gBAAAA,QAAC,QAAG,WAAU,qGAAoG,6BAAlH;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACC,aACC,gBAAAA,QAAC,QAAG,WAAU,qGAAoG,uBAAlH;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAhBJ;AAAA;AAAA;AAAA;AAAA,aAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,aAoBA;AAAA,MACA,gBAAAA,QAAC,WAAM,WAAU,2EACd,wBAAc,QAAQ,IAAI,CAAC,QAAQ,UAClC,gBAAAA,QAAC,QACC;AAAA,wBAAAA,QAAC,QAAG,WAAU,+BACX,sBACC,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAO,OAAO;AAAA,YACd,UAAU,CAAC,MAAM,mBAAmB,OAAO,QAAQ,EAAE,OAAO,KAAK;AAAA,YACjE,WAAU;AAAA;AAAA,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,IAEA,gBAAAA,QAAC,UAAK,WAAU,iCAAiC,iBAAO,QAAxD;AAAA;AAAA;AAAA;AAAA,eAA6D,KATjE;AAAA;AAAA;AAAA;AAAA,eAWA;AAAA,QACA,gBAAAA,QAAC,QAAG,WAAU,+BACX,sBACC,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,OAAO,OAAO;AAAA,YACd,UAAU,CAAC,MAAM,mBAAmB,OAAO,QAAQ,EAAE,OAAO,KAAK;AAAA,YACjE,WAAU;AAAA,YAEV;AAAA,8BAAAA,QAAC,YAAO,OAAM,QAAO,oBAArB;AAAA;AAAA;AAAA;AAAA,qBAAyB;AAAA,cACzB,gBAAAA,QAAC,YAAO,OAAM,WAAU,uBAAxB;AAAA;AAAA;AAAA;AAAA,qBAA+B;AAAA,cAC/B,gBAAAA,QAAC,YAAO,OAAM,WAAU,uBAAxB;AAAA;AAAA;AAAA;AAAA,qBAA+B;AAAA,cAC/B,gBAAAA,QAAC,YAAO,OAAM,aAAY,yBAA1B;AAAA;AAAA;AAAA;AAAA,qBAAmC;AAAA,cACnC,gBAAAA,QAAC,YAAO,OAAM,WAAU,uBAAxB;AAAA;AAAA;AAAA;AAAA,qBAA+B;AAAA;AAAA;AAAA,UATjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA,IAEA,gBAAAA,QAAC,UAAK,WAAU,iCAAiC,iBAAO,QAAxD;AAAA;AAAA;AAAA;AAAA,eAA6D,KAdjE;AAAA;AAAA;AAAA;AAAA,eAgBA;AAAA,QACA,gBAAAA,QAAC,QAAG,WAAU,+BACX,sBACC,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAS,OAAO;AAAA,YAChB,UAAU,CAAC,MAAM,mBAAmB,OAAO,YAAY,EAAE,OAAO,OAAO;AAAA,YACvE,WAAU;AAAA;AAAA,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,IAEA,gBAAAA,QAAC,UAAK,WAAU,iCACb,iBAAO,WAAW,QAAQ,QAD7B;AAAA;AAAA;AAAA;AAAA,eAEA,KAXJ;AAAA;AAAA;AAAA;AAAA,eAaA;AAAA,QACA,gBAAAA,QAAC,QAAG,WAAU,+BACX,sBACC,gBAAAA;AAAA,UAAC;AAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAO,OAAO,gBAAgB;AAAA,YAC9B,UAAU,CAAC,MAAM,mBAAmB,OAAO,gBAAgB,EAAE,OAAO,KAAK;AAAA,YACzE,WAAU;AAAA;AAAA,UAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,IAEA,gBAAAA,QAAC,UAAK,WAAU,iCACb,iBAAO,gBAAgB,OAD1B;AAAA;AAAA;AAAA;AAAA,eAEA,KAXJ;AAAA;AAAA;AAAA;AAAA,eAaA;AAAA,QACC,aACC,gBAAAA,QAAC,QAAG,WAAU,+BACZ,0BAAAA;AAAA,UAAC;AAAA;AAAA,YACC,SAAS,MAAM,aAAa,KAAK;AAAA,YACjC,WAAU;AAAA,YACX;AAAA;AAAA,UAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA,KANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,WAlEK,OAAT;AAAA;AAAA;AAAA;AAAA,aAoEA,CACD,KAvEH;AAAA;AAAA;AAAA;AAAA,aAwEA;AAAA,SA9FF;AAAA;AAAA;AAAA;AAAA,WA+FA,KAhGF;AAAA;AAAA;AAAA;AAAA,WAiGA;AAAA,IAEC,aACC,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,SAAS;AAAA,QACT,WAAU;AAAA,QACX;AAAA;AAAA,MAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA;AAAA,IAGD,OAAO,cACN,gBAAAA,QAAC,SAAI,WAAU,mDACb;AAAA,sBAAAA,QAAC,QAAG,WAAU,qDAAoD,2BAAlE;AAAA;AAAA;AAAA;AAAA,aAA6E;AAAA,MAC7E,gBAAAA,QAAC,OAAE,WAAU,iDACV,iBAAO,WAAW,KAAK,IAAI,KAD9B;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OApJJ;AAAA;AAAA;AAAA;AAAA,SAsJA;AAEJ;;;AC7LQ,mBAAAC,eAAA;AAJD,SAAS,cAAc,EAAE,QAAQ,OAAO,GAAuB;AACpE,SACE,gBAAAA,QAAC,SAAI,WAAU,+CACb,0BAAAA,QAAC,SAAI,WAAU,OACb,0BAAAA,QAAC,kBAAe,QAAgB,UAAhC;AAAA;AAAA;AAAA;AAAA,SAAgD,KADlD;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;;;ACfA,SAAS,aAAAC,kBAAiB;AAiCd,mBAAAC,eAAA;AAPL,SAAS,QAAQ,EAAE,MAAM,WAAW,YAAY,GAAiB;AACtE,SACE,gBAAAA,QAAC,SAAI,WAAU,2CACb,0BAAAA,QAAC,SAAI,WAAU,sDACZ,eAAK,IAAI,CAAC,QAAQ;AACjB,QAAM,WAAW,cAAc,IAAI;AACnC,WACE,gBAAAA;AAAA,MAAC;AAAA;AAAA,QAEC,SAAS,MAAM,YAAY,IAAI,EAAE;AAAA,QACjC,WAAW,mDACT,WACI,2DACA;AAAA,QAGL,cAAI;AAAA;AAAA,MARA,IAAI;AAAA,MADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA;AAAA,EAEJ,CAAC,KAhBH;AAAA;AAAA;AAAA;AAAA,SAiBA,KAlBF;AAAA;AAAA;AAAA;AAAA,SAmBA;AAEJ;;;AClDA,SAAS,kBAAkB;AAWrB,mBAAAC,gBAAA;AAHC,IAAM,SAAS;AAAA,EACpB,CAAC,EAAE,WAAW,UAAU,WAAW,OAAO,MAAM,GAAG,MAAM,GAAG,QAExD,gBAAAA;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA,WAAW;AAAA,QACT;AAAA,QACA;AAAA,UACE,oFACE,YAAY;AAAA,UACd,kJACE,YAAY;AAAA,UACd,gFACE,YAAY;AAAA,QAChB;AAAA,QACA;AAAA,UACE,uBAAuB,SAAS;AAAA,UAChC,qBAAqB,SAAS;AAAA,UAC9B,uBAAuB,SAAS;AAAA,QAClC;AAAA,QACA;AAAA,MACF;AAAA,MACC,GAAG;AAAA;AAAA,IAnBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA;AAGN;;;AClCA,SAAS,YAAAC,iBAAgB;AA+BjB,mBAAAC,gBAAA;AApBD,SAAS,eAAe,EAAE,WAAW,QAAQ,SAAS,SAAS,GAAwB;AAC5F,MAAM,CAAC,UAAU,WAAW,IAAIC,UAA8B,CAAC,CAAC,GAC1D,CAAC,cAAc,eAAe,IAAIA,UAAS,EAAK;AAetD,SACE,gBAAAD,SAAC,SAAI,WAAU,sCACb,0BAAAA,SAAC,SAAI,WAAU,mFACb;AAAA,oBAAAA,SAAC,SAAI,WAAU,8DAA6D,SAAS,WAArF;AAAA;AAAA;AAAA;AAAA,WAA8F;AAAA,IAC9F,gBAAAA,SAAC,SAAI,WAAU,kKACb,0BAAAA,SAAC,SACC;AAAA,sBAAAA,SAAC,QAAG,WAAU,+DAA8D;AAAA;AAAA,QAC3D;AAAA,WADjB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,gBAAAA,SAAC,UAAK,UAtBK,OAAO,MAAuB;AACjD,UAAE,eAAe,GACjB,gBAAgB,EAAI;AACpB,YAAI;AACF,gBAAM,SAAS,QAAQ,GACvB,QAAQ;AAAA,QACV,QAAE;AAAA,QAEF,UAAE;AACA,0BAAgB,EAAK;AAAA,QACvB;AAAA,MACF,GAWwC,WAAU,kBACrC;AAAA,eAAO,IAAI,CAAC,UACX,gBAAAA,SAAC,SACC;AAAA,0BAAAA,SAAC,WAAM,SAAS,MAAM,MAAM,WAAU,8DACnC;AAAA,kBAAM;AAAA,YACN,CAAC,MAAM,YAAY,gBAAAA,SAAC,UAAK,WAAU,qBAAoB,iBAApC;AAAA;AAAA;AAAA;AAAA,mBAAqC;AAAA,eAF3D;AAAA;AAAA;AAAA;AAAA,iBAGA;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAM,MAAM,SAAS,WAAW,WAAW;AAAA,cAC3C,MAAM,MAAM;AAAA,cACZ,IAAI,MAAM;AAAA,cACV,UAAU,CAAC,MAAM;AAAA,cACjB,OAAO,SAAS,MAAM,IAAI,KAAK;AAAA,cAC/B,UAAU,CAAC,MAAM,YAAY,WAAS,EAAE,GAAG,MAAM,CAAC,MAAM,IAAI,GAAG,EAAE,OAAO,MAAM,EAAE;AAAA,cAChF,WAAU;AAAA;AAAA,YAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQA;AAAA,aAbQ,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA,eAcA,CACD;AAAA,QACD,gBAAAA,SAAC,SAAI,WAAU,uEACb;AAAA,0BAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,UAAU;AAAA,cACV,WAAU;AAAA,cAET,yBAAe,gBAAgB;AAAA;AAAA,YALlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,SAAS;AAAA,cACT,UAAU;AAAA,cACV,WAAU;AAAA,cACV,SAAQ;AAAA,cACT;AAAA;AAAA,YAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQA;AAAA,aAhBF;AAAA;AAAA;AAAA;AAAA,eAiBA;AAAA,WAnCF;AAAA;AAAA;AAAA;AAAA,aAoCA;AAAA,SAxCF;AAAA;AAAA;AAAA;AAAA,WAyCA,KA1CF;AAAA;AAAA;AAAA;AAAA,WA2CA;AAAA,OA7CF;AAAA;AAAA;AAAA;AAAA,SA8CA,KA/CF;AAAA;AAAA;AAAA;AAAA,SAgDA;AAEJ;;;ACtEM,mBAAAE,gBAAA;AAHC,SAAS,cAAc,EAAE,SAAS,GAAuB;AAC9D,SACE,gBAAAA,SAAC,SAAI,WAAU,6CACb,0BAAAA,SAAC,SAAI,WAAU,uFACZ,YADH;AAAA;AAAA;AAAA;AAAA,SAEA,KAHF;AAAA;AAAA;AAAA;AAAA,SAIA;AAEJ;;;AZ2JU,mBAAAC,gBAAA;AA7JV,eAAsB,OAAO,EAAE,QAAQ,QAAQ,GAAuB;AACpE,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG,GACzB,SAAS,IAAI,aAAa,IAAI,QAAQ,KAAK,QAC3C,YAAY,IAAI,aAAa,IAAI,WAAW,GAC5C,YAAY,IAAI,aAAa,IAAI,KAAK,KAAK,QAC3C,kBAAkB,IAAI,aAAa,IAAI,iBAAiB,MAAM,QAE9D,YAAY,OAAO;AACzB,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,0BAA0B,EAAE,QAAQ,IAAI,CAAC;AAG9D,MAAI;AACF,QAAM,CAAC,SAAS,SAAS,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC7C,YAAY;AAAA,MACZ,eAAe,WAAW,QAAQ,SAAS;AAAA,IAC7C,CAAC,GAEK,SAAS,QAAQ,KAAK,OAAK,EAAE,SAAS,SAAS;AACrD,QAAI,CAAC;AACH,YAAM,IAAI,SAAS,mBAAmB,EAAE,QAAQ,IAAI,CAAC;AAGvD,WAAO,KAAK;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAP;AACA,kBAAQ,MAAM,uBAAuB,cAAc,KAAK,GAClD,IAAI,SAAS,4BAA4B,EAAE,QAAQ,IAAI,CAAC;AAAA,EAChE;AACF;AAEA,eAAsB,OAAO,EAAE,SAAS,OAAO,GAAuB;AACpE,MAAM,YAAY,OAAO;AACzB,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,0BAA0B,EAAE,QAAQ,IAAI,CAAC;AAG9D,MAAM,WAAW,MAAM,QAAQ,SAAS,GAClC,OAAO,OAAO,YAAY,QAAQ;AAExC,MAAI;AACF,iBAAM,eAAe,WAAW,IAAI,GAC7B,KAAK,EAAE,SAAS,GAAK,CAAC;AAAA,EAC/B,SAAS,OAAP;AACA,kBAAQ,MAAM,+BAA+B,cAAc,KAAK,GAC1D,IAAI,SAAS,sBAAsB,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC1D;AACF;AAEe,SAAR,aAA8B;AACnC,MAAM,EAAE,WAAW,QAAQ,WAAW,WAAW,gBAAgB,IAAI,cAA6B,GAC5F,CAAC,cAAc,eAAe,IAAIC,iBAAgB,GAClD,SAAS,UAAU,GAEnB,SAAS,aAAa,IAAI,QAAQ,GAClC,YAAY,aAAa,IAAI,WAAW,GAExC,aAAa,CAAC,WAAmB;AACrC,QAAM,eAAe,WAAW,UAAU,cAAc,QAAQ,SAAS;AACzE,oBAAgB,WACd,KAAK,IAAI,UAAU,MAAM,GACzB,KAAK,IAAI,aAAa,YAAY,GAC3B,KACR;AAAA,EACH,GAEM,kBAAkB,CAAC,QAAgB;AACvC,oBAAgB,WACd,KAAK,IAAI,OAAO,GAAG,GACZ,KACR;AAAA,EACH,GAEM,0BAA0B,CAAC,SAAkB;AACjD,oBAAgB,WACV,OACF,KAAK,IAAI,mBAAmB,MAAM,IAElC,KAAK,OAAO,iBAAiB,GAExB,KACR;AAAA,EACH,GAEM,qBAAqB,OAAO,kBAA+B;AAC/D,QAAI;AACF,YAAM,kBAAkB,WAAW,aAAa,GAEhD,OAAO,SAAS,OAAO;AAAA,IACzB,SAAS,OAAP;AACA,cAAQ,MAAM,4BAA4B,KAAK,GAC/C,MAAM,4CAA4C;AAAA,IACpD;AAAA,EACF,GAEM,kBAAkB,OAAO,SAA8B;AAC3D,QAAI;AACF,UAAM,WAAW,IAAI,SAAS;AAC9B,aAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC7C,iBAAS,OAAO,KAAK,KAAK;AAAA,MAC5B,CAAC,GACD,MAAM,OAAO,UAAU,EAAE,QAAQ,OAAO,CAAC,GACzC,wBAAwB,EAAK;AAAA,IAC/B,SAAS,OAAP;AACA,cAAQ,MAAM,yBAAyB,KAAK,GAC5C,MAAM,yCAAyC;AAAA,IACjD;AAAA,EACF,GAEM,aAAa,OAAO,UAAkB,SAA8B;AACxE,QAAI;AAEF,cAAQ,IAAI,gBAAgB,UAAU,IAAI;AAAA,IAC5C,SAAS,OAAP;AACA,cAAQ,MAAM,sBAAsB,KAAK;AAAA,IAC3C;AAAA,EACF,GAEM,eAAe,OAAO,aAAqB;AAC/C,QAAI;AAEF,cAAQ,IAAI,iBAAiB,QAAQ;AAAA,IACvC,SAAS,OAAP;AACA,cAAQ,MAAM,uBAAuB,KAAK;AAAA,IAC5C;AAAA,EACF,GAEM,kBAAkB,CAAC,UAAuB;AAC9C,QAAI,UAAU;AAAM,aAAO;AAC3B,QAAI,UAAU;AAAW,aAAO;AAGhC,QAAI,OAAO,SAAU;AACnB,UAAI;AACF,eAAO,KAAK,UAAU,OAAO,MAAM,CAAC;AAAA,MACtC,QAAE;AACA,eAAO,OAAO,KAAK;AAAA,MACrB;AAGF,WAAO,OAAO,KAAK;AAAA,EACrB;AAOA,SACE,gBAAAD,SAAC,iBACC;AAAA,oBAAAA,SAAC,SAAI,WAAU,aACb;AAAA,sBAAAA,SAAC,SAAI,WAAU,yCACb;AAAA,wBAAAA,SAAC,QAAG,WAAU,wDACX,uBADH;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACC,cAAc,UACb,gBAAAA,SAAC,SAAI,WAAU,cACb,0BAAAA,SAAC,UAAO,SAAS,MAAM,wBAAwB,EAAI,GAAG,0BAAtD;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,WATJ;AAAA;AAAA;AAAA;AAAA,aAWA;AAAA,MACA,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MArBK;AAAA,YACX,EAAE,OAAO,QAAQ,IAAI,OAAO;AAAA,YAC5B,EAAE,OAAO,aAAa,IAAI,YAAY;AAAA,UACxC;AAAA,UAmBQ;AAAA,UACA,aAAa;AAAA;AAAA,QAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIA;AAAA,SAjBF;AAAA;AAAA;AAAA;AAAA,WAkBA;AAAA,IACA,gBAAAA,SAAC,SAAI,WAAU,sCACZ,wBAAc,SACb,YACE,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,SAAS,QAAQ,WAAW,CAAC;AAAA,QAC7B,MAAM,UAAU;AAAA,QAChB,QAAQ,UAAU;AAAA,QAClB;AAAA,QACA,QAAQ;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,YAAY;AAAA;AAAA,MATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,IACE,OAEJ,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,QAAQ;AAAA;AAAA,MAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAGA,KAnBJ;AAAA;AAAA;AAAA;AAAA,WAqBA;AAAA,IACC,mBACC,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA,QAAQ,QAAQ,WAAW,CAAC;AAAA,QAC5B,SAAS,MAAM,wBAAwB,EAAK;AAAA,QAC5C,UAAU;AAAA;AAAA,MAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA;AAAA,OAhDJ;AAAA;AAAA;AAAA;AAAA,SAkDA;AAEJ;;;Aa1NA;AAAA;AAAA;AAAA,gBAAAE;AAAA,EAAA;AAAA;AAAA,SAAS,QAAAC,aAAwD;AACjE,SAAS,iBAAAC,sBAAqB;AAC9B,SAAS,YAAAC,iBAAgB;;;ACFzB,SAAS,QAAAC,aAAY;AAErB,SAAS,aAAAC,kBAA6B;AAsC1B,mBAAAC,gBAAA;AAhCZ,SAAS,YAAY,OAAuB;AAC1C,MAAM,QAAQ,CAAC,KAAK,MAAM,MAAM,MAAM,IAAI,GACtC,OAAO,OACP,YAAY;AAEhB,SAAO,QAAQ,QAAQ,YAAY,MAAM,SAAS;AAChD,YAAQ,MACR;AAGF,SAAO,GAAG,KAAK,QAAQ,CAAC,KAAK,MAAM,SAAS;AAC9C;AAEA,SAAS,aAAa,KAAqB;AACzC,SAAI,CAAC,OAAO,MAAM,IAAU,MACrB,IAAI,KAAK,aAAa,EAAE,OAAO,GAAG;AAC3C;AAEA,SAAS,gBAAgB,MAAsB;AAC7C,SAAOD,WAAU,KAAK,YAAY,CAAC;AACrC;AAEO,SAAS,UAAU,EAAE,OAAO,GAAmB;AACpD,SACE,gBAAAC,SAAC,SAAI,WAAU,wDACZ,iBAAO,IAAI,CAAC,UACX,gBAAAA;AAAA,IAACF;AAAA,IAAA;AAAA,MAEC,IAAI,IAAI,MAAM;AAAA,MACd,WAAU;AAAA,MAEV;AAAA,wBAAAE,SAAC,SAAI,WAAU,0CACb;AAAA,0BAAAA,SAAC,QAAG,WAAU,sKACX,0BAAgB,MAAM,IAAI,KAD7B;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,gBAAAA,SAAC,UAAK,WAAU,gJACd,0BAAAA,SAAC,SAAI,WAAU,WAAU,MAAK,QAAO,QAAO,gBAAe,SAAQ,aACjE,0BAAAA,SAAC,UAAK,eAAc,SAAQ,gBAAe,SAAQ,aAAa,GAAG,GAAE,qIAArE;AAAA;AAAA;AAAA;AAAA,iBAAuM,KADzM;AAAA;AAAA;AAAA;AAAA,iBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,iBAIA;AAAA,aARF;AAAA;AAAA;AAAA;AAAA,eASA;AAAA,QACA,gBAAAA,SAAC,SAAI,WAAU,aACb;AAAA,0BAAAA,SAAC,SAAI,WAAU,qBACb;AAAA,4BAAAA,SAAC,OAAE,WAAU,4CACX;AAAA,8BAAAA,SAAC,UAAK,WAAU,aAAa,gBAAM,QAAQ,UAA3C;AAAA;AAAA;AAAA;AAAA,qBAAkD;AAAA,cAAQ;AAAA,cAC1D,gBAAAA,SAAC,UAAK,WAAU,2CAA0C,uBAA1D;AAAA;AAAA;AAAA;AAAA,qBAAiE;AAAA,iBAFnE;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,YACA,gBAAAA,SAAC,SAAI,WAAU,gDAAf;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAAA,YAC5D,gBAAAA,SAAC,OAAE,WAAU,4CACX;AAAA,8BAAAA,SAAC,UAAK,WAAU,aAAa,uBAAa,MAAM,QAAQ,KAAxD;AAAA;AAAA;AAAA;AAAA,qBAA0D;AAAA,cAAQ;AAAA,cAClE,gBAAAA,SAAC,UAAK,WAAU,2CAA0C,oBAA1D;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAAA,iBAFhE;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,YACA,gBAAAA,SAAC,SAAI,WAAU,gDAAf;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAAA,YAC5D,gBAAAA,SAAC,OAAE,WAAU,4CACX;AAAA,8BAAAA,SAAC,UAAK,WAAU,aAAa,sBAAY,MAAM,WAAW,KAA1D;AAAA;AAAA;AAAA;AAAA,qBAA4D;AAAA,cAAQ;AAAA,cACpE,gBAAAA,SAAC,UAAK,WAAU,2CAA0C,oBAA1D;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAAA,iBAFhE;AAAA;AAAA;AAAA;AAAA,mBAGA;AAAA,eAdF;AAAA;AAAA;AAAA;AAAA,iBAeA;AAAA,UACC,MAAM,QAAQ,MAAM,UAAU,KAAK,MAAM,WAAW,SAAS,KAC5D,gBAAAA,SAAC,OAAE,WAAU,qDACX;AAAA,4BAAAA,SAAC,UAAK,WAAU,gDAA+C,4BAA/D;AAAA;AAAA;AAAA;AAAA,mBAA2E;AAAA,YAAQ;AAAA,YACnF,gBAAAA,SAAC,UAAK,WAAU,kDACb,gBAAM,WAAW,IAAI,eAAe,EAAE,KAAK,IAAI,KADlD;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,eAJF;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA,aAvBJ;AAAA;AAAA;AAAA;AAAA,eAyBA;AAAA,QACA,gBAAAA,SAAC,SAAI,WAAU,uEACb;AAAA,0BAAAA,SAAC,UAAK,0BAAN;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAAA,UAChB,gBAAAA,SAAC,SAAI,WAAU,6EAA4E,MAAK,QAAO,QAAO,gBAAe,SAAQ,aACnI,0BAAAA,SAAC,UAAK,eAAc,SAAQ,gBAAe,SAAQ,aAAa,GAAG,GAAE,kBAArE;AAAA;AAAA;AAAA;AAAA,iBAAoF,KADtF;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA;AAAA;AAAA,IA7CK,MAAM;AAAA,IADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,CACD,KAlDH;AAAA;AAAA;AAAA;AAAA,SAmDA;AAEJ;;;ADjDU,mBAAAC,gBAAA;AA7BH,IAAM,OAAqB,MACzB;AAAA,EACL,EAAE,OAAO,cAAc;AAAA,EACvB,EAAE,MAAM,eAAe,SAAS,6BAA6B;AAC/D;AAGF,eAAsBC,QAAO,EAAE,QAAQ,GAAuB;AAC5D,MAAI;AACF,QAAM,SAAS,MAAM,YAAY;AACjC,WAAOC,MAAK,EAAE,OAAO,CAAC;AAAA,EACxB,SAAS,OAAP;AACA,mBAAQ,MAAM,yBAAyB,KAAK,GACrCA,MAAK,EAAE,QAAQ,CAAC,EAAE,CAAC;AAAA,EAC5B;AACF;AAEe,SAAR,QAAyB;AAC9B,MAAM,EAAE,OAAO,IAAIC,eAA6B,GAC1C,CAAC,YAAY,aAAa,IAAIC,UAAS,EAAE,GAEzC,iBAAiB,OAAO;AAAA,IAAO,CAAC,UACpC,MAAM,KAAK,YAAY,EAAE,SAAS,WAAW,YAAY,CAAC;AAAA,EAC5D;AAEA,SACE,gBAAAJ,SAAC,iBACC;AAAA,oBAAAA,SAAC,SAAI,WAAU,qEACb,0BAAAA,SAAC,SAAI,WAAU,YACb;AAAA,sBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,MAAK;AAAA,UACL,aAAY;AAAA,UACZ,OAAO;AAAA,UACP,UAAU,CAAC,MAAM,cAAc,EAAE,OAAO,KAAK;AAAA,UAC7C,WAAU;AAAA;AAAA,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,MACA,gBAAAA,SAAC,SAAI,WAAU,wEACb,0BAAAA,SAAC,SAAI,WAAU,yBAAwB,OAAM,8BAA6B,SAAQ,aAAY,MAAK,gBACjG,0BAAAA,SAAC,UAAK,UAAS,WAAU,GAAE,oHAAmH,UAAS,aAAvJ;AAAA;AAAA;AAAA;AAAA,aAAiK,KADnK;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SAZF;AAAA;AAAA;AAAA;AAAA,WAaA,KAdF;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,IAEA,gBAAAA,SAAC,SAAI,WAAU,sCACb,0BAAAA,SAAC,aAAU,QAAQ,kBAAnB;AAAA;AAAA;AAAA;AAAA,WAAmC,KADrC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OApBF;AAAA;AAAA;AAAA;AAAA,SAqBA;AAEJ;;;AExDA;AAAA;AAAA;AAAA;AAAA,SAAS,YAAAK,iBAAgB;AAEzB,SAAS,UAAAC,eAAc;AAmCf,mBAAAC,gBAAA;AA/BO,SAAR,YAA6B;AAClC,MAAM,CAAC,OAAO,QAAQ,IAAIC,UAAS,EAAE,GAC/B,CAAC,SAAS,UAAU,IAAIA,UAA6B,IAAI,GACzD,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI,GAChD,CAAC,WAAW,YAAY,IAAIA,UAAS,EAAK;AAwBhD,SACE,gBAAAD,SAAC,iBACC;AAAA,oBAAAA,SAAC,SAAI,WAAU,qEACb,0BAAAA,SAAC,QAAG,WAAU,uDAAsD,yBAApE;AAAA;AAAA;AAAA;AAAA,WAA6E,KAD/E;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IAEA,gBAAAA,SAAC,SAAI,WAAU,sCACb,0BAAAA,SAAC,SAAI,WAAU,aACb;AAAA,sBAAAA,SAAC,SACC;AAAA,wBAAAA,SAAC,SAAI,WAAU,6BACb;AAAA,0BAAAA,SAAC,WAAM,SAAQ,SAAQ,WAAU,8DAA6D,yBAA9F;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA;AAAA,cACC,SAvBO,MAAM;AACzB,oBAAI;AACF,sBAAM,YAAYE,QAAO,OAAO,EAAE,UAAU,aAAa,CAAC;AAC1D,2BAAS,SAAS;AAAA,gBACpB,QAAE;AACA,2BAAS,wBAAwB;AAAA,gBACnC;AAAA,cACF;AAAA,cAiBc,WAAU;AAAA,cACX;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA;AAAA,aATF;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,QACA,gBAAAF;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,OAAO;AAAA,YACP,UAAU,CAAC,MAAM,SAAS,EAAE,OAAO,KAAK;AAAA,YACxC,MAAM;AAAA,YACN,WAAU;AAAA,YACV,aAAY;AAAA;AAAA,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOA;AAAA,WAnBF;AAAA;AAAA;AAAA;AAAA,aAoBA;AAAA,MAEA,gBAAAA,SAAC,SACC,0BAAAA;AAAA,QAAC;AAAA;AAAA,UACC,SAtDe,YAAY;AACrC,yBAAa,EAAI,GACjB,SAAS,IAAI;AACb,gBAAI;AACF,kBAAM,SAAS,MAAM,aAAa,KAAK;AACvC,yBAAW,MAAM;AAAA,YACnB,SAAS,KAAP;AACA,uBAAS,eAAe,QAAQ,IAAI,UAAU,mBAAmB;AAAA,YACnE,UAAE;AACA,2BAAa,EAAK;AAAA,YACpB;AAAA,UACF;AAAA,UA4CY,UAAU,aAAa,CAAC,MAAM,KAAK;AAAA,UACnC,WAAU;AAAA,UAET,sBAAY,iBAAiB;AAAA;AAAA,QALhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,KAPF;AAAA;AAAA;AAAA;AAAA,aAQA;AAAA,MAEC,SACC,gBAAAA,SAAC,SAAI,WAAU,+CACb,0BAAAA,SAAC,OAAE,WAAU,0CAA0C,mBAAvD;AAAA;AAAA;AAAA;AAAA,aAA6D,KAD/D;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MAGD,WACC,gBAAAA,SAAC,SACC;AAAA,wBAAAA,SAAC,QAAG,WAAU,8BAA6B,uBAA3C;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAClD,gBAAAA,SAAC,SAAI,WAAU,mBACb,0BAAAA,SAAC,WAAM,WAAU,wDACf;AAAA,0BAAAA,SAAC,WAAM,WAAU,+BACf,0BAAAA,SAAC,QACE,kBAAQ,QAAQ,IAAI,CAAC,UACpB,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,WAAU;AAAA,cAET,gBAAM;AAAA;AAAA,YAHF,MAAM;AAAA,YADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA,CACD,KARH;AAAA;AAAA;AAAA;AAAA,iBASA,KAVF;AAAA;AAAA;AAAA;AAAA,iBAWA;AAAA,UACA,gBAAAA,SAAC,WAAM,WAAU,2EACd,kBAAQ,MAAM,IAAI,CAAC,KAAK,aACvB,gBAAAA,SAAC,QACE,iBAAO,OAAO,GAAG,EAAE,IAAI,CAAC,OAAO,aAC9B,gBAAAA;AAAA,YAAC;AAAA;AAAA,cAEC,WAAU;AAAA,cAET,oBAAU,OAAO,SAAS,OAAO,KAAK;AAAA;AAAA,YAHlC;AAAA,YADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKA,CACD,KARM,UAAT;AAAA;AAAA;AAAA;AAAA,iBASA,CACD,KAZH;AAAA;AAAA;AAAA;AAAA,iBAaA;AAAA,aA1BF;AAAA;AAAA;AAAA;AAAA,eA2BA,KA5BF;AAAA;AAAA;AAAA;AAAA,eA6BA;AAAA,WA/BF;AAAA;AAAA;AAAA;AAAA,aAgCA;AAAA,SAxEJ;AAAA;AAAA;AAAA;AAAA,WA0EA,KA3EF;AAAA;AAAA;AAAA;AAAA,WA4EA;AAAA,OAjFF;AAAA;AAAA;AAAA;AAAA,SAkFA;AAEJ;;;ACvHA,IAAO,0BAAQ,EAAC,OAAQ,EAAC,QAAS,mCAAkC,SAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,oCAAmC,kCAAkC,EAAC,GAAE,QAAS,EAAC,MAAO,EAAC,IAAK,QAAO,UAAW,QAAU,MAAO,IAAG,OAAQ,QAAU,eAAgB,QAAU,QAAS,2BAA0B,SAAU,CAAC,oCAAmC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,qBAAoB,EAAC,IAAK,qBAAoB,UAAW,QAAO,MAAO,cAAa,OAAQ,QAAU,eAAgB,QAAU,QAAS,wCAAuC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAK,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,iBAAgB,EAAC,IAAK,iBAAgB,UAAW,QAAO,MAAO,QAAU,OAAQ,IAAK,eAAgB,QAAU,QAAS,oCAAmC,SAAU,CAAC,oCAAmC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAK,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,GAAE,gBAAe,EAAC,IAAK,gBAAe,UAAW,QAAO,MAAO,SAAQ,OAAQ,QAAU,eAAgB,QAAU,QAAS,mCAAkC,SAAU,CAAC,kCAAkC,GAAE,WAAY,IAAM,WAAY,IAAM,iBAAkB,IAAM,iBAAkB,IAAM,kBAAmB,GAAK,EAAC,GAAE,SAAU,YAAW,KAAM,EAAC,SAAU,oCAAmC,WAAY,cAAa,GAAE,KAAM,8BAA6B;;;ACMz1D,IAAM,OAAO,eAEP,uBAAuB,gBACvB,SAAS,EAAC,mBAAoB,IAAK,sBAAuB,IAAK,qBAAsB,IAAK,gBAAiB,IAAM,gBAAiB,IAAK,uBAAwB,IAAK,uBAAwB,GAAK,GACjM,aAAa,WACb,QAAQ,EAAE,QAAQ,qBAAY,GAC9B,SAAS;AAAA,EACpB,MAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,qBAAqB;AAAA,IACjB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,iBAAiB;AAAA,IACb,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AAAA,EACF,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA,EACV;AACF;",
  "names": ["jsxDEV", "jsxDEV", "jsxDEV", "useSearchParams", "startCase", "useEffect", "useState", "jsxDEV", "useState", "useEffect", "jsxDEV", "startCase", "useState", "Fragment", "jsxDEV", "jsxDEV", "startCase", "jsxDEV", "jsxDEV", "useState", "jsxDEV", "useState", "jsxDEV", "jsxDEV", "useSearchParams", "loader", "json", "useLoaderData", "useState", "Link", "startCase", "jsxDEV", "jsxDEV", "loader", "json", "useLoaderData", "useState", "useState", "format", "jsxDEV", "useState", "format"]
}
