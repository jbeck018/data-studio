{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/utils/theme.tsx", "../app/routes/_authenticated.organizations.$orgId.connections.new.tsx", "../app/lib/auth/session.server.ts", "../app/env.server.ts", "../app/lib/db/db.server.ts", "../app/lib/db/schema.ts", "../app/lib/db/schema/organizations.ts", "../app/lib/db/schema/auth.ts", "../app/lib/db/schema/connections.ts", "../app/lib/db/schema/queries.ts", "../app/lib/auth/rbac.server.ts", "../app/lib/connections/pool.server.ts", "../app/routes/_authenticated.organizations.$orgId.connections.tsx", "../app/lib/organizations/organizations.server.ts", "../app/lib/db/connection-manager.server.ts", "../app/lib/db/connection-handlers.server.ts", "../app/components/NewConnectionModal.tsx", "../app/lib/db/test-connection.server.ts", "../app/routes/_authenticated.organizations.$orgId.members.tsx", "../app/routes/_authenticated.organizations.$orgId.invite.tsx", "../app/routes/_authenticated.connections.$id.edit.tsx", "../app/lib/connections/config.server.ts", "../app/routes/_authenticated.organizations._index.tsx", "../app/routes/_authenticated.organizations.select.tsx", "../app/routes/_authenticated.connections._index.tsx", "../app/routes/_authenticated.organizations.$id.tsx", "../app/routes/_authenticated.organizations.new.tsx", "../app/components/ui/button.tsx", "../app/utils/cn.ts", "../app/components/ui/form.tsx", "../app/components/ui/label.tsx", "../app/components/ui/input.tsx", "../app/components/ui/textarea.tsx", "../app/routes/_authenticated.connections.new.tsx", "../app/components/ui/select.tsx", "../app/components/ui/checkbox.tsx", "../app/routes/_authenticated.organizations.tsx", "../app/routes/_authenticated.dashboard.tsx", "../app/routes/_authenticated.profile.tsx", "../app/lib/auth/auth.server.ts", "../app/routes/_authenticated.schema.tsx", "../app/components/SchemaVisualization/index.tsx", "../app/components/SchemaVisualization/TableNode.tsx", "../app/components/SchemaVisualization/SchemaControls.tsx", "../app/components/Button.tsx", "../app/hooks/useSchemaLayout.ts", "../app/utils/schemaLayout.ts", "../app/hooks/useSchemaData.ts", "../app/utils/pool.server.ts", "../app/utils/sql-sanitizer.server.ts", "../app/types/query.ts", "../app/utils/api.server.ts", "../app/components/PageContainer.tsx", "../app/routes/_authenticated.query.tsx", "../app/components/LoadingSpinner.tsx", "../app/components/Alert.tsx", "../app/lib/db/query-engine.server.ts", "../app/services/websocket.server.ts", "../app/middleware/websocket-auth.server.ts", "../app/components/SQLEditor.tsx", "../app/hooks/useTheme.ts", "../app/components/StreamingQueryResults.tsx", "../app/hooks/useStreamingQuery.ts", "../app/hooks/useWebSocket.ts", "../app/components/EmptyState.tsx", "../app/components/DataVisualization/ChartComponent.tsx", "../app/components/DataVisualization/VisualizationManager.tsx", "../app/components/DataVisualization/ChartCustomizer.tsx", "../app/components/DataVisualization/ChartSaveModal.tsx", "../app/utils/chartStorage.ts", "../app/components/DataVisualization/SmartVisualization.tsx", "../app/routes/connections.change.ts", "../app/routes/connections.state.ts", "../app/routes/_public.register.tsx", "../app/routes/api.connections.ts", "../app/routes/_authenticated.tsx", "../app/components/AuthenticatedLayout.tsx", "../app/components/ui/dialog.tsx", "../app/components/modals/AuthModals.tsx", "../app/components/ui/alert.tsx", "../app/routes/_public.login.tsx", "../app/routes/$tableName.tsx", "../app/components/TabView.tsx", "../app/components/DataView.tsx", "../app/components/RowDetailsSidebar.tsx", "../app/hooks/useClient.ts", "../app/hooks/useTableUpdates.ts", "../app/routes/api.query.ts", "../app/routes/_public.tsx", "../app/components/auth/AuthBackground.tsx", "../app/components/PublicLayout.tsx", "../app/routes/_index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import { PassThrough } from \"node:stream\";\nimport type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n): Promise<Response> {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n): Promise<Response> {\n  return new Promise<Response>((resolve, reject) => {\n    let didError = false;\n    \n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n      />,\n      {\n        onAllReady() {\n          const body = new PassThrough();\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body as unknown as ReadableStream, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n): Promise<Response> {\n  return new Promise<Response>((resolve, reject) => {\n    let didError = false;\n\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n      />,\n      {\n        onShellReady() {\n          const body = new PassThrough();\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(body as unknown as ReadableStream, {\n              headers: responseHeaders,\n              status: didError ? 500 : responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          didError = true;\n          console.error(error);\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\nimport { LinksFunction, LoaderFunctionArgs, json } from \"@remix-run/node\";\nimport stylesheet from \"./tailwind.css?url\";\nimport { ThemeProvider } from \"./utils/theme\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"stylesheet\", href: stylesheet },\n{ rel: \"icon\", type: \"image/svg+xml\", href: \"/assets/favicon.svg\" }];\n\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  return json({\n    ENV: {\n      NODE_ENV: process.env.NODE_ENV\n    }\n  });\n}\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full\">\n        <ThemeProvider>\n          <Outlet />\n        </ThemeProvider>\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>);\n\n}", "import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Only check localStorage and media query on the client side\n    if (typeof window === \"undefined\") return \"light\";\n    \n    const saved = localStorage.getItem(\"theme\") as Theme;\n    if (saved) return saved;\n    \n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    \n    // Remove both classes first\n    root.classList.remove(\"light\", \"dark\");\n    \n    // Add the current theme class\n    root.classList.add(theme);\n    \n    // Store the theme preference\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    console.log(\"Toggle theme\");\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  // Set initial theme class on the client side\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.add(theme);\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useParams } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { z } from \"zod\";\nimport { createDatabaseConnection } from \"../lib/connections/pool.server\";\n\nconst CreateConnectionSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n  type: z.enum([\"POSTGRES\", \"MYSQL\"], {\n    required_error: \"Database type is required\",\n  }),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.coerce.number().min(1, \"Port is required\"),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.coerce.boolean(),\n});\n\ntype ActionData = {\n  errors?: {\n    formErrors?: string[];\n    fieldErrors?: {\n      name?: string[];\n      type?: string[];\n      host?: string[];\n      port?: string[];\n      database?: string[];\n      username?: string[];\n      password?: string[];\n      ssl?: string[];\n    };\n  };\n};\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  await requireUser(request);\n  return null;\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const formData = await request.formData();\n\n  const result = CreateConnectionSchema.safeParse({\n    name: formData.get(\"name\"),\n    type: formData.get(\"type\"),\n    host: formData.get(\"host\"),\n    port: formData.get(\"port\"),\n    database: formData.get(\"database\"),\n    username: formData.get(\"username\"),\n    password: formData.get(\"password\"),\n    ssl: formData.get(\"ssl\"),\n  });\n\n  if (!result.success) {\n    return json<ActionData>({ errors: result.error.flatten() }, { status: 400 });\n  }\n\n  try {\n    const connection = await createDatabaseConnection({\n      ...result.data,\n      organizationId: params.orgId!,\n      createdById: user.id,\n    });\n\n    return redirect(`/organizations/${params.orgId}/connections/${connection.id}`);\n  } catch (error) {\n    if (error instanceof Error) {\n      return json<ActionData>(\n        {\n          errors: {\n            formErrors: [error.message],\n            fieldErrors: {},\n          },\n        },\n        { status: 400 }\n      );\n    }\n    return json<ActionData>(\n      {\n        errors: {\n          formErrors: [\"An unexpected error occurred\"],\n          fieldErrors: {},\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport default function NewConnectionPage() {\n  const actionData = useActionData<ActionData>();\n  const params = useParams();\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <h1 className=\"text-center text-2xl font-bold text-gray-900 dark:text-white mb-8\">\n          Connect to Database\n        </h1>\n\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"name\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Connection Name\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.name ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.name ? \"name-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.name ? (\n                <div className=\"pt-1 text-red-700\" id=\"name-error\">\n                  {actionData.errors.fieldErrors.name[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"type\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Database Type\n            </label>\n            <div className=\"mt-1\">\n              <select\n                id=\"type\"\n                name=\"type\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.type ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.type ? \"type-error\" : undefined\n                }\n              >\n                <option value=\"\">Select a database type</option>\n                <option value=\"POSTGRES\">PostgreSQL</option>\n                <option value=\"MYSQL\">MySQL</option>\n              </select>\n              {actionData?.errors?.fieldErrors?.type ? (\n                <div className=\"pt-1 text-red-700\" id=\"type-error\">\n                  {actionData.errors.fieldErrors.type[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"host\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Host\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"text\"\n                id=\"host\"\n                name=\"host\"\n                required\n                placeholder=\"localhost\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.host ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.host ? \"host-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.host ? (\n                <div className=\"pt-1 text-red-700\" id=\"host-error\">\n                  {actionData.errors.fieldErrors.host[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"port\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Port\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"number\"\n                id=\"port\"\n                name=\"port\"\n                required\n                placeholder=\"5432\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.port ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.port ? \"port-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.port ? (\n                <div className=\"pt-1 text-red-700\" id=\"port-error\">\n                  {actionData.errors.fieldErrors.port[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"database\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Database Name\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"text\"\n                id=\"database\"\n                name=\"database\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.database ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.database ? \"database-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.database ? (\n                <div className=\"pt-1 text-red-700\" id=\"database-error\">\n                  {actionData.errors.fieldErrors.database[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"username\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Username\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"text\"\n                id=\"username\"\n                name=\"username\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.username ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.username ? \"username-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.username ? (\n                <div className=\"pt-1 text-red-700\" id=\"username-error\">\n                  {actionData.errors.fieldErrors.username[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={actionData?.errors?.fieldErrors?.password ? true : undefined}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.password ? \"password-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.password ? (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.fieldErrors.password[0]}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"ssl\"\n              name=\"ssl\"\n              className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n            />\n            <label\n              htmlFor=\"ssl\"\n              className=\"ml-2 block text-sm text-gray-900 dark:text-gray-200\"\n            >\n              Use SSL\n            </label>\n          </div>\n\n          {actionData?.errors?.formErrors?.length ? (\n            <div className=\"rounded-md bg-red-50 p-4 dark:bg-red-900\">\n              <div className=\"flex\">\n                <div className=\"ml-3\">\n                  <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                    Error\n                  </h3>\n                  <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                    <ul className=\"list-disc space-y-1 pl-5\">\n                      {actionData.errors.formErrors.map((error) => (\n                        <li key={error}>{error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : null}\n\n          <div className=\"flex items-center justify-between space-x-4\">\n            <button\n              type=\"button\"\n              onClick={() => window.history.back()}\n              className=\"flex-1 rounded border border-gray-500 px-4 py-2 text-gray-700 hover:bg-gray-50 dark:text-gray-200 dark:hover:bg-gray-700\"\n            >\n              Back\n            </button>\n            <button\n              type=\"submit\"\n              className=\"flex-1 rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n            >\n              Create Connection\n            </button>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { createCookieSessionStorage, redirect } from '@remix-run/node';\nimport { env } from '../../env.server';\nimport { db } from '../../lib/db/db.server';\nimport { users, organizationMembers, databaseConnections } from '../../lib/db/schema';\nimport { eq, and, not } from 'drizzle-orm';\nimport { getUserOrganizationRole, getUserOrganizationPermissions, Role, Permission } from './rbac.server';\n\n// Session configuration\nconst sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: '__session',\n    httpOnly: true,\n    path: '/',\n    sameSite: 'lax',\n    secrets: [env.SESSION_SECRET || 'default-secret-please-change'],\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 30, // 30 days\n  },\n});\n\n// Get the user session\nexport async function getUserSession(request: Request) {\n  const session = await sessionStorage.getSession(request.headers.get('Cookie'));\n  // console.log('Got session:', {\n  //   userId: session.get('userId'),\n  //   organizationId: session.get('organizationId'),\n  // });\n  return session;\n}\n\n// Get the logged-in user with roles and connection status\nexport async function getUser(request: Request) {\n  const session = await getUserSession(request);\n  const userId = session.get('userId');\n  const organizationId = session.get('organizationId');\n  \n  if (!userId) {\n    console.log('No userId in session');\n    return null;\n  }\n\n  const userFromDb = await db.query.users.findFirst({\n    where: eq(users.id, userId),\n    columns: {\n      id: true,\n      email: true,\n      name: true,\n      createdAt: true,\n      lastLogin: true,\n    },\n  });\n\n  if (!userFromDb) {\n    throw await logout(request);\n  }\n\n  // Convert date strings to Date objects\n  const user = {\n    ...userFromDb,\n    createdAt: new Date(userFromDb.createdAt),\n    lastLogin: userFromDb.lastLogin ? new Date(userFromDb.lastLogin) : null,\n  };\n\n  // Get user organization memberships\n  const organizationMemberships = await db.query.organizationMembers.findMany({\n    where: eq(organizationMembers.userId, user.id),\n    columns: {\n      organizationId: true,\n      role: true,\n    },\n  });\n\n  // Format organizations array to match User type\n  const organizations = organizationMemberships.map(membership => ({\n    id: membership.organizationId,\n    role: membership.role.toUpperCase() as 'OWNER' | 'ADMIN' | 'MEMBER',\n  }));\n\n  // If no organizations, return early\n  if (organizations.length === 0) {\n    return {\n      ...user,\n      organizations,\n      currentOrganization: null,\n      organizationRole: null,\n      organizationPermissions: null,\n      hasConnection: false,\n    };\n  }\n\n  // If no organization selected but user has organizations, use the first one\n  const effectiveOrgId = organizationId || organizations[0].id;\n\n  // Check if user has any active database connections\n  const hasConnection = await db.query.databaseConnections.findFirst({\n    where: and(\n      eq(databaseConnections.organizationId, effectiveOrgId),\n      not(eq(databaseConnections.archived, true))\n    ),\n  }) !== null;\n\n  // Get user's role in current organization\n  const organizationRole = (await getUserOrganizationRole(user.id, effectiveOrgId))?.toUpperCase() as 'OWNER' | 'ADMIN' | 'MEMBER' | null;\n\n  // Get user's permissions in current organization\n  const organizationPermissions = await getUserOrganizationPermissions(user.id, effectiveOrgId);\n\n  return {\n    ...user,\n    organizations,\n    currentOrganization: effectiveOrgId,\n    organizationRole,\n    organizationPermissions,\n    hasConnection,\n  };\n}\n\n// Create a new session\nexport async function createUserSession({\n  request,\n  userId,\n  organizationId,\n  remember = false,\n  redirectTo\n}: {\n  request: Request;\n  userId: string;\n  organizationId?: string | null;\n  remember?: boolean;\n  redirectTo: string;\n}) {\n  \n  const session = await sessionStorage.getSession();\n  session.set('userId', userId);\n  if (organizationId) {\n    session.set('organizationId', organizationId);\n  }\n\n  const maxAge = remember ? 60 * 60 * 24 * 30 : undefined; // 30 days if remember\n\n  const cookie = await sessionStorage.commitSession(session, {\n    maxAge,\n  });\n  \n  const response = new Response(null, {\n    status: 302,\n    headers: {\n      Location: redirectTo,\n      'Set-Cookie': cookie,\n    },\n  });\n  \n  return response;\n}\n\n// Set current organization\nexport async function setCurrentOrganization(request: Request, organizationId: string) {\n  const session = await getUserSession(request);\n  session.set('organizationId', organizationId);\n  return redirect(request.url, {\n    headers: {\n      'Set-Cookie': await sessionStorage.commitSession(session),\n    },\n  });\n}\n\n// Log out the user\nexport async function logout(request: Request) {\n  const session = await getUserSession(request);\n  return redirect('/', {\n    headers: {\n      'Set-Cookie': await sessionStorage.destroySession(session),\n    },\n  });\n}\n\n// Require authentication\nexport async function requireUser(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname,\n) {\n  const user = await getUser(request);\n  if (!user) {\n    const searchParams = new URLSearchParams([['redirectTo', redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return user;\n}\n\n// Require organization selection\nexport async function requireOrganization(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname,\n) {\n  const user = await requireUser(request);\n  if (!user.currentOrganization) {\n    const searchParams = new URLSearchParams([['redirectTo', redirectTo]]);\n    throw redirect(`/organizations/select?${searchParams}`);\n  }\n  return user;\n}\n\n// Require specific role in current organization\nexport async function requireOrganizationRole(\n  request: Request,\n  role: Role,\n  redirectTo: string = '/',\n) {\n  const user = await requireOrganization(request);\n  return user;\n}\n\n// Require specific permission in current organization\nexport async function requireOrganizationPermission(\n  request: Request,\n  permission: Permission,\n  redirectTo: string = '/',\n) {\n  const user = await requireOrganization(request);\n  if (!user.organizationPermissions?.includes(permission)) {\n    throw redirect(redirectTo, {\n      status: 403,\n    });\n  }\n  return user;\n}\n\n// Require database connection in current organization\nexport async function requireConnection(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname,\n) {\n  const user = await requireOrganization(request);\n  if (!user.hasConnection) {\n    const searchParams = new URLSearchParams([['redirectTo', redirectTo]]);\n    throw redirect(`/connection/new?${searchParams}`);\n  }\n  return user;\n}\n\n// Require user ID\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname,\n) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n", "import { z } from 'zod';\n\nconst envSchema = z.object({\n  // Node environment\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\n\n  // System database settings\n  SYSTEM_DB_HOST: z.string().default('localhost'),\n  SYSTEM_DB_PORT: z.coerce.number().default(5555),\n  SYSTEM_DB_USER: z.string().default('postgres'),\n  SYSTEM_DB_PASSWORD: z.string().default('postgres'),\n  SYSTEM_DB_NAME: z.string().default('postgres'),\n\n  // Session configuration\n  SESSION_SECRET: z.string().min(32).default('at-least-32-characters-long-session-secret'),\n\n  // Encryption settings for database credentials\n  ENCRYPTION_KEY: z.string().min(32).default('at-least-32-characters-long-encryption-key'),\n  ENCRYPTION_IV: z.string().default('16-chars-enc-iv'),\n});\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv extends z.infer<typeof envSchema> {}\n  }\n}\n\nexport const env = envSchema.parse(process.env);\n", "import { drizzle } from 'drizzle-orm/node-postgres';\nimport { NodePgDatabase } from 'drizzle-orm/node-postgres';\nimport pkg from 'pg';\nconst { Pool } = pkg;\n\nimport { env } from '../../env.server';\nimport * as schema from './schema';\n\n// Create system database connection pool\nconst pool = new Pool({\n  host: env.SYSTEM_DB_HOST,\n  port: env.SYSTEM_DB_PORT,\n  user: env.SYSTEM_DB_USER,\n  password: env.SYSTEM_DB_PASSWORD,\n  database: env.SYSTEM_DB_NAME,\n});\n\n// Create drizzle database instance with schema type\nexport const db: NodePgDatabase<typeof schema> = drizzle(pool, {\n  schema,\n  logger: env.NODE_ENV === 'development',\n});\n", "// Export database types\nexport const DATABASE_TYPES = ['POSTGRES', 'MYSQL', 'SQLITE', 'MSSQL', 'ORACLE', 'MONGODB', 'REDIS'] as const;\nexport type DatabaseType = typeof DATABASE_TYPES[number];\n\n// Re-export all schemas and types\nexport * from './schema/organizations';\nexport * from './schema/auth';\nexport * from './schema/connections';\nexport * from './schema/queries';\n\n// Import for relations\nimport { relations } from 'drizzle-orm';\nimport { organizations, organizationMembers } from './schema/organizations';\nimport { users } from './schema/auth';\nimport { databaseConnections } from './schema/connections';\n\n// Organization relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  members: many(organizationMembers),\n  connections: many(databaseConnections),\n}));\n\n// User relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  organizationMemberships: many(organizationMembers),\n}));\n\n// Organization member relations\nexport const organizationMembersRelations = relations(organizationMembers, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [organizationMembers.organizationId],\n    references: [organizations.id],\n  }),\n  user: one(users, {\n    fields: [organizationMembers.userId],\n    references: [users.id],\n  }),\n}));\n\n// Database connection relations\nexport const databaseConnectionsRelations = relations(databaseConnections, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [databaseConnections.organizationId],\n    references: [organizations.id],\n  }),\n}));\n", "import { text, timestamp, pgTable, uuid } from \"drizzle-orm/pg-core\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { users } from \"./auth\";\n\nexport const organizations = pgTable(\"organizations\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  name: text(\"name\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const organizationMembers = pgTable(\"organization_members\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  organizationId: uuid(\"organization_id\")\n    .notNull()\n    .references(() => organizations.id, { onDelete: \"cascade\" }),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  role: text(\"role\", { enum: [\"owner\", \"admin\", \"member\"] }).notNull().default(\"member\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport type Organization = typeof organizations.$inferSelect;\nexport type NewOrganization = typeof organizations.$inferInsert;\nexport type OrganizationMember = typeof organizationMembers.$inferSelect;\nexport type NewOrganizationMember = typeof organizationMembers.$inferInsert;\n", "import { text, timestamp, pgTable, uuid } from \"drizzle-orm/pg-core\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  hashedPassword: text(\"hashed_password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  lastLogin: timestamp(\"last_login\"),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type NewSession = typeof sessions.$inferInsert;\n", "import { text, timestamp, pgTable, jsonb, uuid, boolean } from \"drizzle-orm/pg-core\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { organizations } from \"./organizations\";\nimport { users } from \"./auth\";\nimport { type DatabaseType } from \"../schema\";\n\n// Common connection config interface\nexport interface BaseConnectionConfig {\n  type: DatabaseType;  // Add type to base config\n  host?: string;  // Make these optional in base\n  port?: number;\n  database?: string;\n  username?: string;\n  password?: string;\n  ssl?: boolean;\n}\n\nexport interface StandardConnectionConfig extends BaseConnectionConfig {\n  type: Exclude<DatabaseType, 'MONGODB' | 'REDIS' | 'SQLITE'>;\n  host: string;  // Required for standard connections\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n}\n\nexport interface MongoDBConnectionConfig extends BaseConnectionConfig {\n  type: 'MONGODB';\n  host: string;\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n  authSource?: string;\n  replicaSet?: string;\n}\n\nexport interface RedisConnectionConfig extends BaseConnectionConfig {\n  type: 'REDIS';\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n}\n\nexport interface SQLiteConnectionConfig extends BaseConnectionConfig {\n  type: 'SQLITE';\n  filepath: string;\n}\n\nexport type ConnectionConfig = \n  | StandardConnectionConfig\n  | MongoDBConnectionConfig\n  | RedisConnectionConfig\n  | SQLiteConnectionConfig;\n\nexport const databaseConnections = pgTable(\"database_connections\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  name: text(\"name\").notNull(),\n  type: text(\"type\", { enum: [\"POSTGRES\", \"MYSQL\", \"SQLITE\", \"MSSQL\", \"ORACLE\", \"MONGODB\", \"REDIS\"] }).notNull(),\n  config: jsonb(\"config\").$type<ConnectionConfig>().notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  createdById: uuid(\"created_by_id\").notNull().references(() => users.id),\n  organizationId: uuid(\"organization_id\").notNull().references(() => organizations.id),\n  archived: boolean(\"archived\").notNull().default(false),\n});\n\nexport type DatabaseConnection = typeof databaseConnections.$inferSelect;\nexport type NewDatabaseConnection = typeof databaseConnections.$inferInsert;\n\nexport const queryHistory = pgTable(\"query_history\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  connectionId: uuid(\"connection_id\")\n    .notNull()\n    .references(() => databaseConnections.id, { onDelete: \"cascade\" }),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id),\n  query: text(\"query\").notNull(),\n  status: text(\"status\", { enum: [\"success\", \"error\"] }).notNull(),\n  error: text(\"error\"),\n  executionTimeMs: text(\"execution_time_ms\"),\n  rowCount: text(\"row_count\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport type QueryHistory = typeof queryHistory.$inferSelect;\nexport type NewQueryHistory = typeof queryHistory.$inferInsert;\n", "import { text, timestamp, pgTable, uuid } from \"drizzle-orm/pg-core\";\nimport { users } from \"./auth\";\nimport { databaseConnections } from \"./connections\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const queries = pgTable(\"query_history\", {\n  id: uuid(\"id\").primaryKey().$defaultFn(() => uuidv4()),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id),\n  connectionId: uuid(\"connection_id\")\n    .notNull()\n    .references(() => databaseConnections.id),\n  organizationId: uuid(\"organization_id\").notNull(),\n  sql: text(\"sql\").notNull(),\n  status: text(\"status\", { enum: [\"success\", \"error\"] }).notNull(),\n  error: text(\"error\"),\n  executionTimeMs: text(\"execution_time_ms\"),\n  rowCount: text(\"row_count\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n", "import { redirect } from '@remix-run/node';\nimport { db } from '../db/db.server';\nimport { organizationMembers } from '../db/schema';\nimport { eq, and } from 'drizzle-orm';\n\nexport type Role = 'owner' | 'admin' | 'member';\n\nexport enum Permission {\n  MANAGE_ORGANIZATION = 'MANAGE_ORGANIZATION',\n  MANAGE_MEMBERS = 'MANAGE_MEMBERS',\n  MANAGE_CONNECTIONS = 'MANAGE_CONNECTIONS',\n  VIEW_CONNECTIONS = 'VIEW_CONNECTIONS',\n  EXECUTE_QUERIES = 'EXECUTE_QUERIES',\n}\n\nconst ROLE_PERMISSIONS: Record<Role, Permission[]> = {\n  owner: [\n    Permission.MANAGE_ORGANIZATION,\n    Permission.MANAGE_MEMBERS,\n    Permission.MANAGE_CONNECTIONS,\n    Permission.VIEW_CONNECTIONS,\n    Permission.EXECUTE_QUERIES,\n  ],\n  admin: [\n    Permission.MANAGE_MEMBERS,\n    Permission.MANAGE_CONNECTIONS,\n    Permission.VIEW_CONNECTIONS,\n    Permission.EXECUTE_QUERIES,\n  ],\n  member: [\n    Permission.VIEW_CONNECTIONS,\n    Permission.EXECUTE_QUERIES,\n  ],\n};\n\nexport async function getUserOrganizationRole(userId: string, organizationId: string): Promise<Role | null> {\n  const member = await db.query.organizationMembers.findFirst({\n    where: and(\n      eq(organizationMembers.userId, userId),\n      eq(organizationMembers.organizationId, organizationId)\n    ),\n  });\n\n  return member?.role ?? null;\n}\n\nexport async function getUserOrganizationPermissions(userId: string, organizationId: string): Promise<Permission[]> {\n  const role = await getUserOrganizationRole(userId, organizationId);\n  if (!role) return [];\n  return ROLE_PERMISSIONS[role];\n}\n\nexport async function requirePermission(userId: string, organizationId: string, permission: Permission) {\n  const permissions = await getUserOrganizationPermissions(userId, organizationId);\n  if (!permissions.includes(permission)) {\n    throw redirect('/unauthorized');\n  }\n}\n\nexport async function createOrganizationMember(userId: string, organizationId: string, role: Role) {\n  await db.insert(organizationMembers).values({\n    userId,\n    organizationId,\n    role,\n  });\n}\n\nexport async function updateOrganizationMemberRole(userId: string, organizationId: string, role: Role) {\n  await db.update(organizationMembers)\n    .set({ role })\n    .where(\n      and(\n        eq(organizationMembers.userId, userId),\n        eq(organizationMembers.organizationId, organizationId)\n      )\n    );\n}\n", "import { db } from \"../../lib/db/db.server\";\nimport { databaseConnections } from \"../db/schema/connections\";\nimport type { StandardConnectionConfig } from \"../db/schema/connections\";\n\nexport type DatabaseConnectionType = \"POSTGRES\" | \"MYSQL\";\n\nexport interface DatabaseConnectionData {\n  name: string;\n  type: DatabaseConnectionType;\n  host: string;\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n  ssl: boolean;\n  organizationId: string;\n  createdById: string;\n}\n\nexport async function createDatabaseConnection(data: DatabaseConnectionData) {\n  // TODO: Add validation to check if connection works before saving\n  const [connection] = await db.insert(databaseConnections)\n    .values({\n      name: data.name,\n      type: data.type,\n      config: {\n        type: data.type,\n        host: data.host,\n        port: data.port,\n        database: data.database,\n        username: data.username,\n        password: data.password,\n        ssl: data.ssl\n      } satisfies StandardConnectionConfig,\n      organizationId: data.organizationId,\n      createdById: data.createdById,\n    })\n    .returning();\n\n  return connection;\n}\n", "import { json, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { getOrganizationRole } from \"../lib/organizations/organizations.server\";\nimport { db } from \"../lib/db/db.server\";\nimport { databaseConnections } from \"../lib/db/schema/connections\";\nimport { eq } from \"drizzle-orm\";\nimport { ConnectionManager } from \"../lib/db/connection-manager.server\";\nimport { z } from \"zod\";\nimport { useState } from \"react\";\nimport NewConnectionModal from \"../components/NewConnectionModal\";\nimport { testPostgresConnection } from \"../lib/db/test-connection.server\";\n\nconst ConnectionSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.coerce.number().int().min(1).max(65535),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.boolean().optional(),\n});\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  const role = await getOrganizationRole(params.orgId!, user.id);\n  \n  if (!role) {\n    throw new Response(\"Unauthorized\", { status: 403 });\n  }\n\n  const connections = await db.query.databaseConnections.findMany({\n    where: eq(databaseConnections.organizationId, params.orgId!),\n  });\n\n  return json({ connections, role });\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const role = await getOrganizationRole(params.orgId!, user.id);\n  \n  if (!role || role === \"member\") {\n    throw new Response(\"Unauthorized\", { status: 403 });\n  }\n\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n\n  switch (intent) {\n    case \"create\": {\n      const result = ConnectionSchema.safeParse({\n        name: formData.get(\"name\"),\n        host: formData.get(\"host\"),\n        port: formData.get(\"port\"),\n        database: formData.get(\"database\"),\n        username: formData.get(\"username\"),\n        password: formData.get(\"password\"),\n        ssl: formData.get(\"ssl\") === \"true\",\n      });\n\n      if (!result.success) {\n        return json({ errors: result.error.flatten() }, { status: 400 });\n      }\n\n      const { name, ...config } = result.data;\n\n      // Test the connection before saving\n      try {\n        await testPostgresConnection(config);\n      } catch (error) {\n        return json({ error: `Failed to connect: ${error.message}` }, { status: 400 });\n      }\n\n      await db.insert(databaseConnections).values({\n        name,\n        type: \"postgresql\",\n        organizationId: params.orgId!,\n        createdById: user.id,\n        config,\n      });\n\n      return null;\n    }\n\n    case \"delete\": {\n      const connectionId = formData.get(\"connectionId\");\n      if (typeof connectionId !== \"string\") {\n        return json({ error: \"Invalid connection ID\" }, { status: 400 });\n      }\n\n      // Close the connection if it's active\n      await ConnectionManager.getInstance().closeConnection(connectionId);\n\n      // Delete the connection from the database\n      await db.delete(databaseConnections)\n        .where(eq(databaseConnections.id, connectionId));\n\n      return null;\n    }\n\n    case \"test\": {\n      const connectionId = formData.get(\"connectionId\");\n      if (typeof connectionId !== \"string\") {\n        return json({ error: \"Invalid connection ID\" }, { status: 400 });\n      }\n\n      try {\n        const pool = await ConnectionManager.getInstance().getConnection(connectionId);\n        const client = await pool.connect();\n        client.release();\n        return json({ success: true });\n      } catch (error) {\n        return json({ error: error.message }, { status: 400 });\n      }\n    }\n\n    default:\n      throw new Response(\"Invalid intent\", { status: 400 });\n  }\n}\n\nexport default function ConnectionsPage() {\n  const { connections, role } = useLoaderData<typeof loader>();\n  const canManage = role === \"owner\" || role === \"admin\";\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <h1 className=\"text-2xl font-semibold\">Database Connections</h1>\n          {canManage && (\n            <button\n              type=\"button\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n              onClick={() => setIsModalOpen(true)}\n            >\n              New Connection\n            </button>\n          )}\n        </div>\n\n        <div className=\"space-y-4\">\n          {connections.map((connection) => (\n            <div\n              key={connection.id}\n              className=\"bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg p-6\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h2 className=\"text-lg font-medium mb-1\">{connection.name}</h2>\n                  <p className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n                    {connection.config.host}:{connection.config.port}/{connection.config.database}\n                  </p>\n                </div>\n                {canManage && (\n                  <div className=\"flex space-x-4\">\n                    <Form method=\"post\">\n                      <input type=\"hidden\" name=\"intent\" value=\"test\" />\n                      <input type=\"hidden\" name=\"connectionId\" value={connection.id} />\n                      <button\n                        type=\"submit\"\n                        className=\"text-blue-600 hover:text-blue-500\"\n                      >\n                        Test Connection\n                      </button>\n                    </Form>\n                    <Form method=\"post\">\n                      <input type=\"hidden\" name=\"intent\" value=\"delete\" />\n                      <input type=\"hidden\" name=\"connectionId\" value={connection.id} />\n                      <button\n                        type=\"submit\"\n                        className=\"text-red-600 hover:text-red-500\"\n                        onClick={(e) => {\n                          if (!confirm(\"Are you sure you want to delete this connection?\")) {\n                            e.preventDefault();\n                          }\n                        }}\n                      >\n                        Delete\n                      </button>\n                    </Form>\n                  </div>\n                )}\n              </div>\n              <div className=\"mt-4 text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n                <p>Created by {connection.createdBy.name}</p>\n                <p>Last used: {connection.lastUsedAt ? new Date(connection.lastUsedAt).toLocaleString() : 'Never'}</p>\n              </div>\n            </div>\n          ))}\n\n          {connections.length === 0 && (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium mb-2\">No database connections</h3>\n              <p className=\"text-light-text-secondary dark:text-dark-text-secondary mb-4\">\n                Add your first database connection to get started\n              </p>\n              {canManage && (\n                <button\n                  type=\"button\"\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n                  onClick={() => setIsModalOpen(true)}\n                >\n                  New Connection\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      <NewConnectionModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />\n    </div>\n  );\n}\n", "import { v4 as uuidv4 } from \"uuid\";\nimport { db } from \"../../lib/db/db.server\";\nimport { organizations, organizationMembers } from \"../../lib/db/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport interface Organization {\n  id: string;\n  name: string;\n  slug: string;\n  description?: string | null;\n  createdAt: Date;\n}\n\nexport interface CreateOrganizationInput {\n  name: string;\n  slug: string;\n  description?: string;\n  userId: string;\n}\n\ninterface UpdateOrganizationInput {\n  name: string;\n}\n\ninterface AddOrganizationMemberInput {\n  organizationId: string;\n  userId: string;\n  role: \"admin\" | \"member\";\n}\n\nexport async function createOrganization({ name, slug, description, userId }: CreateOrganizationInput) {\n  const id = uuidv4();\n\n  const [organization] = await db.insert(organizations)\n    .values({\n      id,\n      name,\n      slug,\n      description,\n    })\n    .returning();\n\n  // Add the creator as an admin member\n  await db.insert(organizationMembers).values({\n    userId,\n    organizationId: organization.id,\n    role: \"admin\",\n  });\n\n  return organization;\n}\n\nexport async function updateOrganization(id: string, { name }: UpdateOrganizationInput) {\n  const [organization] = await db.update(organizations)\n    .set({\n      name,\n    })\n    .where(eq(organizations.id, id))\n    .returning();\n\n  return organization;\n}\n\nexport async function deleteOrganization(id: string) {\n  // First delete all members\n  await db.delete(organizationMembers).where(eq(organizationMembers.organizationId, id));\n  \n  // Then delete the organization\n  await db.delete(organizations).where(eq(organizations.id, id));\n}\n\nexport async function addOrganizationMember({ organizationId, userId, role }: AddOrganizationMemberInput) {\n  const [member] = await db.insert(organizationMembers).values({\n    userId,\n    organizationId,\n    role,\n  }).returning();\n\n  return member;\n}\n\nexport async function removeOrganizationMember(organizationId: string, userId: string) {\n  await db.delete(organizationMembers).where(\n    and(\n      eq(organizationMembers.organizationId, organizationId),\n      eq(organizationMembers.userId, userId)\n    )\n  );\n}\n\nexport async function getUserOrganizations(userId: string): Promise<Organization[]> {\n  const userOrgs = await db\n    .select({\n      id: organizations.id,\n      name: organizations.name,\n      slug: organizations.slug,\n      description: organizations.description,\n      createdAt: organizations.createdAt,\n    })\n    .from(organizationMembers)\n    .innerJoin(organizations, eq(organizations.id, organizationMembers.organizationId))\n    .where(eq(organizationMembers.userId, userId));\n\n  return userOrgs;\n}\n\nexport async function getOrganization(organizationId: string, userId: string): Promise<Organization | undefined> {\n  const [organization] = await db\n    .select({\n      id: organizations.id,\n      name: organizations.name,\n      slug: organizations.slug,\n      description: organizations.description,\n      createdAt: organizations.createdAt,\n    })\n    .from(organizationMembers)\n    .innerJoin(organizations, eq(organizations.id, organizationMembers.organizationId))\n    .where(\n      and(\n        eq(organizationMembers.organizationId, organizationId),\n        eq(organizationMembers.userId, userId)\n      )\n    );\n\n  return organization;\n}\n\nexport async function getOrganizationRole(organizationId: string, userId: string): Promise<string | undefined> {\n  const member = await db.query.organizationMembers.findFirst({\n    where: and(\n      eq(organizationMembers.organizationId, organizationId),\n      eq(organizationMembers.userId, userId)\n    ),\n  });\n\n  return member?.role;\n}\n", "import type { ConnectionConfig } from './schema/connections';\nimport { db } from './db.server';\nimport { databaseConnections } from './schema/connections';\nimport { eq } from 'drizzle-orm';\nimport { createConnection, closeConnection, type DatabaseConnection } from './connection-handlers.server';\n\nexport class ConnectionManager {\n  private static instance: ConnectionManager;\n  private connections: Map<string, { connection: DatabaseConnection; type: string }>;\n\n  private constructor() {\n    this.connections = new Map();\n  }\n\n  public static getInstance(): ConnectionManager {\n    if (!ConnectionManager.instance) {\n      ConnectionManager.instance = new ConnectionManager();\n    }\n    return ConnectionManager.instance;\n  }\n\n  public async getConnection(connectionId: string): Promise<DatabaseConnection> {\n    // Check if we have an active connection\n    const existing = this.connections.get(connectionId);\n    if (existing) {\n      return existing.connection;\n    }\n\n    // Fetch connection details from the database\n    const connectionDetails = await db.query.databaseConnections.findFirst({\n      where: eq(databaseConnections.id, connectionId),\n    });\n\n    if (!connectionDetails || connectionDetails.archived) {\n      throw new Error(`Connection not found or archived: ${connectionId}`);\n    }\n\n    // Create new connection\n    const connection = await createConnection(connectionDetails.type, connectionDetails.config);\n    this.connections.set(connectionId, { connection, type: connectionDetails.type });\n    return connection;\n  }\n\n  public async testConnection(config: { type: string; config: ConnectionConfig }): Promise<void> {\n    const connection = await createConnection(config.type, config.config);\n    await closeConnection(connection, config.type);\n  }\n\n  public async closeConnection(connectionId: string): Promise<void> {\n    const existing = this.connections.get(connectionId);\n    if (existing) {\n      await closeConnection(existing.connection, existing.type);\n      this.connections.delete(connectionId);\n    }\n  }\n\n  public async closeAll(): Promise<void> {\n    // Close all active connections\n    for (const [id, { connection, type }] of this.connections.entries()) {\n      await closeConnection(connection, type);\n    }\n    this.connections.clear();\n  }\n}\n\nexport const connectionManager = ConnectionManager.getInstance();\n", "import type { Pool as PgPool } from 'pg';\nimport pg from 'pg';\nimport type { Connection as MySQLConnection } from 'mysql2/promise';\nimport mysql from 'mysql2/promise';\nimport type { Database as SQLiteDatabase } from 'sqlite3';\nimport sqlite3 from 'sqlite3';\nimport type { ConnectionPool as MSSQLPool } from 'tedious';\nimport { Connection as MSSQLConnection } from 'tedious';\nimport type { Connection as OracleConnection } from 'oracledb';\nimport oracledb from 'oracledb';\nimport type { MongoClient } from 'mongodb';\nimport { MongoClient as MongoDB } from 'mongodb';\nimport type { RedisClientType } from 'redis';\nimport { createClient as createRedisClient } from 'redis';\nimport type { ConnectionConfig } from './schema/connections';\n\nexport type DatabaseConnection = \n  | PgPool \n  | MySQLConnection \n  | SQLiteDatabase \n  | MSSQLPool \n  | OracleConnection \n  | MongoClient \n  | RedisClientType;\n\nexport async function createConnection(type: string, config: ConnectionConfig): Promise<DatabaseConnection> {\n  switch (type.toUpperCase()) {\n    case 'POSTGRES':\n      return createPostgresConnection(config);\n    case 'MYSQL':\n      return createMySQLConnection(config);\n    case 'SQLITE':\n      return createSQLiteConnection(config);\n    case 'MSSQL':\n      return createMSSQLConnection(config);\n    case 'ORACLE':\n      return createOracleConnection(config);\n    case 'MONGODB':\n      return createMongoDBConnection(config);\n    case 'REDIS':\n      return createRedisConnection(config);\n    default:\n      throw new Error(`Unsupported database type: ${type}`);\n  }\n}\n\nexport async function closeConnection(connection: DatabaseConnection, type: string): Promise<void> {\n  switch (type.toUpperCase()) {\n    case 'POSTGRES':\n      await (connection as PgPool).end();\n      break;\n    case 'MYSQL':\n      await (connection as MySQLConnection).end();\n      break;\n    case 'SQLITE':\n      await new Promise((resolve, reject) => {\n        (connection as SQLiteDatabase).close((err) => {\n          if (err) reject(err);\n          else resolve(undefined);\n        });\n      });\n      break;\n    case 'MSSQL':\n      await new Promise((resolve) => {\n        (connection as MSSQLPool).close();\n        resolve(undefined);\n      });\n      break;\n    case 'ORACLE':\n      await (connection as OracleConnection).close();\n      break;\n    case 'MONGODB':\n      await (connection as MongoClient).close();\n      break;\n    case 'REDIS':\n      await (connection as RedisClientType).quit();\n      break;\n    default:\n      throw new Error(`Unsupported database type: ${type}`);\n  }\n}\n\nasync function createPostgresConnection(config: ConnectionConfig): Promise<PgPool> {\n  if (!('host' in config)) throw new Error('Invalid Postgres config');\n  return new pg.Pool({\n    host: config.host,\n    port: config.port,\n    database: config.database,\n    user: config.username,\n    password: config.password,\n    ssl: config.ssl ? { rejectUnauthorized: false } : false,\n  });\n}\n\nasync function createMySQLConnection(config: ConnectionConfig): Promise<MySQLConnection> {\n  if (!('host' in config)) throw new Error('Invalid MySQL config');\n  return mysql.createConnection({\n    host: config.host,\n    port: config.port,\n    database: config.database,\n    user: config.username,\n    password: config.password,\n    ssl: config.ssl ? { rejectUnauthorized: false } : undefined,\n  });\n}\n\nasync function createSQLiteConnection(config: ConnectionConfig): Promise<SQLiteDatabase> {\n  if (!('filepath' in config)) throw new Error('Invalid SQLite config');\n  return new Promise((resolve, reject) => {\n    const db = new sqlite3.Database(config.filepath, (err) => {\n      if (err) reject(err);\n      else resolve(db);\n    });\n  });\n}\n\nasync function createMSSQLConnection(config: ConnectionConfig): Promise<MSSQLPool> {\n  if (!('host' in config)) throw new Error('Invalid MSSQL config');\n  return new Promise((resolve, reject) => {\n    const connection = new MSSQLConnection({\n      server: config.host,\n      options: {\n        port: config.port,\n        database: config.database,\n        trustServerCertificate: config.ssl ?? false,\n      },\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username,\n          password: config.password,\n        },\n      },\n    });\n    \n    connection.connect((err) => {\n      if (err) reject(err);\n      else resolve(connection as unknown as MSSQLPool);\n    });\n  });\n}\n\nasync function createOracleConnection(config: ConnectionConfig): Promise<OracleConnection> {\n  if (!('host' in config)) throw new Error('Invalid Oracle config');\n  return oracledb.getConnection({\n    connectString: `${config.host}:${config.port}/${config.database}`,\n    user: config.username,\n    password: config.password,\n  });\n}\n\nasync function createMongoDBConnection(config: ConnectionConfig): Promise<MongoClient> {\n  if (!('host' in config)) throw new Error('Invalid MongoDB config');\n  const { host, port, database, username, password, authSource = 'admin', replicaSet } = config as any;\n  const url = replicaSet\n    ? `mongodb://${username}:${password}@${host}:${port}/${database}?authSource=${authSource}&replicaSet=${replicaSet}`\n    : `mongodb://${username}:${password}@${host}:${port}/${database}?authSource=${authSource}`;\n  \n  const client = new MongoDB(url);\n  await client.connect();\n  return client;\n}\n\nasync function createRedisConnection(config: ConnectionConfig): Promise<RedisClientType> {\n  if (!('host' in config)) throw new Error('Invalid Redis config');\n  const client = createRedisClient({\n    url: `redis://${config.username}:${config.password}@${config.host}:${config.port}`,\n  });\n  await client.connect();\n  return client;\n}\n", "import { Dialog, Transition } from \"@headlessui/react\";\nimport { Form } from \"@remix-run/react\";\nimport { Fragment } from \"react\";\n\ninterface NewConnectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function NewConnectionModal({ isOpen, onClose }: NewConnectionModalProps) {\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as=\"div\" className=\"relative z-50\" onClose={onClose}>\n        <Transition.Child\n          as={Fragment}\n          enter=\"ease-out duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"ease-in duration-200\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 overflow-y-auto\">\n          <div className=\"flex min-h-full items-center justify-center p-4\">\n            <Transition.Child\n              as={Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-md transform overflow-hidden rounded-2xl bg-light-bg-primary dark:bg-dark-bg-secondary p-6 shadow-xl transition-all\">\n                <Dialog.Title as=\"h3\" className=\"text-lg font-medium mb-4\">\n                  New Database Connection\n                </Dialog.Title>\n\n                <Form method=\"post\" className=\"space-y-4\">\n                  <input type=\"hidden\" name=\"intent\" value=\"create\" />\n\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-medium mb-1\">\n                      Connection Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"name\"\n                      name=\"name\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"host\" className=\"block text-sm font-medium mb-1\">\n                      Host\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"host\"\n                      name=\"host\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"port\" className=\"block text-sm font-medium mb-1\">\n                      Port\n                    </label>\n                    <input\n                      type=\"number\"\n                      id=\"port\"\n                      name=\"port\"\n                      defaultValue={5555}\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"database\" className=\"block text-sm font-medium mb-1\">\n                      Database Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"database\"\n                      name=\"database\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"username\" className=\"block text-sm font-medium mb-1\">\n                      Username\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"username\"\n                      name=\"username\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium mb-1\">\n                      Password\n                    </label>\n                    <input\n                      type=\"password\"\n                      id=\"password\"\n                      name=\"password\"\n                      className=\"w-full px-3 py-2 border border-light-border dark:border-dark-border rounded-lg bg-light-bg-secondary dark:bg-dark-bg-tertiary focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"ssl\"\n                      name=\"ssl\"\n                      className=\"h-4 w-4 rounded border-light-border dark:border-dark-border text-blue-600 focus:ring-blue-500\"\n                    />\n                    <label htmlFor=\"ssl\" className=\"ml-2 block text-sm\">\n                      Use SSL\n                    </label>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-4 mt-6\">\n                    <button\n                      type=\"button\"\n                      className=\"px-4 py-2 text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\"\n                      onClick={onClose}\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n                    >\n                      Create Connection\n                    </button>\n                  </div>\n                </Form>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n", "import pkg from 'pg';\nconst { Pool } = pkg;\n\nexport async function testPostgresConnection(config: {\n  host: string;\n  port: number;\n  database: string;\n  username: string;\n  password: string;\n  ssl?: boolean;\n}) {\n  const pool = new Pool(config);\n  try {\n    const client = await pool.connect();\n    client.release();\n    await pool.end();\n    return true;\n  } catch (error) {\n    throw error;\n  }\n}\n", "import { json } from \"@remix-run/node\";\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { requireOrganization } from \"../lib/auth/session.server\";\nimport { db } from \"../lib/db/db.server\";\nimport { organizationMembers } from \"../lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\ninterface LoaderData {\n  members: Array<{\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n    joinedAt: string;\n  }>;\n  isAdmin: boolean;\n}\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const user = await requireOrganization(request);\n\n  // Get all members of the organization\n  const members = await db.query.organizationMembers.findMany({\n    where: eq(organizationMembers.organizationId, params.orgId!),\n    with: {\n      user: true,\n    },\n    orderBy: (members, { desc }) => [desc(members.createdAt)],\n  });\n\n  return json<LoaderData>({\n    members: members.map((member) => ({\n      id: member.id,\n      email: member.user.email,\n      name: member.user.name,\n      role: member.role,\n      joinedAt: member.createdAt.toISOString(),\n    })),\n    isAdmin: user.organizationRole === \"ADMIN\",\n  });\n}\n\nexport default function MembersPage() {\n  const { members, isAdmin } = useLoaderData<LoaderData>();\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-10\">\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n            Organization Members\n          </h1>\n          <p className=\"mt-2 text-sm text-gray-700 dark:text-gray-300\">\n            A list of all members in your organization including their name, email, and role.\n          </p>\n        </div>\n        {isAdmin && (\n          <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n            <Link\n              to=\"invite\"\n              className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:w-auto\"\n            >\n              Invite Member\n            </Link>\n          </div>\n        )}\n      </div>\n      <div className=\"mt-8 flex flex-col\">\n        <div className=\"-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"inline-block min-w-full py-2 align-middle md:px-6 lg:px-8\">\n            <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-300 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                  <tr>\n                    <th\n                      scope=\"col\"\n                      className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-white sm:pl-6\"\n                    >\n                      Name\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\"\n                    >\n                      Email\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\"\n                    >\n                      Role\n                    </th>\n                    <th\n                      scope=\"col\"\n                      className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\"\n                    >\n                      Joined\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-900\">\n                  {members.map((member) => (\n                    <tr key={member.id}>\n                      <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-white sm:pl-6\">\n                        {member.name}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        {member.email}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        {member.role}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(member.joinedAt).toLocaleDateString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useParams } from \"@remix-run/react\";\nimport { requireOrganizationRole } from \"../lib/auth/session.server\";\nimport { db } from \"../lib/db/db.server\";\nimport { users, organizationMembers } from \"../lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\nconst InviteUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  role: z.enum([\"ADMIN\", \"MEMBER\"], {\n    required_error: \"Role is required\",\n  }),\n});\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  // Only admins can invite users\n  await requireOrganizationRole(request, \"ADMIN\");\n  return null;\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  // Only admins can invite users\n  await requireOrganizationRole(request, \"ADMIN\");\n\n  const formData = await request.formData();\n  const result = InviteUserSchema.safeParse({\n    email: formData.get(\"email\"),\n    role: formData.get(\"role\"),\n  });\n\n  if (!result.success) {\n    return json({ errors: result.error.flatten() }, { status: 400 });\n  }\n\n  try {\n    // Check if user exists\n    const existingUser = await db.query.users.findFirst({\n      where: eq(users.email, result.data.email),\n      columns: {\n        id: true,\n      },\n    });\n\n    if (!existingUser) {\n      return json(\n        {\n          errors: {\n            formErrors: [\"User with this email does not exist\"],\n            fieldErrors: {},\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    // Check if user is already a member\n    const existingMember = await db.query.organizationMembers.findFirst({\n      where: eq(organizationMembers.userId, existingUser.id),\n      columns: {\n        id: true,\n      },\n    });\n\n    if (existingMember) {\n      return json(\n        {\n          errors: {\n            formErrors: [\"User is already a member of this organization\"],\n            fieldErrors: {},\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    // Add user to organization\n    await db.insert(organizationMembers).values({\n      organizationId: params.orgId!,\n      userId: existingUser.id,\n      role: result.data.role,\n    });\n\n    return redirect(`/organizations/${params.orgId}/members`);\n  } catch (error) {\n    if (error instanceof Error) {\n      return json(\n        {\n          errors: {\n            formErrors: [error.message],\n            fieldErrors: {},\n          },\n        },\n        { status: 400 }\n      );\n    }\n    return json(\n      {\n        errors: {\n          formErrors: [\"An unexpected error occurred\"],\n          fieldErrors: {},\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport default function InviteUserPage() {\n  const actionData = useActionData<typeof action>();\n  const params = useParams();\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <h1 className=\"text-center text-2xl font-bold text-gray-900 dark:text-white mb-8\">\n          Invite User\n        </h1>\n\n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Email Address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={Boolean(actionData?.errors?.fieldErrors?.email)}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.email ? \"email-error\" : undefined\n                }\n              />\n              {actionData?.errors?.fieldErrors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.fieldErrors.email[0]}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"role\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-200\"\n            >\n              Role\n            </label>\n            <div className=\"mt-1\">\n              <select\n                id=\"role\"\n                name=\"role\"\n                required\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg dark:bg-gray-800 dark:text-white\"\n                aria-invalid={Boolean(actionData?.errors?.fieldErrors?.role)}\n                aria-describedby={\n                  actionData?.errors?.fieldErrors?.role ? \"role-error\" : undefined\n                }\n              >\n                <option value=\"\">Select a role</option>\n                <option value=\"ADMIN\">Admin</option>\n                <option value=\"MEMBER\">Member</option>\n              </select>\n              {actionData?.errors?.fieldErrors?.role && (\n                <div className=\"pt-1 text-red-700\" id=\"role-error\">\n                  {actionData.errors.fieldErrors.role[0]}\n                </div>\n              )}\n            </div>\n            <p className=\"mt-2 text-sm text-gray-500 dark:text-gray-400\">\n              Admins can manage organization settings and members. Members can only view and query databases.\n            </p>\n          </div>\n\n          {actionData?.errors?.formErrors?.length > 0 && (\n            <div className=\"rounded-md bg-red-50 p-4 dark:bg-red-900\">\n              <div className=\"flex\">\n                <div className=\"ml-3\">\n                  <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                    Error\n                  </h3>\n                  <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                    <ul className=\"list-disc space-y-1 pl-5\">\n                      {actionData.errors.formErrors.map((error) => (\n                        <li key={error}>{error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between space-x-4\">\n            <button\n              type=\"button\"\n              onClick={() => window.history.back()}\n              className=\"flex-1 rounded border border-gray-500 px-4 py-2 text-gray-700 hover:bg-gray-50 dark:text-gray-200 dark:hover:bg-gray-700\"\n            >\n              Back\n            </button>\n            <button\n              type=\"submit\"\n              className=\"flex-1 rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n            >\n              Send Invite\n            </button>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useNavigation } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { \n  ConnectionSchema, \n  type ConnectionInput,\n  getConnection, \n  testConnection, \n  updateConnection, \n  deleteConnection, \n  type DatabaseConnection\n} from \"../lib/connections/config.server\";\nimport { DATABASE_TYPES } from \"../lib/db/schema\";\n\ninterface ActionData {\n  errors?: {\n    formErrors?: string[];\n    fieldErrors?: {\n      name?: string[];\n      type?: string[];\n      host?: string[];\n      port?: string[];\n      database?: string[];\n      username?: string[];\n      password?: string[];\n      ssl?: string[];\n      filepath?: string[];\n      authSource?: string[];\n      replicaSet?: string[];\n    };\n  };\n  tested?: boolean;\n}\n\ntype LoaderData = {\n  connection: DatabaseConnection;\n};\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  if (!user.currentOrganization) {\n    throw new Error(\"No organization selected\");\n  }\n\n  const connection = await getConnection(params.id!, user.currentOrganization);\n  if (!connection) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n\n  return json<LoaderData>({ connection });\n}\n\nexport async function action({ request, params }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  if (!user.currentOrganization) {\n    throw new Error(\"No organization selected\");\n  }\n\n  const formData = await request.formData();\n  const intent = formData.get(\"_action\");\n\n  if (intent === \"delete\") {\n    await deleteConnection(params.id!, user.currentOrganization);\n    return redirect(\"/connections\");\n  }\n\n  const rawData = {\n    name: formData.get(\"name\") as string | null,\n    type: formData.get(\"type\") as string | null,\n    host: formData.get(\"host\") as string | null,\n    port: formData.get(\"port\") as string | null,\n    database: formData.get(\"database\") as string | null,\n    username: formData.get(\"username\") as string | null,\n    password: formData.get(\"password\") as string | null,\n    ssl: formData.get(\"ssl\") === \"on\",\n    filepath: formData.get(\"filepath\") as string | null,\n    authSource: formData.get(\"authSource\") as string | null,\n    replicaSet: formData.get(\"replicaSet\") as string | null,\n  };\n\n  const result = ConnectionSchema.safeParse(rawData);\n\n  if (!result.success) {\n    return json<ActionData>({\n      errors: {\n        formErrors: [],\n        fieldErrors: result.error.formErrors.fieldErrors,\n      },\n    });\n  }\n\n  try {\n    if (intent === \"test\") {\n      const success = await testConnection(result.data);\n      return json<ActionData>({\n        tested: success,\n      });\n    }\n\n    await updateConnection(params.id!, user.currentOrganization, result.data);\n    return redirect(\"/connections\");\n  } catch (error) {\n    return json<ActionData>(\n      {\n        errors: {\n          formErrors: [(error as Error).message],\n        },\n      },\n      { status: 400 }\n    );\n  }\n}\n\nexport default function EditConnectionPage() {\n  const { connection } = useLoaderData<LoaderData>();\n  const actionData = useActionData<ActionData>();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\";\n\n  const config = connection.config;\n  const initialValues = {\n    name: connection.name,\n    type: connection.type,\n    ...('host' in config ? {\n      host: config.host,\n      port: config.port?.toString() ?? '',\n      username: config.username ?? '',\n      password: config.password ?? '',\n      ssl: config.ssl ?? false,\n    } : {}),\n    ...('database' in config ? {\n      database: typeof config.database === 'number' ? String(config.database) : config.database ?? '',\n    } : {}),\n    ...('filepath' in config ? {\n      filepath: config.filepath,\n    } : {}),\n    ...('authSource' in config ? {\n      authSource: config.authSource ?? '',\n      replicaSet: config.replicaSet ?? '',\n    } : {}),\n  } as const;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        <h1 className=\"text-2xl font-bold mb-6\">Edit Connection</h1>\n        \n        <Form method=\"post\" className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n              Name\n            </label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              defaultValue={initialValues.name}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            />\n            {actionData?.errors?.fieldErrors?.name && (\n              <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.name[0]}</p>\n            )}\n          </div>\n\n          <div>\n            <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">\n              Type\n            </label>\n            <select\n              id=\"type\"\n              name=\"type\"\n              defaultValue={initialValues.type}\n              className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            >\n              {DATABASE_TYPES.map((type) => (\n                <option key={type} value={type}>\n                  {type}\n                </option>\n              ))}\n            </select>\n            {actionData?.errors?.fieldErrors?.type && (\n              <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.type[0]}</p>\n            )}\n          </div>\n\n          {initialValues.type !== \"SQLITE\" ? (\n            <>\n              <div>\n                <label htmlFor=\"host\" className=\"block text-sm font-medium text-gray-700\">\n                  Host\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"host\"\n                  id=\"host\"\n                  defaultValue={initialValues.host}\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                />\n                {actionData?.errors?.fieldErrors?.host && (\n                  <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.host[0]}</p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"port\" className=\"block text-sm font-medium text-gray-700\">\n                  Port\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"port\"\n                  id=\"port\"\n                  defaultValue={initialValues.port}\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                />\n                {actionData?.errors?.fieldErrors?.port && (\n                  <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.port[0]}</p>\n                )}\n              </div>\n\n              {initialValues.type !== \"REDIS\" && (\n                <div>\n                  <label htmlFor=\"database\" className=\"block text-sm font-medium text-gray-700\">\n                    Database\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"database\"\n                    id=\"database\"\n                    defaultValue={initialValues.database}\n                    className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                  />\n                  {actionData?.errors?.fieldErrors?.database && (\n                    <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.database[0]}</p>\n                  )}\n                </div>\n              )}\n\n              <div>\n                <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">\n                  Username\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"username\"\n                  id=\"username\"\n                  defaultValue={initialValues.username}\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                />\n                {actionData?.errors?.fieldErrors?.username && (\n                  <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.username[0]}</p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                  Password\n                </label>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  defaultValue={initialValues.password}\n                  className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                />\n                {actionData?.errors?.fieldErrors?.password && (\n                  <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.password[0]}</p>\n                )}\n              </div>\n\n              {initialValues.type === \"MONGODB\" && (\n                <>\n                  <div>\n                    <label htmlFor=\"authSource\" className=\"block text-sm font-medium text-gray-700\">\n                      Auth Source\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"authSource\"\n                      id=\"authSource\"\n                      defaultValue={initialValues.authSource}\n                      className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                    />\n                    {actionData?.errors?.fieldErrors?.authSource && (\n                      <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.authSource[0]}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"replicaSet\" className=\"block text-sm font-medium text-gray-700\">\n                      Replica Set\n                    </label>\n                    <input\n                      type=\"text\"\n                      name=\"replicaSet\"\n                      id=\"replicaSet\"\n                      defaultValue={initialValues.replicaSet}\n                      className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                    />\n                    {actionData?.errors?.fieldErrors?.replicaSet && (\n                      <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.replicaSet[0]}</p>\n                    )}\n                  </div>\n                </>\n              )}\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  name=\"ssl\"\n                  id=\"ssl\"\n                  defaultChecked={initialValues.ssl}\n                  className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n                />\n                <label htmlFor=\"ssl\" className=\"ml-2 block text-sm text-gray-900\">\n                  Use SSL\n                </label>\n              </div>\n            </>\n          ) : (\n            <div>\n              <label htmlFor=\"filepath\" className=\"block text-sm font-medium text-gray-700\">\n                File Path\n              </label>\n              <input\n                type=\"text\"\n                name=\"filepath\"\n                id=\"filepath\"\n                defaultValue={initialValues.filepath}\n                className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n              />\n              {actionData?.errors?.fieldErrors?.filepath && (\n                <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.fieldErrors.filepath[0]}</p>\n              )}\n            </div>\n          )}\n\n          {actionData?.errors?.formErrors && (\n            <div className=\"rounded-md bg-red-50 p-4\">\n              <div className=\"flex\">\n                <div className=\"ml-3\">\n                  <h3 className=\"text-sm font-medium text-red-800\">Error</h3>\n                  <div className=\"mt-2 text-sm text-red-700\">\n                    <ul className=\"list-disc pl-5 space-y-1\">\n                      {actionData.errors.formErrors.map((error) => (\n                        <li key={error}>{error}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-between\">\n            <button\n              type=\"submit\"\n              name=\"_action\"\n              value=\"test\"\n              disabled={isSubmitting}\n              className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n            >\n              {isSubmitting ? \"Testing...\" : \"Test Connection\"}\n            </button>\n            <div className=\"space-x-4\">\n              <button\n                type=\"submit\"\n                name=\"_action\"\n                value=\"save\"\n                disabled={isSubmitting}\n                className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500\"\n              >\n                {isSubmitting ? \"Saving...\" : \"Save Changes\"}\n              </button>\n              <button\n                type=\"submit\"\n                name=\"_action\"\n                value=\"delete\"\n                disabled={isSubmitting}\n                className=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n              >\n                {isSubmitting ? \"Deleting...\" : \"Delete\"}\n              </button>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import { db } from \"../db/db.server\";\nimport { databaseConnections, type ConnectionConfig } from \"../db/schema\";\nimport { eq, and } from \"drizzle-orm\";\nimport type { InferSelectModel } from 'drizzle-orm';\nimport { z } from \"zod\";\n\n// Base type from database schema\nexport type DatabaseConnection = InferSelectModel<typeof databaseConnections>;\n\n// Schema for validating inputs\nconst BaseConnectionSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n  type: z.enum([\"POSTGRES\", \"MYSQL\", \"SQLITE\", \"MSSQL\", \"ORACLE\", \"MONGODB\", \"REDIS\"] as const),\n});\n\nconst StandardConnectionSchema = BaseConnectionSchema.extend({\n  type: z.enum([\"POSTGRES\", \"MYSQL\", \"MSSQL\", \"ORACLE\"] as const),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.number().min(1, \"Port is required\"),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.boolean().default(false),\n});\n\nconst MongoDBConnectionSchema = BaseConnectionSchema.extend({\n  type: z.literal(\"MONGODB\"),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.number().min(1, \"Port is required\"),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.boolean().default(false),\n  authSource: z.string().optional(),\n  replicaSet: z.string().optional(),\n});\n\nconst RedisConnectionSchema = BaseConnectionSchema.extend({\n  type: z.literal(\"REDIS\"),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.number().min(1, \"Port is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  database: z.number().optional(),\n  ssl: z.boolean().default(false),\n});\n\nconst SQLiteConnectionSchema = BaseConnectionSchema.extend({\n  type: z.literal(\"SQLITE\"),\n  filepath: z.string().min(1, \"File path is required\"),\n});\n\nexport const ConnectionSchema = z.discriminatedUnion(\"type\", [\n  StandardConnectionSchema,\n  MongoDBConnectionSchema,\n  RedisConnectionSchema,\n  SQLiteConnectionSchema,\n]);\n\nexport type ConnectionInput = z.infer<typeof ConnectionSchema>;\n\nfunction createConnectionConfig(input: ConnectionInput): ConnectionConfig {\n  switch (input.type) {\n    case \"SQLITE\":\n      return {\n        type: input.type,\n        filepath: input.filepath,\n      };\n    case \"MONGODB\":\n      return {\n        type: input.type,\n        host: input.host,\n        port: input.port,\n        database: input.database,\n        username: input.username,\n        password: input.password,\n        ssl: input.ssl,\n        authSource: input.authSource,\n        replicaSet: input.replicaSet,\n      };\n    case \"REDIS\":\n      return {\n        type: input.type,\n        host: input.host,\n        port: input.port,\n        username: input.username,\n        password: input.password,\n        database: input.database ? String(input.database) : undefined,\n        ssl: input.ssl,\n      };\n    default:\n      return {\n        type: input.type,\n        host: input.host,\n        port: input.port,\n        database: input.database,\n        username: input.username,\n        password: input.password,\n        ssl: input.ssl,\n      };\n  }\n}\n\nexport async function createConnection(\n  organizationId: string,\n  createdById: string,\n  input: ConnectionInput\n): Promise<DatabaseConnection> {\n  const config = createConnectionConfig(input);\n  \n  return await db.insert(databaseConnections)\n    .values({\n      name: input.name,\n      type: input.type,\n      organizationId,\n      createdById,\n      config,\n      archived: false,\n    })\n    .returning()\n    .then(rows => rows[0]);\n}\n\nexport async function updateConnection(\n  id: string, \n  organizationId: string, \n  input: Partial<ConnectionInput>\n): Promise<DatabaseConnection> {\n  // Get existing connection\n  const existing = await getConnection(id, organizationId);\n  if (!existing) {\n    throw new Error(\"Connection not found\");\n  }\n\n  // Merge input with existing config\n  const merged = {\n    ...existing.config,\n    ...input,\n    name: input.name ?? existing.name,\n    type: input.type ?? existing.config.type,\n  } as ConnectionInput;\n\n  // Validate merged input\n  const parsed = ConnectionSchema.parse(merged);\n  const config = createConnectionConfig(parsed);\n\n  return await db.update(databaseConnections)\n    .set({\n      name: parsed.name,\n      type: parsed.type,\n      config,\n      updatedAt: new Date(),\n    })\n    .where(and(\n      eq(databaseConnections.id, id),\n      eq(databaseConnections.organizationId, organizationId)\n    ))\n    .returning()\n    .then(rows => rows[0]);\n}\n\nexport async function deleteConnection(id: string, organizationId: string): Promise<void> {\n  await db.delete(databaseConnections)\n    .where(and(\n      eq(databaseConnections.id, id),\n      eq(databaseConnections.organizationId, organizationId)\n    ));\n}\n\nexport async function getConnection(id: string, organizationId: string): Promise<DatabaseConnection | null> {\n  const connection = await db.select()\n    .from(databaseConnections)\n    .where(and(\n      eq(databaseConnections.id, id),\n      eq(databaseConnections.organizationId, organizationId)\n    ))\n    .then(rows => rows[0] ?? null);\n\n  return connection;\n}\n\nexport async function listConnections(organizationId: string): Promise<DatabaseConnection[]> {\n  console.log(organizationId)\n  return await db.select()\n    .from(databaseConnections)\n    .where(eq(databaseConnections.organizationId, organizationId));\n}\n\nexport async function testConnection(input: ConnectionInput): Promise<boolean> {\n  // TODO: Implement actual connection testing logic\n  return true;\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { getUserOrganizations } from \"../lib/organizations/organizations.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  const organizations = await getUserOrganizations(user.id);\n  return json({ organizations });\n}\n\nexport default function OrganizationsPage() {\n  const { organizations } = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-semibold\">Organizations</h1>\n        <Link\n          to=\"new\"\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n        >\n          Create Organization\n        </Link>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n        {organizations.map((organization) => (\n          <Link\n            key={organization.id}\n            to={organization.id}\n            className=\"block p-6 bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-secondary transition-colors\"\n          >\n            <h2 className=\"text-lg font-medium mb-2\">{organization.name}</h2>\n            <p className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n              Created {new Date(organization.createdAt).toLocaleDateString()}\n            </p>\n          </Link>\n        ))}\n\n        {organizations.length === 0 && (\n          <div className=\"col-span-full text-center py-12\">\n            <h3 className=\"text-lg font-medium mb-2\">No organizations yet</h3>\n            <p className=\"text-light-text-secondary dark:text-dark-text-secondary mb-4\">\n              Create your first organization to get started\n            </p>\n            <Link\n              to=\"new\"\n              className=\"inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-500 transition-colors\"\n            >\n              Create Organization\n            </Link>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, Link } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { db } from \"../lib/db/db.server\";\nimport { organizations, organizationMembers } from \"../lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { setCurrentOrganization } from \"../lib/auth/session.server\";\n\ninterface LoaderData {\n  organizations: Array<{\n    id: string;\n    name: string;\n    role: string;\n  }>;\n}\n\ninterface ActionData {\n  error?: string;\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n\n  // If user already has a current organization, redirect to it\n  if (user.currentOrganization) {\n    return redirect(`/organizations/${user.currentOrganization}`);\n  }\n\n  // Get all organizations the user is a member of\n  const userOrgs = await db.query.organizationMembers.findMany({\n    where: eq(organizationMembers.userId, user.id),\n    with: {\n      organization: true,\n    },\n  });\n\n  return json<LoaderData>({\n    organizations: userOrgs.map((org) => ({\n      id: org.organizationId,\n      name: org.organization.name,\n      role: org.role,\n    })),\n  });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const formData = await request.formData();\n  const organizationId = formData.get(\"organizationId\") as string;\n\n  if (!organizationId) {\n    return json<ActionData>({ error: \"Organization ID is required\" }, { status: 400 });\n  }\n\n  // Verify user is a member of the organization\n  const membership = await db.query.organizationMembers.findFirst({\n    where: eq(organizationMembers.userId, user.id),\n    columns: {\n      role: true,\n    },\n  });\n\n  if (!membership) {\n    return json<ActionData>({ error: \"You are not a member of this organization\" }, { status: 403 });\n  }\n\n  return setCurrentOrganization(request, organizationId);\n}\n\nexport default function SelectOrganization() {\n  const { organizations } = useLoaderData<LoaderData>();\n  const actionData = useActionData<ActionData>();\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <h2 className=\"text-center text-2xl font-bold text-gray-900 dark:text-white\">\n          Select Organization\n        </h2>\n\n        <div className=\"mt-8 space-y-4\">\n          {organizations.map((org) => (\n            <Form key={org.id} method=\"post\" className=\"space-y-4\">\n              <input type=\"hidden\" name=\"organizationId\" value={org.id} />\n              <button\n                type=\"submit\"\n                className=\"w-full rounded-lg border border-gray-300 bg-white px-4 py-3 text-left hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:hover:bg-gray-700\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                      {org.name}\n                    </h3>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      Role: {org.role.toLowerCase()}\n                    </p>\n                  </div>\n                  <svg\n                    className=\"h-5 w-5 text-gray-400\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                    fill=\"currentColor\"\n                    aria-hidden=\"true\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </div>\n              </button>\n            </Form>\n          ))}\n\n          {actionData?.error && (\n            <div className=\"rounded-md bg-red-50 p-4 dark:bg-red-900\">\n              <div className=\"flex\">\n                <div className=\"ml-3\">\n                  <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                    Error\n                  </h3>\n                  <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                    {actionData.error}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"mt-6 flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n              Want to create a new organization?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to=\"/organizations/new\"\n              >\n                Create one\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { listConnections } from \"../lib/connections/config.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  if (!user.currentOrganization) {\n    throw new Error(\"No organization selected\");\n  }\n\n  const connections = await listConnections(user.currentOrganization);\n  // Add status field to each connection\n  const connectionsWithStatus = connections.map(conn => ({\n    ...conn,\n    status: 'connected' as const // TODO: Implement actual connection status check\n  }));\n  return json({ connections: connectionsWithStatus });\n}\n\nexport default function ConnectionsIndexPage() {\n  const { connections } = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">Database Connections</h1>\n          <p className=\"mt-2 text-sm text-gray-700 dark:text-gray-300\">\n            A list of all database connections in your organization.\n          </p>\n        </div>\n        <div className=\"mt-4 sm:ml-16 sm:mt-0 sm:flex-none\">\n          <Link\n            to=\"new\"\n            className=\"block rounded-md bg-blue-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\"\n          >\n            Add connection\n          </Link>\n        </div>\n      </div>\n      <div className=\"mt-8 flow-root\">\n        <div className=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\n            <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-300 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                  <tr>\n                    <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-white sm:pl-6\">\n                      Name\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                      Type\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                      Host\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                      Database\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                      Status\n                    </th>\n                    <th scope=\"col\" className=\"relative py-3.5 pl-3 pr-4 sm:pr-6\">\n                      <span className=\"sr-only\">Actions</span>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-900\">\n                  {connections.map((connection) => (\n                    <tr key={connection.id}>\n                      <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-white sm:pl-6\">\n                        {connection.name}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        {connection.type}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        {connection.config.host}:{connection.config.port}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        {connection.config.database}\n                      </td>\n                      <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                        <span className={`inline-flex items-center rounded-md px-2 py-1 text-xs font-medium ${\n                          connection.status === 'connected' ? 'bg-green-50 text-green-700 ring-1 ring-inset ring-green-600/20 dark:bg-green-500/10' :\n                          'bg-red-50 text-red-700 ring-1 ring-inset ring-red-600/20 dark:bg-red-500/10'\n                        }`}>\n                          {connection.status}\n                        </span>\n                      </td>\n                      <td className=\"relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6\">\n                        <Link\n                          to={`${connection.id}/edit`}\n                          className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300\"\n                        >\n                          Edit<span className=\"sr-only\">, {connection.name}</span>\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                  {connections.length === 0 && (\n                    <tr>\n                      <td colSpan={6} className=\"py-8 text-center text-sm text-gray-500 dark:text-gray-400\">\n                        No connections found. <Link to=\"new\" className=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300\">Add one now</Link>.\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { getOrganization } from \"../lib/organizations/organizations.server\";\nimport { z } from \"zod\";\n\nconst ParamsSchema = z.object({\n  id: z.string().uuid()\n});\n\nexport async function loader({ request, params }: LoaderFunctionArgs) {\n  const user = await requireUser(request);\n  \n  const result = ParamsSchema.safeParse(params);\n  if (!result.success) {\n    throw new Response(\"Invalid organization ID\", { status: 400 });\n  }\n\n  const organization = await getOrganization(result.data.id, user.id);\n  if (!organization) {\n    throw new Response(\"Organization not found\", { status: 404 });\n  }\n\n  return json({ organization });\n}\n\nexport default function OrganizationPage() {\n  const { organization } = useLoaderData<typeof loader>();\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-semibold\">{organization.name}</h1>\n      </div>\n\n      <div className=\"bg-light-bg-secondary dark:bg-dark-bg-tertiary rounded-lg p-6\">\n        <div className=\"mb-4\">\n          <h2 className=\"text-lg font-medium mb-2\">Organization Details</h2>\n          <p className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n            Created {new Date(organization.createdAt).toLocaleDateString()}\n          </p>\n        </div>\n        {organization.description && (\n          <div className=\"mt-4\">\n            <h3 className=\"text-md font-medium mb-2\">Description</h3>\n            <p className=\"text-light-text-secondary dark:text-dark-text-secondary\">\n              {organization.description}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useActionData, useFetcher, useFormAction } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { createOrganization } from \"../lib/organizations/organizations.server\";\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"../components/ui/button\";\nimport {\n  Form as ShadForm,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"../components/ui/form\";\nimport { Input } from \"../components/ui/input\";\nimport { Textarea } from \"../components/ui/textarea\";\n\nconst CreateOrganizationSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n  slug: z.string().min(1, \"Slug is required\").max(50)\n    .regex(/^[a-z0-9-]+$/, \"Slug can only contain lowercase letters, numbers, and hyphens\"),\n  description: z.string().max(500).optional(),\n});\n\ntype FormSchema = z.infer<typeof CreateOrganizationSchema>;\n\nexport type ActionData = {\n  errors?: {\n    formErrors?: string[];\n    fieldErrors?: {\n      name?: string[];\n      slug?: string[];\n      description?: string[];\n    };\n  };\n};\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  await requireUser(request);\n  return json({});\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  try {\n    const user = await requireUser(request);\n    const formData = await request.formData();\n    const name = formData.get(\"name\");\n    const slug = formData.get(\"slug\");\n    const description = formData.get(\"description\");\n\n    const result = CreateOrganizationSchema.safeParse({ name, slug, description });\n    if (!result.success) {\n      return json<ActionData>({ errors: result.error.flatten() }, { status: 400 });\n    }\n\n    const organization = await createOrganization({\n      name: result.data.name,\n      slug: result.data.slug,\n      description: result.data.description,\n      userId: user.id,\n    });\n\n    console.log('Organization created:', organization);\n\n    return redirect(`/organizations/${organization.slug}`);\n  } catch (error) {\n    console.error('Error creating organization:', error);\n    return json<ActionData>({\n      errors: {\n        formErrors: ['Failed to create organization. Please try again.']\n      }\n    }, { status: 500 });\n  }\n}\n\nexport default function NewOrganizationPage() {\n  const { Form, submit } = useFetcher();\n  const actionData = useActionData<ActionData>();\n  const action = useFormAction();\n  const form = useForm<FormSchema>({\n    resolver: zodResolver(CreateOrganizationSchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n    },\n  });\n\n  const onSubmit = async (data: FormSchema) => {\n    return submit(data, {\n      method: \"post\",\n      action,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6\">\n      <div className=\"w-full max-w-2xl bg-card rounded-lg shadow-sm border p-6\">\n        <h1 className=\"text-2xl font-semibold mb-6\">Create Organization</h1>\n\n        {actionData?.errors?.formErrors ? (\n          <div className=\"rounded-md bg-destructive/15 p-4 mb-6\">\n            <div className=\"flex\">\n              <div className=\"text-sm text-destructive\">\n                {actionData.errors.formErrors.map((error) => (\n                  <p key={error}>{error}</p>\n                ))}\n              </div>\n            </div>\n          </div>\n        ) : null}\n\n        <Form method=\"post\" onSubmit={form.handleSubmit(onSubmit)}>\n          <ShadForm {...form}>\n            <div className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"slug\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Slug</FormLabel>\n                    <FormControl>\n                      <Input {...field} pattern=\"[a-z0-9-]+\" />\n                    </FormControl>\n                    <FormDescription>\n                      Only lowercase letters, numbers, and hyphens are allowed\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={3} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end\">\n                <Button type=\"submit\">\n                  Create Organization\n                </Button>\n              </div>\n            </div>\n          </ShadForm>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n", "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n", "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\nimport { cn } from \"../../utils/cn\"\nimport { Label } from \"./label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n", "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n", "import * as React from \"react\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n", "import * as React from \"react\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n", "import { json, redirect, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { ConnectionInput, ConnectionSchema, createConnection, testConnection } from \"../lib/connections/config.server\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"../components/ui/button\";\nimport {\n  Form as ShadForm,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"../components/ui/form\";\nimport { Input } from \"../components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../components/ui/select\";\nimport { Checkbox } from \"../components/ui/checkbox\";\nimport { create } from \"lodash-es\";\n\ntype FormSchema = z.infer<typeof ConnectionSchema>;\n\ninterface ActionData {\n  errors?: {\n    formErrors?: string[];\n    fieldErrors?: {\n      name?: string[];\n      type?: string[];\n      host?: string[];\n      port?: string[];\n      database?: string[];\n      username?: string[];\n      password?: string[];\n    };\n  };\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  // Ensure user is authenticated\n  const user = await requireUser(request);\n  if (!user) {\n    return json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  try {\n    // Parse form data \n    const formData = await request.formData();\n    const data = Object.fromEntries(formData);\n\n    // Validate the data\n    const validatedData = ConnectionSchema.parse({\n      ...data,\n      // Convert ssl to boolean if it exists\n      ssl: data.ssl === 'true',\n      // Convert port to number if it exists\n      port: data.port ? Number(data.port) : undefined,\n    });\n\n    // Prepare connection configuration\n    const connectionConfig = {\n      name: validatedData.name,\n      type: validatedData.type,\n      organizationId: user.currentOrganization.id,\n      createdById: user.id,\n      archived: false,\n      config: {\n        type: validatedData.type.toLowerCase(),\n        host: validatedData['host' as keyof typeof validatedData],\n        port: validatedData['port' as keyof typeof validatedData],\n        database: validatedData['database' as keyof typeof validatedData],\n        username: validatedData['username' as keyof typeof validatedData],\n        password: validatedData['password' as keyof typeof validatedData],\n        ssl: validatedData['ssl' as keyof typeof validatedData],\n        filepath: validatedData['filepath' as keyof typeof validatedData],\n      },\n    };\n\n    // Test the connection first\n    const isValid = await testConnection(connectionConfig as unknown as ConnectionInput);\n\n    if (!isValid) {\n      return json({ \n        error: \"Invalid connection details\", \n        details: [\"Could not connect to database\"] \n      }, { status: 400 });\n    }\n\n    // Insert the connection into the database\n    await createConnection(user.currentOrganization, user.id, connectionConfig as unknown as ConnectionInput);\n\n    return redirect(\"/connections\");\n  } catch (error) {\n    console.error(\"Connection creation error:\", error);\n\n    // Handle different types of errors\n    if (error instanceof z.ZodError) {\n      return json({ \n        error: \"Invalid connection details\", \n        details: error.errors \n      }, { status: 400 });\n    }\n\n    return json({ \n      error: error instanceof Error ? error.message : \"Failed to create connection\" \n    }, { status: 500 });\n  }\n}\n\nexport default function NewConnectionPage() {\n  const actionData = useActionData<ActionData>();\n  const navigation = useNavigation();\n  const isSubmitting = navigation.state === \"submitting\";\n  const isTesting = navigation.formData?.get(\"intent\") === \"test\";\n\n  const form = useForm<FormSchema>({\n    resolver: zodResolver(ConnectionSchema),\n    defaultValues: {\n      name: \"\",\n      type: undefined,\n      host: \"\",\n      port: undefined,\n      database: \"\",\n      username: \"\",\n      password: \"\",\n      ssl: false,\n      filepath: \"\",\n    },\n  });\n\n  return (\n    <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n      <div className=\"mx-auto max-w-3xl\">\n        <div className=\"space-y-10 divide-y divide-gray-900/10\">\n          <div className=\"grid grid-cols-1 gap-x-8 gap-y-8 md:grid-cols-3\">\n            <div className=\"px-4 sm:px-0\">\n              <h2 className=\"text-base font-semibold leading-7\">New Connection</h2>\n              <p className=\"mt-1 text-sm leading-6 text-muted-foreground\">\n                Add a new database connection to your organization.\n              </p>\n            </div>\n\n            <div className=\"bg-card shadow-sm ring-1 ring-gray-900/5 rounded-md px-4 py-6 sm:p-8 md:col-span-2\">\n              {actionData?.errors?.formErrors && (\n                <div className=\"mb-6 rounded-md bg-destructive/15 p-4\">\n                  <div className=\"text-sm text-destructive\">\n                    {actionData.errors.formErrors.join(\", \")}\n                  </div>\n                </div>\n              )}\n\n              <Form method=\"post\" onSubmit={form.handleSubmit((data) => {})}>\n                <ShadForm {...form}>\n                  <div className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Connection Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"type\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Database Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a database type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"POSTGRES\">PostgreSQL</SelectItem>\n                              <SelectItem value=\"MYSQL\">MySQL</SelectItem>\n                              <SelectItem value=\"SQLITE\">SQLite</SelectItem>\n                              <SelectItem value=\"MSSQL\">Microsoft SQL Server</SelectItem>\n                              <SelectItem value=\"ORACLE\">Oracle</SelectItem>\n                              <SelectItem value=\"MONGODB\">MongoDB</SelectItem>\n                              <SelectItem value=\"REDIS\">Redis</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 gap-x-6 gap-y-6 sm:grid-cols-6\">\n                      <div className=\"sm:col-span-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"host\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Host</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"sm:col-span-2\">\n                        <FormField\n                          control={form.control}\n                          name=\"port\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Port</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"number\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"database\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Database Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"password\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"ssl\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel>Use SSL</FormLabel>\n                            <FormDescription>\n                              Enable SSL/TLS for secure connection\n                            </FormDescription>\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"filepath\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>File Path</FormLabel>\n                          <FormControl>\n                            <Input {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end gap-x-4\">\n                      <Button\n                        type=\"submit\"\n                        name=\"intent\"\n                        value=\"test\"\n                        disabled={isSubmitting}\n                        variant=\"outline\"\n                      >\n                        {isTesting ? \"Testing...\" : \"Test Connection\"}\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                      >\n                        {isSubmitting && !isTesting ? \"Creating...\" : \"Create Connection\"}\n                      </Button>\n                    </div>\n                  </div>\n                </ShadForm>\n              </Form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n", "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\nimport { cn } from \"../../utils/cn\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Outlet } from \"@remix-run/react\";\nimport { requireUser } from \"../lib/auth/session.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  // This ensures all organization routes are protected\n  await requireUser(request);\n  return json({});\n}\n\nexport default function OrganizationsLayout() {\n  return (\n    <div className=\"min-h-screen bg-light-bg-primary dark:bg-dark-bg-primary\">\n      <Outlet />\n    </div>\n  );\n}\n", "import { json } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\";\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  return json({});\n}\n\nexport default function Index() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-semibold\">Welcome to Data Studio</h1>\n      </div>\n      \n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n        <Link\n          to=\"/query\"\n          className=\"group relative rounded-lg border border-light-border dark:border-dark-border bg-light-bg-primary dark:bg-dark-bg-secondary p-6 shadow-sm hover:shadow-md transition-shadow\"\n        >\n          <h3 className=\"text-base font-semibold leading-7\">Run SQL Query</h3>\n          <p className=\"mt-2 text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n            Write and execute SQL queries with syntax highlighting and autocompletion\n          </p>\n        </Link>\n\n        <Link\n          to=\"/schema\"\n          className=\"group relative rounded-lg border border-light-border dark:border-dark-border bg-light-bg-primary dark:bg-dark-bg-secondary p-6 shadow-sm hover:shadow-md transition-shadow\"\n        >\n          <h3 className=\"text-base font-semibold leading-7\">Database Schema</h3>\n          <p className=\"mt-2 text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n            View and manage your database schema, tables, and relationships\n          </p>\n        </Link>\n\n        <Link\n          to=\"/connections\"\n          className=\"group relative rounded-lg border border-light-border dark:border-dark-border bg-light-bg-primary dark:bg-dark-bg-secondary p-6 shadow-sm hover:shadow-md transition-shadow\"\n        >\n          <h3 className=\"text-base font-semibold leading-7\">Connections</h3>\n          <p className=\"mt-2 text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n            Manage your database connections and credentials\n          </p>\n        </Link>\n      </div>\n    </div>\n  );\n}\n", "import { json, redirect, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\nimport { requireUserId } from \"../lib/auth/session.server\";\nimport { updateUser } from \"../lib/auth/auth.server\";\nimport { z } from \"zod\";\n\nconst UpdateProfileSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n  email: z.string().email(\"Invalid email address\").min(1, \"Email is required\"),\n  currentPassword: z.string().optional(),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\").optional(),\n  confirmPassword: z.string().optional(),\n}).refine((data) => {\n  if (data.newPassword && !data.currentPassword) {\n    return false;\n  }\n  if (data.newPassword && data.newPassword !== data.confirmPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"New password and confirm password must match\",\n  path: [\"confirmPassword\"],\n});\n\ninterface ActionData {\n  errors?: {\n    formErrors?: string[];\n    fieldErrors?: {\n      name?: string[];\n      email?: string[];\n      currentPassword?: string[];\n      newPassword?: string[];\n      confirmPassword?: string[];\n    };\n  };\n  success?: boolean;\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await requireUserId(request);\n  return json({ user });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUserId(request);\n  const formData = await request.formData();\n  const name = formData.get(\"name\");\n  const email = formData.get(\"email\");\n  const currentPassword = formData.get(\"currentPassword\");\n  const newPassword = formData.get(\"newPassword\");\n  const confirmPassword = formData.get(\"confirmPassword\");\n\n  const result = UpdateProfileSchema.safeParse({\n    name,\n    email,\n    currentPassword,\n    newPassword,\n    confirmPassword,\n  });\n\n  if (!result.success) {\n    return json<ActionData>(\n      { errors: result.error.flatten() },\n      { status: 400 }\n    );\n  }\n\n  try {\n    await updateUser(user.id, {\n      name: result.data.name,\n      email: result.data.email,\n      password: result.data.newPassword,\n      currentPassword: result.data.currentPassword,\n    });\n\n    return json<ActionData>({ success: true });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json<ActionData>(\n        { errors: { formErrors: [error.message] } },\n        { status: 400 }\n      );\n    }\n    return json<ActionData>(\n      { errors: { formErrors: [\"An unexpected error occurred\"] } },\n      { status: 500 }\n    );\n  }\n}\n\nexport default function ProfilePage() {\n  const { user } = useLoaderData<typeof loader>();\n  const actionData = useActionData<ActionData>();\n\n  return (\n    <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n      <div className=\"mx-auto max-w-3xl\">\n        <div className=\"space-y-10 divide-y divide-gray-900/10\">\n          <div className=\"grid grid-cols-1 gap-x-8 gap-y-8 pt-10 md:grid-cols-3\">\n            <div className=\"px-4 sm:px-0\">\n              <h2 className=\"text-base font-semibold leading-7 text-gray-900 dark:text-white\">Profile</h2>\n              <p className=\"mt-1 text-sm leading-6 text-gray-600 dark:text-gray-400\">\n                Update your personal information and password.\n              </p>\n            </div>\n\n            <Form method=\"post\" className=\"bg-white dark:bg-gray-800 shadow-sm ring-1 ring-gray-900/5 rounded-md px-4 py-6 sm:p-8 md:col-span-2\">\n              <div className=\"grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                <div className=\"col-span-full\">\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium leading-6 text-gray-900 dark:text-white\">\n                    Name\n                  </label>\n                  <div className=\"mt-2\">\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      id=\"name\"\n                      defaultValue={user.name}\n                      className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 dark:bg-gray-900 sm:text-sm sm:leading-6\"\n                      aria-invalid={Boolean(actionData?.errors?.fieldErrors?.name)}\n                      aria-describedby={actionData?.errors?.fieldErrors?.name ? \"name-error\" : undefined}\n                    />\n                  </div>\n                  {actionData?.errors?.fieldErrors?.name && (\n                    <div className=\"mt-2 text-sm text-red-600\" id=\"name-error\">\n                      {actionData.errors.fieldErrors.name.join(\", \")}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"col-span-full\">\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium leading-6 text-gray-900 dark:text-white\">\n                    Email address\n                  </label>\n                  <div className=\"mt-2\">\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      id=\"email\"\n                      defaultValue={user.email}\n                      className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 dark:bg-gray-900 sm:text-sm sm:leading-6\"\n                      aria-invalid={Boolean(actionData?.errors?.fieldErrors?.email)}\n                      aria-describedby={actionData?.errors?.fieldErrors?.email ? \"email-error\" : undefined}\n                    />\n                  </div>\n                  {actionData?.errors?.fieldErrors?.email && (\n                    <div className=\"mt-2 text-sm text-red-600\" id=\"email-error\">\n                      {actionData.errors.fieldErrors.email.join(\", \")}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"col-span-full\">\n                  <label htmlFor=\"currentPassword\" className=\"block text-sm font-medium leading-6 text-gray-900 dark:text-white\">\n                    Current password\n                  </label>\n                  <div className=\"mt-2\">\n                    <input\n                      type=\"password\"\n                      name=\"currentPassword\"\n                      id=\"currentPassword\"\n                      className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 dark:bg-gray-900 sm:text-sm sm:leading-6\"\n                      aria-invalid={Boolean(actionData?.errors?.fieldErrors?.currentPassword)}\n                      aria-describedby={actionData?.errors?.fieldErrors?.currentPassword ? \"current-password-error\" : undefined}\n                    />\n                  </div>\n                  {actionData?.errors?.fieldErrors?.currentPassword && (\n                    <div className=\"mt-2 text-sm text-red-600\" id=\"current-password-error\">\n                      {actionData.errors.fieldErrors.currentPassword.join(\", \")}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"col-span-full\">\n                  <label htmlFor=\"newPassword\" className=\"block text-sm font-medium leading-6 text-gray-900 dark:text-white\">\n                    New password\n                  </label>\n                  <div className=\"mt-2\">\n                    <input\n                      type=\"password\"\n                      name=\"newPassword\"\n                      id=\"newPassword\"\n                      className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 dark:bg-gray-900 sm:text-sm sm:leading-6\"\n                      aria-invalid={Boolean(actionData?.errors?.fieldErrors?.newPassword)}\n                      aria-describedby={actionData?.errors?.fieldErrors?.newPassword ? \"new-password-error\" : undefined}\n                    />\n                  </div>\n                  {actionData?.errors?.fieldErrors?.newPassword && (\n                    <div className=\"mt-2 text-sm text-red-600\" id=\"new-password-error\">\n                      {actionData.errors.fieldErrors.newPassword.join(\", \")}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"col-span-full\">\n                  <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium leading-6 text-gray-900 dark:text-white\">\n                    Confirm new password\n                  </label>\n                  <div className=\"mt-2\">\n                    <input\n                      type=\"password\"\n                      name=\"confirmPassword\"\n                      id=\"confirmPassword\"\n                      className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 dark:text-white shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-600 dark:bg-gray-900 sm:text-sm sm:leading-6\"\n                      aria-invalid={Boolean(actionData?.errors?.fieldErrors?.confirmPassword)}\n                      aria-describedby={actionData?.errors?.fieldErrors?.confirmPassword ? \"confirm-password-error\" : undefined}\n                    />\n                  </div>\n                  {actionData?.errors?.fieldErrors?.confirmPassword && (\n                    <div className=\"mt-2 text-sm text-red-600\" id=\"confirm-password-error\">\n                      {actionData.errors.fieldErrors.confirmPassword.join(\", \")}\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {actionData?.errors?.formErrors && (\n                <div className=\"mt-6 text-sm text-red-600\">\n                  {actionData.errors.formErrors.join(\", \")}\n                </div>\n              )}\n\n              {actionData?.success && (\n                <div className=\"mt-6 text-sm text-green-600\">\n                  Profile updated successfully\n                </div>\n              )}\n\n              <div className=\"mt-8 flex\">\n                <button\n                  type=\"submit\"\n                  className=\"rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600\"\n                >\n                  Save changes\n                </button>\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import bcrypt from 'bcrypt';\nimport { db } from '../db/db.server';\nimport { users } from '../db/schema';\nimport { eq } from 'drizzle-orm';\nimport { createUserSession } from './session.server';\n\nconst SALT_ROUNDS = 10;\n\ninterface LoginForm {\n  email: string;\n  password: string;\n  redirectTo: string;\n}\n\ninterface RegisterForm extends LoginForm {\n  name: string;\n}\n\ninterface UpdateUserInput {\n  email?: string;\n  name?: string;\n  password?: string;\n  currentPassword?: string;\n}\n\nexport async function register(request: Request, formData: FormData) {\n  const email = formData.get('email')?.toString();\n  const password = formData.get('password')?.toString();\n  const name = formData.get('name')?.toString();\n  const redirectTo = formData.get('redirectTo')?.toString() || '/dashboard';\n\n  if (!email || !password || !name) {\n    return {\n      errors: {\n        email: !email ? 'Email is required' : null,\n        password: !password ? 'Password is required' : null,\n        name: !name ? 'Name is required' : null,\n      },\n    };\n  }\n\n  const existingUser = await db.query.users.findFirst({\n    where: eq(users.email, email),\n  });\n\n  if (existingUser) {\n    return {\n      errors: {\n        email: 'A user already exists with this email',\n      },\n    };\n  }\n\n  const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);\n\n  const [user] = await db.insert(users).values({\n    email,\n    name,\n    hashedPassword,\n  }).returning();\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo,\n  });\n}\n\nexport async function login(request: Request, formData: FormData) {\n  console.log('Starting login process');\n  const email = formData.get('email')?.toString();\n  const password = formData.get('password')?.toString();\n  const redirectTo = formData.get('redirectTo')?.toString() || '/dashboard';\n  const remember = formData.get('remember') === 'on';\n\n  console.log('Login parameters:', { email, redirectTo, remember });\n\n  if (!email || !password) {\n    console.log('Missing required fields');\n    return {\n      errors: {\n        email: !email ? 'Email is required' : null,\n        password: !password ? 'Password is required' : null,\n      },\n    };\n  }\n\n  const user = await db.query.users.findFirst({\n    where: eq(users.email, email),\n  });\n\n  if (!user) {\n    console.log('User not found');\n    return {\n      errors: {\n        email: 'Invalid email or password',\n      },\n    };\n  }\n\n  const isValidPassword = await bcrypt.compare(password, user.hashedPassword);\n\n  if (!isValidPassword) {\n    console.log('Invalid password');\n    return {\n      errors: {\n        email: 'Invalid email or password',\n      },\n    };\n  }\n\n  console.log('Login successful, creating session');\n  const sessionResponse = await createUserSession({\n    request,\n    userId: user.id,\n    remember,\n    redirectTo,\n  });\n  console.log('Session created, returning response');\n  return sessionResponse;\n}\n\nexport async function changePassword(userId: string, currentPassword: string, newPassword: string) {\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId),\n  });\n\n  if (!user) {\n    return {\n      error: 'User not found',\n    };\n  }\n\n  const isValidPassword = await bcrypt.compare(currentPassword, user.hashedPassword);\n  if (!isValidPassword) {\n    return {\n      error: 'Invalid current password',\n    };\n  }\n\n  const hashedPassword = await bcrypt.hash(newPassword, SALT_ROUNDS);\n\n  await db.update(users)\n    .set({ hashedPassword })\n    .where(eq(users.id, userId));\n\n  return { success: true };\n}\n\nexport async function updateUser(userId: string, input: UpdateUserInput) {\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId),\n  });\n\n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n\n  const updates: Partial<typeof user> = {\n    updatedAt: new Date(),\n  };\n\n  if (input.email) {\n    // Check if email is already taken by another user\n    const existingUser = await db.query.users.findFirst({\n      where: eq(users.email, input.email),\n    });\n\n    if (existingUser && existingUser.id !== userId) {\n      throw new Error(\"Email is already taken\");\n    }\n    updates.email = input.email;\n  }\n\n  if (input.name) {\n    updates.name = input.name;\n  }\n\n  if (input.password) {\n    if (!input.currentPassword) {\n      throw new Error(\"Current password is required to change password\");\n    }\n\n    const isValid = await bcrypt.compare(input.currentPassword, user.hashedPassword);\n    if (!isValid) {\n      throw new Error(\"Current password is incorrect\");\n    }\n\n    updates.hashedPassword = await bcrypt.hash(input.password, SALT_ROUNDS);\n  }\n\n  const [updatedUser] = await db.update(users)\n    .set(updates)\n    .where(eq(users.id, userId))\n    .returning();\n\n  return updatedUser;\n}\n", "import { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { SchemaVisualization } from '../components/SchemaVisualization';\nimport { useSchemaData } from '../hooks/useSchemaData';\nimport { requireUser } from '../lib/auth/session.server';\nimport { fetchSchema } from '../utils/api.server';\nimport { PageContainer } from '../components/PageContainer';\nimport type { TableSchema } from '../types/schema';\n\nexport async function loader({ request }: { request: Request }) {\n  await requireUser(request);\n  const schema = await fetchSchema();\n  return json({ rawSchema: schema });\n}\n\nexport default function SchemaPage() {\n  const { rawSchema } = useLoaderData<typeof loader>();\n  const processedSchema = useSchemaData(rawSchema as unknown as TableSchema[]);\n  \n  // Extract relationships from foreign keys\n  const relationships = processedSchema.tables.flatMap(table => \n    table.columns\n      .filter(column => column.isForeignKey && column.references)\n      .map(column => ({\n        sourceTable: table.name,\n        sourceColumn: column.name,\n        targetTable: column.references!.table,\n        targetColumn: column.references!.column,\n        type: 'one-to-many' as const // Default to one-to-many relationship\n      }))\n  );\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3\">\n        <h1 className=\"text-xl font-semibold text-light-text-primary dark:text-dark-text-primary\">\n          Database Schema\n        </h1>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4\">\n        <SchemaVisualization\n          schema={{\n            tables: processedSchema.tables,\n            relationships\n          }}\n          className=\"h-full\"\n          onNodeClick={(node) => {\n            console.log('Node clicked:', node);\n          }}\n          onEdgeClick={(edge) => {\n            console.log('Edge clicked:', edge);\n          }}\n        />\n      </div>\n    </PageContainer>\n  );\n}\n", "import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  ReactFlow,\n  Background,\n  Controls,\n  MiniMap,\n  useReactFlow,\n  NodeMouseHandler,\n  EdgeMouseHandler,\n  XYPosition,\n  NodeTypes,\n  Edge,\n  Node,\n} from '@xyflow/react';\nimport type { ProcessedSchemaTable, SchemaVisualizationProps, TableNode as TableNodeType } from '../../types/schema';\nimport { TableNode as CustomTableNode } from './TableNode';\nimport { SchemaControls } from './SchemaControls';\nimport { useSchemaLayout } from '../../hooks/useSchemaLayout';\nimport {\n  calculateDetailedNodeStatistics,\n  calculateForceDirectedLayout,\n  calculateCircularLayout,\n  calculateTreeLayout,\n  type LayoutType,\n} from '../../utils/schemaLayout';\nimport { cn } from '../../utils/cn';\n\nconst nodeTypes: NodeTypes = {\n  table: CustomTableNode,\n} as const;\n\ninterface TableNodeData {\n  id: string;\n  label: string;\n  columns: ProcessedSchemaTable['columns'];\n  [x: string]: unknown;\n}\n\ntype CustomNode = Node<TableNodeData>;\ntype CustomEdge = Edge<{\n  sourceColumn: string;\n  targetColumn: string;\n  relationType: 'one-to-one' | 'one-to-many' | 'many-to-many';\n}>;\n\nexport function SchemaVisualization({\n  schema,\n  onNodeClick,\n  onEdgeClick,\n  className,\n}: SchemaVisualizationProps) {\n  const flowWrapper = useRef<HTMLDivElement>(null);\n  const [selectedNode, setSelectedNode] = useState<CustomNode | null>(null);\n  const [searchResults, setSearchResults] = useState<string[]>([]);\n  const { fitView, setViewport } = useReactFlow();\n\n  const initialNodes: CustomNode[] = useMemo(\n    () =>\n      schema.tables.map((table, index) => ({\n        id: table.name,\n        type: 'table' as const,\n        position: { x: index * 300, y: index * 100 } satisfies XYPosition,\n        data: {\n          id: table.name,\n          label: table.name,\n          columns: table.columns,\n        },\n      })),\n    [schema.tables],\n  );\n\n  const initialEdges = useMemo(\n    () =>\n      schema.relationships.map((rel) => ({\n        id: `${rel.sourceTable}-${rel.sourceColumn}-${rel.targetTable}-${rel.targetColumn}`,\n        source: rel.sourceTable,\n        target: rel.targetTable,\n        type: 'smoothstep',\n        animated: true,\n        data: {\n          sourceTable: rel.sourceTable,\n          sourceColumn: rel.sourceColumn,\n          targetTable: rel.targetTable,\n          targetColumn: rel.targetColumn,\n          type: rel.type,\n        },\n        label: `${rel.sourceColumn} \u2192 ${rel.targetColumn}`,\n        labelStyle: { fill: 'var(--text-secondary)' },\n        style: { stroke: 'var(--primary-500)' },\n      })) as unknown as CustomEdge[],\n    [schema.relationships],\n  );\n\n  const {\n    nodes,\n    edges,\n    selectedLayout,\n    highlightedNodes,\n    applyLayout,\n    highlightRelatedNodes,\n    onNodeDragStop,\n    resetLayout,\n  } = useSchemaLayout({\n    initialNodes,\n    initialEdges,\n  });\n\n  const handleLayoutChange = useCallback((type: LayoutType) => {\n    let layoutedNodes;\n    switch (type) {\n      case 'force':\n        layoutedNodes = calculateForceDirectedLayout(nodes, edges);\n        break;\n      case 'circular':\n        layoutedNodes = calculateCircularLayout(nodes, edges);\n        break;\n      case 'horizontal':\n        layoutedNodes = calculateTreeLayout(nodes, edges, { rankdir: 'LR' });\n        break;\n      case 'vertical':\n        layoutedNodes = calculateTreeLayout(nodes, edges, { rankdir: 'TB' });\n        break;\n      default:\n        layoutedNodes = nodes;\n    }\n    applyLayout(type, layoutedNodes);\n    setTimeout(() => fitView({ padding: 0.2 }), 0);\n  }, [nodes, edges, applyLayout, fitView]);\n\n  const handleSearch = useCallback((query: string) => {\n    if (!query.trim()) {\n      setSearchResults([]);\n      return;\n    }\n\n    const lowerQuery = query.toLowerCase();\n    const matches = schema.tables\n      .filter(\n        (table) =>\n          table.name.toLowerCase().includes(lowerQuery) ||\n          table.columns.some((col) =>\n            col.name.toLowerCase().includes(lowerQuery) ||\n            col.type.toLowerCase().includes(lowerQuery)\n          )\n      )\n      .map((table) => table.name);\n\n    setSearchResults(matches);\n    highlightRelatedNodes(matches);\n\n    if (matches.length === 1) {\n      const node = nodes.find((n) => n.id === matches[0]);\n      if (node) {\n        setViewport({\n          x: -node.position.x + window.innerWidth / 2,\n          y: -node.position.y + window.innerHeight / 2,\n          zoom: 1.5,\n        });\n      }\n    }\n  }, [schema.tables, nodes, highlightRelatedNodes, setViewport]);\n\n  const handleExport = useCallback(() => {\n    if (!flowWrapper.current) return;\n\n    const dataUrl = flowWrapper.current.querySelector('svg')?.outerHTML;\n    if (!dataUrl) return;\n\n    const blob = new Blob([dataUrl], { type: 'image/svg+xml;charset=utf-8' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'schema.svg';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }, []);\n\n  const handleNodeClick: NodeMouseHandler = useCallback(\n    (_, node) => {\n      setSelectedNode(node as CustomNode);\n      const stats = calculateDetailedNodeStatistics(\n        node as CustomNode,\n        edges,\n        nodes\n      );\n      onNodeClick?.(node as CustomNode);\n      console.log('Node statistics:', stats);\n    },\n    [edges, nodes, onNodeClick],\n  );\n\n  const handleNodeMouseEnter: NodeMouseHandler = useCallback(\n    (_, node) => {\n      highlightRelatedNodes([node.id]);\n    },\n    [highlightRelatedNodes],\n  );\n\n  const handleNodeMouseLeave = useCallback(\n    () => {\n      if (!searchResults.length) {\n        highlightRelatedNodes(null);\n      }\n    },\n    [searchResults.length, highlightRelatedNodes],\n  );\n\n  const handleEdgeClick: EdgeMouseHandler = useCallback(\n    (_, edge) => {\n      onEdgeClick?.(edge as CustomEdge);\n    },\n    [onEdgeClick],\n  );\n\n  const handleNodeDragStop: NodeMouseHandler = useCallback(\n    (_, node) => {\n      onNodeDragStop(node as CustomNode, nodes);\n    },\n    [nodes, onNodeDragStop],\n  );\n\n  // Reset search results when layout changes\n  useEffect(() => {\n    setSearchResults([]);\n  }, [selectedLayout]);\n\n  return (\n    <div ref={flowWrapper} className={cn('w-full h-full min-h-[600px] relative', className)}>\n      <SchemaControls\n        selectedLayout={selectedLayout}\n        onLayoutChange={handleLayoutChange}\n        onReset={resetLayout}\n        onSearch={handleSearch}\n        onExport={handleExport}\n        statistics={selectedNode ? calculateDetailedNodeStatistics(\n          selectedNode,\n          edges,\n          nodes\n        ) : undefined}\n      />\n      \n      <ReactFlow\n        nodes={nodes.map((node) => ({\n          ...node,\n          className: highlightedNodes.size === 0 || highlightedNodes.has(node.id)\n            ? ''\n            : 'opacity-30',\n        }))}\n        edges={edges.map((edge) => ({\n          ...edge,\n          className: highlightedNodes.size === 0 ||\n            (highlightedNodes.has(edge.source) && highlightedNodes.has(edge.target))\n            ? ''\n            : 'opacity-30',\n        }))}\n        onNodeClick={handleNodeClick}\n        onNodeMouseEnter={handleNodeMouseEnter}\n        onNodeMouseLeave={handleNodeMouseLeave}\n        onNodeDragStop={handleNodeDragStop}\n        onEdgeClick={handleEdgeClick}\n        nodeTypes={nodeTypes}\n        fitView\n        attributionPosition=\"bottom-right\"\n      >\n        <Background />\n        <Controls />\n        <MiniMap\n          nodeStrokeColor=\"var(--border-primary)\"\n          nodeColor=\"var(--bg-secondary)\"\n          nodeBorderRadius={4}\n        />\n      </ReactFlow>\n    </div>\n  );\n}\n", "import { Handle, Position } from '@xyflow/react';\nimport type { ProcessedSchemaTable } from '../../types/schema';\nimport { cn } from '../../utils/cn';\n\ninterface TableNodeProps {\n  data: {\n    label: string;\n    columns: ProcessedSchemaTable['columns'];\n  };\n  selected?: boolean;\n}\n\nexport function TableNode({ data, selected }: TableNodeProps) {\n  return (\n    <div\n      className={cn(\n        'min-w-[200px] bg-light-bg-primary dark:bg-dark-bg-primary rounded-lg shadow-md border',\n        selected\n          ? 'border-primary-500 dark:border-primary-400'\n          : 'border-light-border dark:border-dark-border',\n      )}\n    >\n      <Handle type=\"target\" position={Position.Left} className=\"!bg-primary-500\" />\n      <Handle type=\"source\" position={Position.Right} className=\"!bg-primary-500\" />\n\n      <div className=\"px-4 py-2 border-b border-light-border dark:border-dark-border bg-light-bg-secondary dark:bg-dark-bg-secondary rounded-t-lg\">\n        <h3 className=\"font-medium text-light-text-primary dark:text-dark-text-primary\">\n          {data.label}\n        </h3>\n      </div>\n\n      <div className=\"p-2\">\n        {data.columns.map((column) => (\n          <div\n            key={column.name}\n            className=\"flex items-center px-2 py-1 text-sm rounded hover:bg-light-bg-secondary dark:hover:bg-dark-bg-secondary\"\n          >\n            <div className=\"flex-1 flex items-center space-x-2\">\n              <span className=\"text-light-text-primary dark:text-dark-text-primary\">\n                {column.name}\n              </span>\n              {column.isPrimaryKey && (\n                <span className=\"text-xs px-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 rounded\">\n                  PK\n                </span>\n              )}\n              {column.isForeignKey && (\n                <span className=\"text-xs px-1 bg-secondary-100 dark:bg-secondary-900 text-secondary-700 dark:text-secondary-300 rounded\">\n                  FK\n                </span>\n              )}\n            </div>\n            <span className=\"text-light-text-secondary dark:text-dark-text-secondary ml-2\">\n              {column.type}\n            </span>\n            {!column.nullable && (\n              <span className=\"ml-1 text-light-text-tertiary dark:text-dark-text-tertiary\">*</span>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n", "import { useCallback, useState } from 'react';\nimport { Panel } from '@reactflow/core';\nimport { Button } from '../../components/Button';\nimport type { LayoutType } from '../../utils/schemaLayout';\nimport type { NodeStatistics } from '../../utils/schemaLayout';\nimport { cn } from '../../utils/cn';\n\ninterface SchemaControlsProps {\n  selectedLayout: LayoutType;\n  onLayoutChange: (type: LayoutType) => void;\n  onReset: () => void;\n  onSearch: (query: string) => void;\n  onExport: () => void;\n  statistics?: NodeStatistics;\n  className?: string;\n}\n\nexport function SchemaControls({\n  selectedLayout,\n  onLayoutChange,\n  onReset,\n  onSearch,\n  onExport,\n  statistics,\n  className,\n}: SchemaControlsProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showStats, setShowStats] = useState(false);\n\n  const handleSearch = useCallback(() => {\n    onSearch(searchQuery);\n  }, [searchQuery, onSearch]);\n\n  const renderStatistics = () => {\n    if (!statistics) return null;\n\n    return (\n      <div className=\"mt-4 p-4 bg-light-bg-secondary dark:bg-dark-bg-secondary rounded-lg\">\n        <h3 className=\"text-sm font-medium text-light-text-primary dark:text-dark-text-primary mb-2\">\n          Table Statistics\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {/* Basic Info */}\n          <div>\n            <h4 className=\"text-xs font-medium text-light-text-secondary dark:text-dark-text-secondary mb-1\">\n              Basic Information\n            </h4>\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div>Columns: {statistics.basic.totalColumns}</div>\n              <div>Primary Keys: {statistics.basic.primaryKeyCount}</div>\n              <div>Foreign Keys: {statistics.basic.foreignKeyCount}</div>\n              <div>Nullable: {statistics.basic.nullableColumns}</div>\n              <div>Unique: {statistics.basic.uniqueConstraints}</div>\n              <div>Indexes: {statistics.basic.indexCount}</div>\n            </div>\n          </div>\n\n          {/* Relationships */}\n          <div>\n            <h4 className=\"text-xs font-medium text-light-text-secondary dark:text-dark-text-secondary mb-1\">\n              Relationships\n            </h4>\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div>Incoming: {statistics.relationships.incomingCount}</div>\n              <div>Outgoing: {statistics.relationships.outgoingCount}</div>\n              <div>Total Related: {statistics.relationships.totalRelated}</div>\n              <div>One-to-One: {statistics.relationships.relationshipTypes['one-to-one']}</div>\n              <div>One-to-Many: {statistics.relationships.relationshipTypes['one-to-many']}</div>\n              <div>Many-to-Many: {statistics.relationships.relationshipTypes['many-to-many']}</div>\n            </div>\n          </div>\n\n          {/* Complexity Scores */}\n          <div>\n            <h4 className=\"text-xs font-medium text-light-text-secondary dark:text-dark-text-secondary mb-1\">\n              Complexity Metrics\n            </h4>\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center\">\n                <span className=\"text-xs flex-1\">Relationship Complexity</span>\n                <div className=\"w-24 h-2 bg-light-bg-tertiary dark:bg-dark-bg-tertiary rounded-full overflow-hidden\">\n                  <div\n                    className=\"h-full bg-primary-500\"\n                    style={{ width: `${statistics.complexity.relationshipComplexity * 100}%` }}\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center\">\n                <span className=\"text-xs flex-1\">Schema Complexity</span>\n                <div className=\"w-24 h-2 bg-light-bg-tertiary dark:bg-dark-bg-tertiary rounded-full overflow-hidden\">\n                  <div\n                    className=\"h-full bg-primary-500\"\n                    style={{ width: `${statistics.complexity.schemaComplexity * 100}%` }}\n                  />\n                </div>\n              </div>\n              <div className=\"flex items-center\">\n                <span className=\"text-xs flex-1\">Centrality Score</span>\n                <div className=\"w-24 h-2 bg-light-bg-tertiary dark:bg-dark-bg-tertiary rounded-full overflow-hidden\">\n                  <div\n                    className=\"h-full bg-primary-500\"\n                    style={{ width: `${statistics.complexity.centralityScore * 100}%` }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Panel position=\"top-right\" className={cn('p-4 max-w-md', className)}>\n      <div className=\"space-y-4\">\n        {/* Layout Controls */}\n        <div className=\"flex items-center space-x-2\">\n          <select\n            value={selectedLayout}\n            onChange={(e) => onLayoutChange(e.target.value as LayoutType)}\n            className=\"flex-1 px-3 py-1.5 text-sm bg-light-bg-secondary dark:bg-dark-bg-secondary text-light-text-primary dark:text-dark-text-primary border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n          >\n            <option value=\"auto\">Auto Layout</option>\n            <option value=\"horizontal\">Horizontal Tree</option>\n            <option value=\"vertical\">Vertical Tree</option>\n            <option value=\"circular\">Circular</option>\n            <option value=\"force\">Force-Directed</option>\n            <option value=\"custom\">Custom</option>\n          </select>\n\n          <Button variant=\"secondary\" size=\"sm\" onClick={onReset}>\n            Reset\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"flex items-center space-x-2\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search tables and columns...\"\n            className=\"flex-1 px-3 py-1.5 text-sm bg-light-bg-secondary dark:bg-dark-bg-secondary text-light-text-primary dark:text-dark-text-primary border border-light-border dark:border-dark-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\n          />\n          <Button variant=\"primary\" size=\"sm\" onClick={handleSearch}>\n            Search\n          </Button>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => setShowStats(!showStats)}\n            className=\"flex-1\"\n          >\n            {showStats ? 'Hide Statistics' : 'Show Statistics'}\n          </Button>\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={onExport}\n            className=\"flex-1\"\n          >\n            Export Schema\n          </Button>\n        </div>\n\n        {/* Statistics Panel */}\n        {showStats && renderStatistics()}\n      </div>\n    </Panel>\n  );\n}\n", "import { forwardRef } from \"react\";\nimport { cn } from \"../utils/cn\";\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\" | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"primary\", size = \"md\", ...props }, ref) => {\n    return (\n      <button\n        ref={ref}\n        className={cn(\n          \"inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900 disabled:opacity-50 disabled:pointer-events-none\",\n          {\n            \"bg-blue-600 text-white hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\":\n              variant === \"primary\",\n            \"bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700\":\n              variant === \"secondary\",\n            \"bg-red-600 text-white hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-600\":\n              variant === \"danger\",\n          },\n          {\n            \"text-sm px-3 py-1.5\": size === \"sm\",\n            \"text-sm px-4 py-2\": size === \"md\",\n            \"text-base px-6 py-3\": size === \"lg\",\n          },\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n", "import { useCallback, useEffect, useState } from 'react';\nimport type { Node } from '@xyflow/react';\nimport type { ProcessedSchemaTable, RelationshipEdge, SchemaLayout } from '../types/schema';\nimport { findRelatedNodes, type LayoutType } from '../utils/schemaLayout';\n\nconst LAYOUT_STORAGE_KEY = 'schema-layout';\n\ninterface UseSchemaLayoutOptions {\n  initialNodes: Node<{ label: string; columns: ProcessedSchemaTable['columns'] }>[];\n  initialEdges: RelationshipEdge[];\n  onLayoutChange?: (layout: SchemaLayout) => void;\n}\n\nexport function useSchemaLayout({\n  initialNodes,\n  initialEdges,\n  onLayoutChange,\n}: UseSchemaLayoutOptions) {\n  const [nodes, setNodes] = useState<Node<{ label: string; columns: ProcessedSchemaTable['columns'] }>[]>(initialNodes);\n  const [edges, setEdges] = useState<RelationshipEdge[]>(initialEdges);\n  const [highlightedNodes, setHighlightedNodes] = useState<Set<string>>(new Set());\n  const [selectedLayout, setSelectedLayout] = useState<LayoutType>('auto');\n\n  // Load saved layout on mount\n  useEffect(() => {\n    try {\n      const savedLayout = localStorage.getItem(LAYOUT_STORAGE_KEY);\n      if (savedLayout) {\n        const { nodes: savedNodes } = JSON.parse(savedLayout);\n        // Merge saved positions with current nodes\n        setNodes((current) =>\n          current.map((node) => {\n            const savedNode = savedNodes.find((n: Node) => n.id === node.id);\n            return savedNode\n              ? { ...node, position: savedNode.position }\n              : node;\n          })\n        );\n      }\n    } catch (error) {\n      console.error('Error loading saved layout:', error);\n    }\n  }, []);\n\n  // Save layout when nodes change\n  useEffect(() => {\n    try {\n      const layoutToSave = {\n        nodes: nodes.map(({ id, position }) => ({ id, position })),\n        timestamp: new Date().toISOString(),\n      };\n      localStorage.setItem(LAYOUT_STORAGE_KEY, JSON.stringify(layoutToSave));\n    } catch (error) {\n      console.error('Error saving layout:', error);\n    }\n  }, [nodes]);\n\n  const applyLayout = useCallback(\n    (type: LayoutType, layoutedNodes: Node<{ label: string; columns: ProcessedSchemaTable['columns'] }>[]) => {\n      setSelectedLayout(type);\n      setNodes(layoutedNodes);\n      onLayoutChange?.({ nodes: layoutedNodes, edges });\n    },\n    [edges, onLayoutChange]\n  );\n\n  const highlightRelatedNodes = useCallback(\n    (nodeIds: string[] | null) => {\n      if (!nodeIds) {\n        setHighlightedNodes(new Set());\n        return;\n      }\n\n      const relatedNodes = new Set<string>();\n      nodeIds.forEach(id => {\n        const related = findRelatedNodes(id, edges);\n        related.forEach(nodeId => relatedNodes.add(nodeId));\n      });\n      setHighlightedNodes(relatedNodes);\n    },\n    [edges]\n  );\n\n  const onNodeDragStop = useCallback(\n    (event: React.MouseEvent, node: Node<{ label: string; columns: ProcessedSchemaTable['columns'] }>) => {\n      const updatedNodes = nodes.map((n) =>\n        n.id === node.id ? { ...n, position: node.position } : n\n      );\n      setNodes(updatedNodes);\n      onLayoutChange?.({ nodes: updatedNodes, edges });\n    },\n    [nodes, edges, onLayoutChange]\n  );\n\n  const resetLayout = useCallback(() => {\n    setNodes(initialNodes);\n    setSelectedLayout('auto');\n    onLayoutChange?.({ nodes: initialNodes, edges });\n  }, [initialNodes, edges, onLayoutChange]);\n\n  return {\n    nodes,\n    edges,\n    selectedLayout,\n    highlightedNodes,\n    applyLayout,\n    highlightRelatedNodes,\n    onNodeDragStop,\n    resetLayout,\n  };\n}\n", "import type { Node, Edge } from '@xyflow/react';\nimport type { TableNode, RelationshipEdge, TableColumn } from '../types/schema';\n\ninterface LayoutOptions {\n  nodeWidth?: number;\n  nodeHeight?: number;\n  rankdir?: 'TB' | 'LR';\n  ranksep?: number;\n  nodesep?: number;\n  radius?: number;\n  startAngle?: number;\n  endAngle?: number;\n}\n\ninterface TableNodeData {\n  label: string;\n  columns: TableColumn[];\n}\n\nexport type LayoutType = 'auto' | 'horizontal' | 'vertical' | 'circular' | 'tree' | 'force' | 'custom';\n\n// Force-directed layout\nexport function calculateForceDirectedLayout(\n  nodes: Node[],\n  edges: Edge[],\n  options: LayoutOptions = {}\n): Node[] {\n  const {\n    nodeWidth = 250,\n    nodeHeight = 200,\n    ranksep = 300,\n    nodesep = 150,\n  } = options;\n\n  // Simple force-directed layout implementation\n  const iterations = 100;\n  const k = Math.sqrt((1000 * 1000) / nodes.length);\n  const positions = new Map(nodes.map(node => [node.id, { ...node.position }]));\n  \n  for (let i = 0; i < iterations; i++) {\n    // Calculate repulsive forces\n    nodes.forEach(v => {\n      nodes.forEach(u => {\n        if (v.id !== u.id) {\n          const dx = positions.get(v.id)!.x - positions.get(u.id)!.x;\n          const dy = positions.get(v.id)!.y - positions.get(u.id)!.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance > 0) {\n            const force = k * k / distance;\n            positions.get(v.id)!.x += dx / distance * force;\n            positions.get(v.id)!.y += dy / distance * force;\n          }\n        }\n      });\n    });\n\n    // Calculate attractive forces\n    edges.forEach(edge => {\n      const source = positions.get(edge.source)!;\n      const target = positions.get(edge.target)!;\n      const dx = source.x - target.x;\n      const dy = source.y - target.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance > 0) {\n        const force = distance * distance / k;\n        const moveX = dx / distance * force;\n        const moveY = dy / distance * force;\n        positions.get(edge.source)!.x -= moveX;\n        positions.get(edge.source)!.y -= moveY;\n        positions.get(edge.target)!.x += moveX;\n        positions.get(edge.target)!.y += moveY;\n      }\n    });\n  }\n\n  return nodes.map(node => ({\n    ...node,\n    position: positions.get(node.id)!,\n  }));\n}\n\n// Circular layout\nexport function calculateCircularLayout(\n  nodes: Node[],\n  edges: Edge[],\n  options: LayoutOptions = {}\n): Node[] {\n  const {\n    radius = 500,\n    startAngle = 0,\n    endAngle = 2 * Math.PI,\n  } = options;\n\n  const angleStep = (endAngle - startAngle) / nodes.length;\n  \n  return nodes.map((node, index) => {\n    const angle = startAngle + index * angleStep;\n    return {\n      ...node,\n      position: {\n        x: radius * Math.cos(angle),\n        y: radius * Math.sin(angle),\n      },\n    };\n  });\n}\n\n// Tree layout\nexport function calculateTreeLayout(\n  nodes: Node[],\n  edges: Edge[],\n  options: LayoutOptions = {}\n): Node[] {\n  const {\n    nodeWidth = 250,\n    nodeHeight = 200,\n    rankdir = 'TB',\n    ranksep = 300,\n    nodesep = 150,\n  } = options;\n\n  // Find root nodes (nodes with no incoming edges)\n  const hasIncoming = new Set(edges.map(e => e.target));\n  const rootNodes = nodes.filter(n => !hasIncoming.has(n.id));\n\n  // Build adjacency list\n  const children = new Map<string, string[]>();\n  edges.forEach(edge => {\n    if (!children.has(edge.source)) {\n      children.set(edge.source, []);\n    }\n    children.get(edge.source)!.push(edge.target);\n  });\n\n  // Assign levels and positions\n  const positions = new Map<string, { x: number; y: number }>();\n  const assignPositions = (nodeId: string, level: number, order: number) => {\n    const x = rankdir === 'TB' ? order * (nodeWidth + nodesep) : level * (nodeWidth + ranksep);\n    const y = rankdir === 'TB' ? level * (nodeHeight + ranksep) : order * (nodeHeight + nodesep);\n    positions.set(nodeId, { x, y });\n\n    const nodeChildren = children.get(nodeId) || [];\n    nodeChildren.forEach((childId, index) => {\n      assignPositions(childId, level + 1, order + index);\n    });\n  };\n\n  rootNodes.forEach((node, index) => {\n    assignPositions(node.id, 0, index);\n  });\n\n  // Handle nodes not in the tree\n  const unpositioned = nodes.filter(n => !positions.has(n.id));\n  unpositioned.forEach((node, index) => {\n    positions.set(node.id, {\n      x: index * (nodeWidth + nodesep),\n      y: -1 * (nodeHeight + ranksep),\n    });\n  });\n\n  return nodes.map(node => ({\n    ...node,\n    position: positions.get(node.id)!,\n  }));\n}\n\n// Enhanced node statistics\nexport interface NodeStatistics {\n  basic: {\n    totalColumns: number;\n    primaryKeyCount: number;\n    foreignKeyCount: number;\n    nullableColumns: number;\n    uniqueConstraints: number;\n    indexCount: number;\n  };\n  relationships: {\n    incomingCount: number;\n    outgoingCount: number;\n    totalRelated: number;\n    directlyRelatedTables: string[];\n    relationshipTypes: {\n      'one-to-one': number;\n      'one-to-many': number;\n      'many-to-many': number;\n    };\n  };\n  columns: {\n    dataTypes: Record<string, number>;\n    nullablePercentage: number;\n    indexedPercentage: number;\n    averageNameLength: number;\n  };\n  complexity: {\n    relationshipComplexity: number; // 0-1 score based on relationship count and types\n    schemaComplexity: number; // 0-1 score based on columns, constraints, etc.\n    centralityScore: number; // 0-1 score based on how central this table is in the schema\n  };\n}\n\nexport function calculateDetailedNodeStatistics(\n  node: TableNode,\n  edges: Edge[],\n  allNodes: TableNode[]\n): NodeStatistics {\n  const incomingRelations = edges.filter(edge => edge.target === node.id) as RelationshipEdge[];\n  const outgoingRelations = edges.filter(edge => edge.source === node.id) as RelationshipEdge[];\n  const allRelations = [...incomingRelations, ...outgoingRelations];\n  \n  // Calculate data type distribution\n  const dataTypes = node.data.columns.reduce((acc, col) => {\n    acc[col.type] = (acc[col.type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  // Calculate relationship types\n  const relationshipTypes = allRelations.reduce(\n    (acc, rel) => {\n      acc[rel.data.relationType]++;\n      return acc;\n    },\n    { 'one-to-one': 0, 'one-to-many': 0, 'many-to-many': 0 } as Record<RelationshipEdge['data']['relationType'], number>\n  );\n\n  // Calculate complexity scores\n  const relationshipComplexity = Math.min(\n    1,\n    (allRelations.length / allNodes.length) +\n    (relationshipTypes['many-to-many'] * 0.2) +\n    (relationshipTypes['one-to-many'] * 0.1)\n  );\n\n  const schemaComplexity = Math.min(\n    1,\n    (node.data.columns.length / 50) + // Normalize by assuming 50 columns is complex\n    (node.data.columns.filter(c => c.isPrimaryKey).length * 0.1) +\n    (node.data.columns.filter(c => c.isForeignKey).length * 0.05)\n  );\n\n  // Calculate centrality score\n  const centralityScore = Math.min(\n    1,\n    allRelations.length / (2 * allNodes.length) // Normalize by maximum possible relations\n  );\n\n  return {\n    basic: {\n      totalColumns: node.data.columns.length,\n      primaryKeyCount: node.data.columns.filter(c => c.isPrimaryKey).length,\n      foreignKeyCount: node.data.columns.filter(c => c.isForeignKey).length,\n      nullableColumns: node.data.columns.filter(c => c.nullable).length,\n      uniqueConstraints: node.data.columns.filter(c => c.isPrimaryKey || c.isUnique).length,\n      indexCount: node.data.columns.filter(c => c.isIndexed).length,\n    },\n    relationships: {\n      incomingCount: incomingRelations.length,\n      outgoingCount: outgoingRelations.length,\n      totalRelated: new Set([\n        ...incomingRelations.map(r => r.source),\n        ...outgoingRelations.map(r => r.target),\n      ]).size,\n      directlyRelatedTables: [\n        ...new Set([\n          ...incomingRelations.map(r => r.source),\n          ...outgoingRelations.map(r => r.target),\n        ]),\n      ],\n      relationshipTypes,\n    },\n    columns: {\n      dataTypes,\n      nullablePercentage: (node.data.columns.filter(c => c.nullable).length / node.data.columns.length) * 100,\n      indexedPercentage: (node.data.columns.filter(c => c.isIndexed).length / node.data.columns.length) * 100,\n      averageNameLength: node.data.columns.reduce((sum, col) => sum + col.name.length, 0) / node.data.columns.length,\n    },\n    complexity: {\n      relationshipComplexity,\n      schemaComplexity,\n      centralityScore,\n    },\n  };\n}\n\n// Find all related nodes for highlighting\nexport function findRelatedNodes(\n  nodeId: string,\n  edges: Edge[]\n): Set<string> {\n  const related = new Set<string>([nodeId]);\n  let changed = true;\n\n  while (changed) {\n    changed = false;\n    edges.forEach((edge) => {\n      if (related.has(edge.source) && !related.has(edge.target)) {\n        related.add(edge.target);\n        changed = true;\n      }\n      if (related.has(edge.target) && !related.has(edge.source)) {\n        related.add(edge.source);\n        changed = true;\n      }\n    });\n  }\n\n  return related;\n}\n\n// Find direct relationships for a node\nexport function findDirectRelationships(\n  nodeId: string,\n  edges: Edge[]\n): Edge[] {\n  return edges.filter((edge) => edge.source === nodeId || edge.target === nodeId);\n}\n", "import { useMemo } from 'react';\nimport type { TableSchema, ProcessedSchemaTable } from '../types/schema';\n\ninterface SchemaTable {\n  table_name: string;\n  columns: {\n    column_name: string;\n    data_type: string;\n    is_nullable: boolean;\n    column_default: string | null;\n    constraint_type?: 'PRIMARY KEY' | 'FOREIGN KEY';\n    foreign_table_name?: string;\n    foreign_column_name?: string;\n  }[];\n}\n\nexport function useSchemaData(schemaData: TableSchema[]): { tables: ProcessedSchemaTable[] } {\n  return useMemo(() => {\n    const tables = schemaData.map((table): ProcessedSchemaTable => ({\n      name: table.table_name,\n      columns: table.columns.map((col) => {\n        const isPrimaryKey = table.primary_key?.includes(col.column_name) ?? false;\n        const foreignKey = table.foreign_keys?.find(fk => fk.column_name === col.column_name);\n        const isForeignKey = !!foreignKey;\n\n        return {\n          name: col.column_name,\n          type: col.data_type,\n          nullable: col.is_nullable === 'YES',\n          isPrimaryKey,\n          isForeignKey,\n          ...(isForeignKey && {\n            references: {\n              table: foreignKey!.foreign_table_name,\n              column: foreignKey!.foreign_column_name,\n            },\n          }),\n        };\n      }),\n    }));\n\n    return { tables };\n  }, [schemaData]);\n}\n", "import pkg from 'pg';\nconst { Pool } = pkg;\n\nexport const pool = new Pool({\n  user: process.env.PGUSER || 'postgres',\n  host: process.env.PGHOST || 'localhost',\n  database: process.env.PGDATABASE || 'postgres',\n  password: process.env.PGPASSWORD || 'postgres',\n  port: parseInt(process.env.PGPORT || '5555'),\n});\n\n// Add error handler\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n", "import { format } from \"sql-formatter\";\nimport { QueryError } from '../types/query';\n\n/**\n * Sanitizes table and column names to prevent SQL injection.\n * Only allows alphanumeric characters and underscores.\n * Removes any other characters that could be used for SQL injection.\n */\nexport function sanitizeTableName(name: string): string {\n  if (!name) {\n    throw new QueryError('Table or column name cannot be empty', 'INVALID_NAME');\n  }\n\n  // Remove any characters that aren't alphanumeric or underscores\n  const sanitized = name.replace(/[^a-zA-Z0-9_]/g, '');\n\n  // Ensure the name starts with a letter\n  if (!/^[a-zA-Z]/.test(sanitized)) {\n    throw new QueryError('Table or column name must start with a letter', 'INVALID_NAME');\n  }\n\n  // Ensure we still have a valid name after sanitization\n  if (sanitized.length === 0) {\n    throw new QueryError('Invalid table or column name', 'INVALID_NAME');\n  }\n\n  // Convert to lowercase for consistency\n  return sanitized.toLowerCase();\n}\n\n/**\n * Validates and formats a schema name.\n * By default, uses 'public' schema if none is provided.\n */\nexport function sanitizeSchemaName(schema: string = 'public'): string {\n  const sanitized = sanitizeTableName(schema);\n  return sanitized;\n}\n\n/**\n * Validates and formats column names for SELECT statements.\n */\nexport function sanitizeColumnList(columns: string[]): string {\n  if (!columns || columns.length === 0) {\n    return '*';\n  }\n\n  return columns\n    .map(col => {\n      // Handle special case for *\n      if (col === '*') return col;\n      return sanitizeTableName(col);\n    })\n    .join(', ');\n}\n\n/**\n * Creates a safe parameterized WHERE clause.\n * Returns both the clause string and the values array for parameterized queries.\n */\nexport function createWhereClause(\n  conditions: Record<string, any>\n): { clause: string; values: any[] } {\n  const values: any[] = [];\n  const clauses: string[] = [];\n\n  Object.entries(conditions).forEach(([key, value], index) => {\n    const sanitizedKey = sanitizeTableName(key);\n    clauses.push(`${sanitizedKey} = $${index + 1}`);\n    values.push(value);\n  });\n\n  return {\n    clause: clauses.length > 0 ? `WHERE ${clauses.join(' AND ')}` : '',\n    values,\n  };\n}\n\n/**\n * Creates a safe ORDER BY clause.\n */\nexport function createOrderByClause(\n  orderBy: { column: string; direction?: 'ASC' | 'DESC' }[]\n): string {\n  if (!orderBy || orderBy.length === 0) return '';\n\n  const orderClauses = orderBy.map(({ column, direction = 'ASC' }) => {\n    const sanitizedColumn = sanitizeTableName(column);\n    const sanitizedDirection = direction.toUpperCase() === 'DESC' ? 'DESC' : 'ASC';\n    return `${sanitizedColumn} ${sanitizedDirection}`;\n  });\n\n  return `ORDER BY ${orderClauses.join(', ')}`;\n}\n\n/**\n * Validates and formats a LIMIT clause value.\n */\nexport function sanitizeLimit(limit?: number): string {\n  if (!limit || limit <= 0) return '';\n  return `LIMIT ${Math.floor(limit)}`;\n}\n\nexport class SQLSanitizer {\n  private readonly allowedTableNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n  private readonly allowedColumnNamePattern = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n  private readonly reservedKeywords = new Set([\n    'select', 'insert', 'update', 'delete', 'drop', 'truncate', 'alter',\n    'create', 'table', 'database', 'schema', 'grant', 'revoke'\n  ]);\n\n  public validateTableName(tableName: string): boolean {\n    return this.allowedTableNamePattern.test(tableName) && \n           !this.reservedKeywords.has(tableName.toLowerCase());\n  }\n\n  public validateColumnName(columnName: string): boolean {\n    return this.allowedColumnNamePattern.test(columnName) &&\n           !this.reservedKeywords.has(columnName.toLowerCase());\n  }\n\n  public escapeValue(value: any): string {\n    if (value === null) return 'NULL';\n    if (typeof value === 'number') return value.toString();\n    if (typeof value === 'boolean') return value ? 'TRUE' : 'FALSE';\n    if (value instanceof Date) return `'${value.toISOString()}'`;\n    return `'${value.toString().replace(/'/g, \"''\")}'`;\n  }\n\n  public sanitizeQuery(query: string): string {\n    // Remove comments\n    query = query.replace(/--.*$/gm, '');\n    query = query.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\n\n    // Check for dangerous keywords\n    const dangerousPatterns = [\n      /;\\s*drop\\s/i,\n      /;\\s*delete\\s/i,\n      /;\\s*truncate\\s/i,\n      /;\\s*alter\\s/i,\n      /;\\s*grant\\s/i,\n      /;\\s*revoke\\s/i,\n      /union\\s+all/i,\n      /union\\s+select/i,\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(query)) {\n        throw new QueryError('Query contains dangerous operations', 'DANGEROUS_QUERY');\n      }\n    }\n\n    // Format the query for consistency\n    return format(query, {\n      language: 'postgresql',\n      keywordCase: 'upper',\n    });\n  }\n\n  public sanitizeTableQuery(tableName: string, filters?: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new QueryError('Invalid table name', 'INVALID_TABLE');\n    }\n\n    let query = `SELECT * FROM \"${tableName}\"`;\n\n    if (filters && Object.keys(filters).length > 0) {\n      const { clause, values } = createWhereClause(filters);\n      query += ` ${clause}`;\n      return format(query, { language: 'postgresql' });\n    }\n\n    return format(query, { language: 'postgresql' });\n  }\n\n  public sanitizeUpdateQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any },\n    data: Record<string, any>\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new QueryError('Invalid table name', 'INVALID_TABLE');\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new QueryError('Invalid primary key column name', 'INVALID_COLUMN');\n    }\n\n    const setClauses = Object.entries(data)\n      .filter(([column]) => this.validateColumnName(column))\n      .map(([column, value]) => `\"${column}\" = ${this.escapeValue(value)}`)\n      .join(', ');\n\n    const query = `\n      UPDATE \"${tableName}\"\n      SET ${setClauses}\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)}\n      RETURNING *;\n    `;\n\n    return format(query, { language: 'postgresql' });\n  }\n\n  public sanitizeDeleteQuery(\n    tableName: string,\n    primaryKey: { column: string; value: any }\n  ): string {\n    if (!this.validateTableName(tableName)) {\n      throw new QueryError('Invalid table name', 'INVALID_TABLE');\n    }\n\n    if (!this.validateColumnName(primaryKey.column)) {\n      throw new QueryError('Invalid primary key column name', 'INVALID_COLUMN');\n    }\n\n    const query = `\n      DELETE FROM \"${tableName}\"\n      WHERE \"${primaryKey.column}\" = ${this.escapeValue(primaryKey.value)}\n      RETURNING *;\n    `;\n\n    return format(query, { language: 'postgresql' });\n  }\n\n  public sanitizeInsertQuery(tableName: string, data: Record<string, any>): string {\n    if (!this.validateTableName(tableName)) {\n      throw new QueryError('Invalid table name', 'INVALID_TABLE');\n    }\n\n    const columns = Object.keys(data).filter(column => this.validateColumnName(column));\n    const values = columns.map(column => this.escapeValue(data[column]));\n\n    const query = `\n      INSERT INTO \"${tableName}\" (${columns.map(c => `\"${c}\"`).join(', ')})\n      VALUES (${values.join(', ')})\n      RETURNING *;\n    `;\n\n    return format(query, { language: 'postgresql' });\n  }\n}\n\nexport const sqlSanitizer = new SQLSanitizer();\n", "import type { ConnectionConfig } from '../lib/db/connection-manager.server';\n\nexport interface QueryOptions {\n  connectionId: string;\n  organizationId: string;\n  userId: string;\n  config: ConnectionConfig;\n  timeout?: number;\n  maxRows?: number;\n}\n\nexport interface QueryField {\n  name: string;\n  dataTypeID: number;\n  dataType: string;\n}\n\nexport interface QueryMetrics {\n  executionTimeMs: number;\n  startTime: string;\n  endTime: string;\n  success: boolean;\n  rowCount: number;\n}\n\nexport interface QueryResult {\n  rows: Record<string, any>[];\n  fields: QueryField[];\n  rowCount: number;\n  metrics: QueryMetrics;\n}\n\nexport interface QueryHistoryEntry {\n  id: string;\n  organizationId: string;\n  connectionId: string;\n  userId: string;\n  query: string;\n  status: 'success' | 'error';\n  executionTimeMs: string;\n  rowCount: string | null;\n  error: string | null;\n  createdAt: Date;\n}\n\nexport type QueryStatus = 'idle' | 'running' | 'success' | 'error';\n\nexport interface QueryState {\n  status: QueryStatus;\n  result: QueryResult | null;\n  error: string | null;\n  isLoading: boolean;\n}\n\nexport type QueryErrorCode = \n  | 'INVALID_NAME'\n  | 'INVALID_TABLE'\n  | 'INVALID_COLUMN'\n  | 'DANGEROUS_QUERY'\n  | 'EXECUTION_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'CONNECTION_ERROR';\n\nexport interface TableSchema {\n  table_name: string;\n  connectionId: string;\n  columns: Array<{\n    column_name: string;\n    data_type: string;\n    is_nullable: string;\n    column_default: string | null;\n    constraint_type?: 'PRIMARY KEY' | 'FOREIGN KEY';\n    foreign_table_name?: string;\n    foreign_column_name?: string;\n  }>;\n}\n\nexport class QueryError extends Error {\n  constructor(\n    message: string,\n    public code: QueryErrorCode,\n  ) {\n    super(message);\n    this.name = 'QueryError';\n    Object.setPrototypeOf(this, QueryError.prototype);\n  }\n}\n", "import type { TableDataResponse, TableSchema, QueryResult } from '../types';\nimport { pool } from './pool.server';\nimport { sanitizeTableName } from './sql-sanitizer.server';\n\nexport async function fetchSchema(): Promise<TableSchema[]> {\n  console.log('Attempting to fetch schema...');\n  const client = await pool.connect();\n  try {\n    console.log('Connected to database, executing query...');\n    const result = await client.query<{\n      table_name: string;\n      connection_id: string;\n      columns: Array<{\n        column_name: string;\n        data_type: string;\n        is_nullable: string;\n        column_default: string | null;\n      }>;\n      primary_key: string[] | null;\n    }>(`\n      SELECT \n        tables.table_name,\n        connections.id as connection_id,\n        json_agg(\n          json_build_object(\n            'column_name', columns.column_name,\n            'data_type', columns.data_type,\n            'is_nullable', columns.is_nullable,\n            'column_default', columns.column_default\n          )\n        ) as columns,\n        array_agg(DISTINCT CASE WHEN tc.constraint_type = 'PRIMARY KEY' \n          THEN columns.column_name \n          ELSE NULL \n        END) FILTER (WHERE tc.constraint_type = 'PRIMARY KEY') as primary_key\n      FROM \n        information_schema.tables tables\n      JOIN \n        information_schema.columns columns ON tables.table_name = columns.table_name\n      LEFT JOIN \n        information_schema.table_constraints tc ON tables.table_name = tc.table_name\n      LEFT JOIN \n        information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name \n          AND columns.column_name = kcu.column_name\n      JOIN \n        connections ON connections.id = current_setting('app.current_connection_id')::uuid\n      WHERE \n        tables.table_schema = 'public'\n      GROUP BY \n        tables.table_name, connections.id;\n    `);\n\n    return result.rows.map(row => ({\n      name: row.table_name,\n      table_name: row.table_name,\n      connectionId: row.connection_id,\n      columns: row.columns.map(col => ({\n        column_name: col.column_name,\n        name: col.column_name,\n        type: col.data_type,\n        data_type: col.data_type,\n        is_nullable: col.is_nullable,\n        nullable: col.is_nullable === 'YES',\n        column_default: col.column_default\n      })),\n      primary_key: row.primary_key?.filter(Boolean) || null,\n      foreign_keys: [],\n      rowCount: 0,\n      sizeInBytes: 0\n    }));\n  } finally {\n    client.release();\n  }\n}\n\nexport async function fetchTableData(\n  tableName: string,\n  sortBy?: string,\n  sortOrder: 'asc' | 'desc' = 'asc'\n): Promise<TableDataResponse> {\n  const sanitizedTableName = sanitizeTableName(tableName);\n  const sanitizedSortBy = sortBy ? sanitizeTableName(sortBy) : null;\n  \n  const orderClause = sanitizedSortBy \n    ? `ORDER BY \"${sanitizedSortBy}\" ${sortOrder}`\n    : '';\n\n  const client = await pool.connect();\n  try {\n    const result = await client.query(\n      `SELECT * FROM \"${sanitizedTableName}\" ${orderClause}`\n    );\n    \n    return {\n      data: result.rows,\n      totalRows: result.rowCount || 0\n    };\n  } finally {\n    client.release();\n  }\n}\n\nexport async function executeQuery(sql: string): Promise<QueryResult> {\n  const client = await pool.connect();\n  try {\n    const result = await client.query(sql);\n    return {\n      rows: result.rows,\n      fields: result.fields.map(field => ({\n        name: field.name,\n        dataTypeID: field.dataTypeID\n      }))\n    };\n  } finally {\n    client.release();\n  }\n}\n", "import { type ReactNode } from \"react\";\n\ninterface PageContainerProps {\n  children: ReactNode;\n}\n\nexport function PageContainer({ children }: PageContainerProps) {\n  return (\n    <div className=\"h-screen bg-gray-100 dark:bg-gray-950\">\n      <div className=\"h-full bg-white dark:bg-gray-900 rounded-lg shadow-sm overflow-hidden flex flex-col\">\n        {children}\n      </div>\n    </div>\n  );\n}\n", "import { useState } from \"react\";\nimport { format } from \"sql-formatter\";\nimport type { QueryResult, TableSchema } from \"../types\";\nimport { PageContainer } from \"../components/PageContainer\";\nimport { LoadingSpinner } from \"../components/LoadingSpinner\";\nimport { Alert } from \"../components/Alert\";\nimport { json, type ActionFunctionArgs, type SerializeFrom } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { QueryEngine } from \"../lib/db/query-engine.server\";\nimport { requireUser } from \"../lib/auth/session.server\";\nimport { SQLEditor } from \"../components/SQLEditor\";\nimport { fetchSchema } from \"../utils/api.server\";\nimport { StreamingQueryResults } from \"../components/StreamingQueryResults\";\n\ninterface ActionData {\n  result?: QueryResult;\n  error?: string;\n}\n\ninterface LoaderData {\n  schema: SerializeFrom<TableSchema>[];\n}\n\nexport async function loader() {\n  const schema = await fetchSchema();\n  return json<LoaderData>({ schema });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const query = formData.get(\"query\") as string;\n  const connectionId = formData.get(\"connectionId\") as string;\n\n  if (!query?.trim()) {\n    return json<ActionData>({ error: \"Query is required\" });\n  }\n\n  if (!connectionId) {\n    return json<ActionData>({ error: \"Database connection is required\" });\n  }\n\n  try {\n    const user = await requireUser(request);\n    const queryEngine = new QueryEngine({\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5555'),\n      database: process.env.DB_NAME || 'postgres',\n      user: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD || '',\n    });\n    const result = await queryEngine.executeQuery(query, {\n      userId: user.id,\n      connectionId,\n      organizationId: user.currentOrganization?.id,\n    });\n    return json<ActionData>({ result });\n  } catch (error) {\n    return json<ActionData>({ \n      error: error instanceof Error ? error.message : \"An error occurred\" \n    });\n  }\n}\n\nexport default function QueryPage() {\n  const [query, setQuery] = useState(\"\");\n  const [isFormatting, setIsFormatting] = useState(false);\n  const [syntaxError, setSyntaxError] = useState<string | null>(null);\n  const [isExecuting, setIsExecuting] = useState(false);\n  const { schema } = useLoaderData<LoaderData>();\n\n  const handleFormat = async () => {\n    if (!query.trim()) return;\n    \n    setIsFormatting(true);\n    try {\n      const formatted = format(query, { language: 'postgresql' });\n      setQuery(formatted);\n    } catch (err) {\n      console.error('Error formatting query:', err);\n    } finally {\n      setIsFormatting(false);\n    }\n  };\n\n  const handleSyntaxError = (error: string | null) => {\n    setSyntaxError(error);\n  };\n\n  const handleQueryComplete = () => {\n    setIsExecuting(false);\n  };\n\n  const handleExecuteQuery = async (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!query.trim()) return;\n    setIsExecuting(true);\n    // Create a new QueryEngine instance with the connection config\n    const queryEngine = new QueryEngine({\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5555'),\n      database: process.env.DB_NAME || 'postgres',\n      user: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD || '',\n    });\n    try {\n      const result = await queryEngine.executeQuery(query, {\n        userId: 'user-id', // Replace with actual user ID\n        connectionId: schema[0]['connectionId' as keyof TableSchema] as string,\n        organizationId: 'organization-id', // Replace with actual organization ID\n      });\n      // Handle query result\n    } catch (error) {\n      console.error('Error executing query:', error);\n    } finally {\n      setIsExecuting(false);\n    }\n  };\n\n  const renderError = () => {\n    if (syntaxError) {\n      return (\n        <Alert\n          type=\"warning\"\n          title=\"SQL Syntax Warning\"\n          message={syntaxError}\n          className=\"mb-4\"\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <PageContainer>\n      <div className=\"flex-none px-4 py-3\">\n        <h1 className=\"text-xl font-semibold text-light-text-primary dark:text-dark-text-primary\">SQL Query</h1>\n      </div>\n\n      <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between mb-2\">\n              <label htmlFor=\"query\" className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary\">\n                SQL Query\n              </label>\n              <button\n                onClick={handleFormat}\n                type=\"button\"\n                disabled={isFormatting || !query.trim()}\n                className=\"text-sm text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2\"\n              >\n                {isFormatting ? (\n                  <>\n                    <LoadingSpinner size=\"sm\" />\n                    <span>Formatting...</span>\n                  </>\n                ) : (\n                  <span>Format Query</span>\n                )}\n              </button>\n            </div>\n            <form onSubmit={handleExecuteQuery}>\n              <div className=\"space-y-4\">\n                <SQLEditor\n                  value={query}\n                  onChange={setQuery}\n                  onError={handleSyntaxError}\n                  schema={schema}\n                />\n                <div className=\"flex justify-end\">\n                  <button\n                    type=\"submit\"\n                    disabled={!query.trim() || isExecuting}\n                    className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 dark:bg-primary-500 dark:hover:bg-primary-600 rounded-md shadow-sm disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isExecuting ? 'Executing...' : 'Execute Query'}\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n\n          {renderError()}\n\n          {isExecuting && schema.length > 0 && (\n            <StreamingQueryResults\n              sql={query}\n              connectionId={schema[0]['connectionId' as keyof TableSchema] as string}\n              onComplete={handleQueryComplete}\n            />\n          )}\n          {isExecuting && schema.length === 0 && (\n            <Alert\n              type=\"error\"\n              title=\"No Connection\"\n              message=\"Please select a database connection before executing queries.\"\n            />\n          )}\n        </div>\n      </div>\n    </PageContainer>\n  );\n}\n", "interface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nconst sizeClasses = {\n  sm: 'h-4 w-4',\n  md: 'h-6 w-6',\n  lg: 'h-8 w-8',\n};\n\nexport function LoadingSpinner({ size = 'md', className = '' }: LoadingSpinnerProps) {\n  return (\n    <div role=\"status\" className={className}>\n      <svg\n        className={`${sizeClasses[size]} animate-spin text-light-border dark:text-dark-border fill-primary-600`}\n        viewBox=\"0 0 100 101\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n          fill=\"currentColor\"\n        />\n        <path\n          d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n          fill=\"currentFill\"\n        />\n      </svg>\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}\n", "import { XCircleIcon, CheckCircleIcon, ExclamationTriangleIcon, InformationCircleIcon } from '@heroicons/react/24/solid';\n\ninterface AlertProps {\n  type: 'error' | 'success' | 'warning' | 'info';\n  title: string;\n  message?: string;\n  className?: string;\n}\n\nconst alertStyles = {\n  error: {\n    container: 'bg-red-50 dark:bg-red-900/50',\n    icon: 'text-red-400 dark:text-red-300',\n    title: 'text-red-800 dark:text-red-200',\n    message: 'text-red-700 dark:text-red-300',\n    Icon: XCircleIcon,\n  },\n  success: {\n    container: 'bg-green-50 dark:bg-green-900/50',\n    icon: 'text-green-400 dark:text-green-300',\n    title: 'text-green-800 dark:text-green-200',\n    message: 'text-green-700 dark:text-green-300',\n    Icon: CheckCircleIcon,\n  },\n  warning: {\n    container: 'bg-yellow-50 dark:bg-yellow-900/50',\n    icon: 'text-yellow-400 dark:text-yellow-300',\n    title: 'text-yellow-800 dark:text-yellow-200',\n    message: 'text-yellow-700 dark:text-yellow-300',\n    Icon: ExclamationTriangleIcon,\n  },\n  info: {\n    container: 'bg-blue-50 dark:bg-blue-900/50',\n    icon: 'text-blue-400 dark:text-blue-300',\n    title: 'text-blue-800 dark:text-blue-200',\n    message: 'text-blue-700 dark:text-blue-300',\n    Icon: InformationCircleIcon,\n  },\n};\n\nexport function Alert({ type, title, message, className = '' }: AlertProps) {\n  const styles = alertStyles[type];\n  const Icon = styles.Icon;\n\n  return (\n    <div className={`rounded-lg p-4 ${styles.container} ${className}`}>\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          <Icon className={`h-5 w-5 ${styles.icon}`} aria-hidden=\"true\" />\n        </div>\n        <div className=\"ml-3\">\n          <h3 className={`text-sm font-medium ${styles.title}`}>{title}</h3>\n          {message && (\n            <div className={`mt-2 text-sm ${styles.message}`}>\n              <p>{message}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import type { Pool, PoolClient, QueryResult as PgQueryResult, QueryResultRow } from 'pg';\nimport Cursor from 'pg-cursor';\nimport { QueryError, QueryOptions, QueryResult, QueryMetrics } from '../../types/query';\nimport { ConnectionManager, type ConnectionConfig } from './connection-manager.server';\nimport { sqlSanitizer } from '../../utils/sql-sanitizer.server';\nimport type { StreamingQueryMessage, StreamingQueryOptions } from '../../types/streaming';\nimport { webSocketManager } from '../../services/websocket.server';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst DEFAULT_QUERY_TIMEOUT = 30000; // 30 seconds\nconst MAX_ROWS = 1000;\nconst DEFAULT_BATCH_SIZE = 100;\n\ntype QueryStreamStatus = 'started' | 'streaming' | 'completed' | 'error' | 'cancelled';\n\ninterface QueryResultField {\n  name: string;\n  dataTypeID: number;\n  dataType: string;\n}\n\ninterface StreamingQueryState {\n  client: PoolClient;\n  startTime: number;\n  totalRows: number;\n}\n\ninterface StreamingMessageData {\n  fields?: QueryResultField[];\n  rows?: QueryResultRow[];\n  progress?: number;\n  totalRows?: number;\n  error?: string;\n  metrics?: QueryMetrics;\n}\n\ninterface ActiveQuery {\n  client: PoolClient;\n  startTime: number;\n  totalRows: number;\n}\n\nexport class QueryEngine {\n  private readonly connectionManager: ConnectionManager;\n  private activeQueries: Map<string, ActiveQuery>;\n  private config: ConnectionConfig;\n\n  constructor(config: ConnectionConfig) {\n    this.connectionManager = ConnectionManager.getInstance();\n    this.activeQueries = new Map();\n    this.config = config;\n  }\n\n  private getDataTypeName(dataTypeID: number): string {\n    const dataTypes: Record<number, string> = {\n      16: 'boolean',\n      20: 'bigint',\n      21: 'smallint',\n      23: 'integer',\n      25: 'text',\n      700: 'real',\n      701: 'double precision',\n      1043: 'varchar',\n      1082: 'date',\n      1114: 'timestamp',\n      1184: 'timestamptz',\n    };\n    return dataTypes[dataTypeID] || 'unknown';\n  }\n\n  private addRowLimit(sql: string, limit: number): string {\n    const normalizedSql = sql.trim().toLowerCase();\n    if (!normalizedSql.startsWith('select')) return sql;\n    if (normalizedSql.includes('limit')) return sql;\n    return `${sql} LIMIT ${limit}`;\n  }\n\n  private async recordQueryMetrics(\n    options: Omit<QueryOptions, 'config'>,\n    sql: string,\n    startTime: number,\n    result: { success: boolean; rowCount?: number; error?: string }\n  ): Promise<QueryMetrics> {\n    return {\n      executionTimeMs: Date.now() - startTime,\n      startTime: new Date(startTime).toISOString(),\n      endTime: new Date().toISOString(),\n      success: result.success,\n      rowCount: result.rowCount || 0,\n    };\n  }\n\n  private mapQueryFields(fields: readonly any[]): QueryResultField[] {\n    return fields.map(field => ({\n      name: field.name,\n      dataTypeID: field.dataTypeID,\n      dataType: this.getDataTypeName(field.dataTypeID),\n    }));\n  }\n\n  private async executeWithTimeout<T extends QueryResultRow>(\n    client: PoolClient,\n    sql: string,\n    timeout: number\n  ): Promise<PgQueryResult<T>> {\n    await client.query(`SET statement_timeout = ${timeout}`);\n    return client.query<T>(sql);\n  }\n\n  private createStreamMessage(\n    queryId: string,\n    status: QueryStreamStatus,\n    data?: StreamingMessageData\n  ): StreamingQueryMessage {\n    return {\n      type: 'query_stream',\n      queryId,\n      status,\n      data,\n    } as StreamingQueryMessage;\n  }\n\n  public async executeQuery(\n    sql: string,\n    options: Omit<QueryOptions, 'config'>\n  ): Promise<QueryResult> {\n    const startTime = Date.now();\n    const pool = await this.connectionManager.getConnection(this.config);\n    const client = await pool.connect();\n\n    try {\n      const timeout = options.timeout || DEFAULT_QUERY_TIMEOUT;\n      const maxRows = options.maxRows || MAX_ROWS;\n      const sanitizedSql = sqlSanitizer.sanitizeQuery(sql);\n      const limitedSql = this.addRowLimit(sanitizedSql, maxRows);\n\n      const result = await this.executeWithTimeout<QueryResultRow>(\n        client,\n        limitedSql,\n        timeout\n      );\n\n      const metrics = await this.recordQueryMetrics(options, sql, startTime, {\n        success: true,\n        rowCount: result.rowCount ?? 0,\n      });\n\n      return {\n        rows: result.rows,\n        fields: this.mapQueryFields(result.fields),\n        rowCount: result.rowCount ?? 0,\n        metrics,\n      };\n    } catch (error) {\n      const metrics = await this.recordQueryMetrics(options, sql, startTime, {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      throw new QueryError(error instanceof Error ? error.message : 'Unknown error', 'EXECUTION_ERROR');\n    } finally {\n      client.release();\n    }\n  }\n\n  public async startStreamingQuery(\n    sql: string,\n    options: Omit<StreamingQueryOptions & QueryOptions, 'config'>\n  ): Promise<string> {\n    const queryId = uuidv4();\n    const pool = await this.connectionManager.getConnection(this.config);\n    const client = await pool.connect();\n\n    try {\n      const timeout = options.timeout || DEFAULT_QUERY_TIMEOUT;\n      const maxRows = options.maxRows || MAX_ROWS;\n      const sanitizedSql = sqlSanitizer.sanitizeQuery(sql);\n      const limitedSql = this.addRowLimit(sanitizedSql, maxRows);\n\n      this.activeQueries.set(queryId, {\n        client,\n        startTime: Date.now(),\n        totalRows: 0,\n      });\n\n      // Start the streaming query in the background\n      this.executeStreamingQuery(\n        { ...options, sql: limitedSql },\n        client,\n        queryId\n      ).catch((error) => {\n        console.error('Error in streaming query:', error);\n      });\n\n      return queryId;\n    } catch (error) {\n      client.release();\n      throw new QueryError(error instanceof Error ? error.message : 'Unknown error', \n        'EXECUTION_ERROR'\n      );\n    }\n  }\n\n  private async executeStreamingQuery(\n    options: StreamingQueryOptions & { sql: string; userId: string },\n    client: PoolClient,\n    queryId: string\n  ): Promise<void> {\n    const { userId, sql } = options;\n    const startTime = Date.now();\n\n    try {\n      const cursor = client.query(new Cursor(sql));\n      let totalRows = 0;\n      let batch: QueryResultRow[] = [];\n\n      const readNextBatch = async () => {\n        cursor.read(DEFAULT_BATCH_SIZE, (err, rows) => {\n          if (err) {\n            webSocketManager.sendToUser(options.userId, {\n              type: 'streaming-query',\n              queryId,\n              status: 'error',\n              data: { error: err.message },\n            });\n            client.release();\n            this.activeQueries.delete(queryId);\n            return;\n          }\n\n          if (rows.length > 0) {\n            totalRows += rows.length;\n            webSocketManager.sendToUser(options.userId, {\n              type: 'streaming-query',\n              queryId,\n              status: 'streaming',\n              data: {\n                rows,\n                totalRows,\n              },\n            });\n            readNextBatch(); // Continue reading\n          } else {\n            // No more rows, we're done\n            const endTime = Date.now();\n            const metrics: QueryMetrics = {\n              executionTimeMs: endTime - startTime,\n              startTime: new Date(startTime).toISOString(),\n              endTime: new Date().toISOString(),\n              success: true,\n              rowCount: totalRows,\n            };\n\n            webSocketManager.sendToUser(options.userId, {\n              type: 'streaming-query',\n              queryId,\n              status: 'completed',\n              data: { metrics },\n            });\n\n            cursor.close(() => {\n              client.release();\n              this.activeQueries.delete(queryId);\n            });\n          }\n        });\n      };\n\n      // Get field information first\n      cursor.read(0, (err, rows, fields) => {\n        if (err) {\n          webSocketManager.sendToUser(options.userId, {\n            type: 'streaming-query',\n            queryId,\n            status: 'error',\n            data: { error: err.message },\n          });\n          client.release();\n          this.activeQueries.delete(queryId);\n          return;\n        }\n\n        if (fields) {\n          webSocketManager.sendToUser(options.userId, {\n            type: 'streaming-query',\n            queryId,\n            status: 'started',\n            data: { fields },\n          });\n        }\n\n        // Start reading rows\n        readNextBatch();\n      });\n    } catch (error) {\n      webSocketManager.sendToUser(options.userId, {\n        type: 'streaming-query',\n        queryId,\n        status: 'error',\n        data: { error: error instanceof Error ? error.message : 'Unknown error' },\n      });\n      client.release();\n      this.activeQueries.delete(queryId);\n    }\n  }\n\n  public async cancelStreamingQuery(queryId: string, userId: string): Promise<void> {\n    const queryState = this.activeQueries.get(queryId);\n    \n    try {\n      if (queryState) {\n        await queryState.client.query('CLOSE query_cursor');\n        queryState.client.release();\n        this.activeQueries.delete(queryId);\n      }\n\n      webSocketManager.sendToUser(userId, this.createStreamMessage(queryId, 'cancelled'));\n    } catch (error) {\n      console.error(`Failed to cancel query ${queryId}:`, error);\n      throw new QueryError('Failed to cancel query', 'EXECUTION_ERROR');\n    }\n  }\n}\n", "import { WebSocketServer } from 'ws';\nimport { IncomingMessage } from 'http';\nimport { authenticateWebSocket } from '../middleware/websocket-auth.server';\nimport type { \n  AuthenticatedWebSocket, \n  WebSocketMessage, \n  WebSocketClientMessage,\n  TableUpdate\n} from '../types/websocket';\n\ninterface ExtendedWebSocket extends AuthenticatedWebSocket {\n  id: string;\n  channels: Set<string>;\n  isAlive: boolean;\n  tables: Set<string>;\n}\n\ninterface SocketData {\n  userId: string;\n  organizationId: string;\n  subscribedTables: Set<string>;\n}\n\nexport class WebSocketManager {\n  private wss: WebSocketServer;\n  private pingInterval: NodeJS.Timeout;\n  private socketData: Map<string, SocketData>;\n\n  constructor() {\n    this.wss = new WebSocketServer({ noServer: true });\n    this.socketData = new Map();\n    this.setupWebSocketServer();\n    this.pingInterval = this.startHeartbeat();\n  }\n\n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws: AuthenticatedWebSocket) => {\n      const extWs = ws as ExtendedWebSocket;\n      extWs.id = Math.random().toString(36).substr(2, 9);\n      extWs.channels = new Set();\n      extWs.tables = new Set();\n      extWs.isAlive = true;\n\n      this.socketData.set(extWs.id, {\n        userId: \"\",\n        organizationId: \"\",\n        subscribedTables: new Set(),\n      });\n\n      extWs.on('pong', () => {\n        extWs.isAlive = true;\n      });\n\n      extWs.on('message', (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString()) as WebSocketClientMessage;\n          this.handleMessage(extWs, message);\n        } catch (error) {\n          console.error('Failed to parse message:', error);\n        }\n      });\n\n      extWs.on('close', () => {\n        extWs.channels.clear();\n        extWs.tables.clear();\n        this.socketData.delete(extWs.id);\n      });\n    });\n  }\n\n  private handleMessage(ws: ExtendedWebSocket, message: WebSocketClientMessage) {\n    switch (message.type) {\n      case 'subscribe':\n        if (message.channel) {\n          ws.channels.add(message.channel);\n        }\n        break;\n      case 'unsubscribe':\n        if (message.channel) {\n          ws.channels.delete(message.channel);\n        }\n        break;\n      case 'subscribe:table':\n        if (message.tableName) {\n          this.subscribeToTable(ws, message.tableName);\n        }\n        break;\n      case 'unsubscribe:table':\n        if (message.tableName) {\n          this.unsubscribeFromTable(ws, message.tableName);\n        }\n        break;\n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  private subscribeToTable(ws: ExtendedWebSocket, tableName: string) {\n    const data = this.socketData.get(ws.id);\n    if (!data) return;\n\n    data.subscribedTables.add(tableName);\n    ws.tables.add(tableName);\n  }\n\n  private unsubscribeFromTable(ws: ExtendedWebSocket, tableName: string) {\n    const data = this.socketData.get(ws.id);\n    if (!data) return;\n\n    data.subscribedTables.delete(tableName);\n    ws.tables.delete(tableName);\n  }\n\n  private startHeartbeat(): NodeJS.Timeout {\n    return setInterval(() => {\n      this.wss.clients.forEach((ws) => {\n        const extWs = ws as ExtendedWebSocket;\n        if (extWs.isAlive === false) {\n          extWs.terminate();\n          return;\n        }\n        extWs.isAlive = false;\n        extWs.ping();\n      });\n    }, 30000);\n  }\n\n  public broadcast(message: WebSocketMessage) {\n    this.wss.clients.forEach((ws) => {\n      if (ws.readyState === ws.OPEN) {\n        ws.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  public emitTableUpdate(tableName: string, update: TableUpdate) {\n    this.wss.clients.forEach((ws) => {\n      const extWs = ws as ExtendedWebSocket;\n      if (extWs.tables.has(tableName)) {\n        ws.send(JSON.stringify({\n          type: 'table:update',\n          update\n        }));\n      }\n    });\n  }\n\n  public sendToUser(userId: string, message: WebSocketMessage) {\n    this.wss.clients.forEach((client) => {\n      const extClient = client as ExtendedWebSocket;\n      const socketData = this.socketData.get(extClient.id);\n      if (socketData?.userId === userId && client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  public handleUpgrade(request: IncomingMessage, socket: any, head: Buffer) {\n    authenticateWebSocket(this.wss, request)\n      .then(() => {\n        this.wss.handleUpgrade(request, socket, head, (ws) => {\n          this.wss.emit('connection', ws, request);\n        });\n      })\n      .catch((error) => {\n        console.error('WebSocket authentication failed:', error);\n        socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n        socket.destroy();\n      });\n  }\n\n  public cleanup() {\n    clearInterval(this.pingInterval);\n    this.wss.close();\n  }\n}\n\nexport const webSocketManager = new WebSocketManager();\n", "import type { WebSocket, WebSocketServer } from 'ws';\nimport { getUserSession } from '../lib/auth/session.server';\nimport type { IncomingMessage } from 'http';\nimport { parse } from 'cookie';\nimport type { AuthenticatedWebSocket } from '../types/websocket';\n\nexport async function authenticateWebSocket(\n  wss: WebSocketServer,\n  request: IncomingMessage\n): Promise<boolean> {\n  try {\n    const cookieHeader = request.headers.cookie;\n    if (!cookieHeader) {\n      return false;\n    }\n\n    const cookies = parse(cookieHeader);\n    const sessionCookie = cookies['__session'];\n    \n    if (!sessionCookie) {\n      return false;\n    }\n\n    // Create a mock request object for session validation\n    const mockRequest = new Request('http://localhost', {\n      headers: new Headers({\n        Cookie: `__session=${sessionCookie}`,\n      }),\n    });\n\n    const session = await getUserSession(mockRequest);\n    const userId = await session.get('userId');\n    \n    if (!userId) {\n      return false;\n    }\n\n    // Store userId in the WebSocket server's auth context\n    wss.once('connection', (ws: WebSocket) => {\n      const authWs = ws as AuthenticatedWebSocket;\n      authWs.userId = userId;\n      authWs.isAlive = true;\n      authWs.channels = new Set();\n    });\n\n    return true;\n  } catch (error) {\n    console.error('WebSocket authentication error:', error);\n    return false;\n  }\n}\n", "import { sql } from '@codemirror/lang-sql';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport { useTheme } from '../hooks/useTheme';\nimport { EditorView, ViewUpdate } from '@codemirror/view';\nimport { Extension, Compartment, StateEffect } from '@codemirror/state';\nimport { useCallback, useEffect, useRef, useMemo } from 'react';\nimport { basicSetup } from 'codemirror';\nimport { linter, lintGutter, Diagnostic } from '@codemirror/lint';\nimport { autocompletion, CompletionContext, CompletionResult } from '@codemirror/autocomplete';\nimport type { TableSchema } from '../types';\n\ninterface SQLEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  className?: string;\n  height?: string;\n  onError?: (error: string | null) => void;\n  schema?: TableSchema[];\n}\n\n// SQL Keywords for auto-completion\nconst SQL_KEYWORDS = [\n  'SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING',\n  'JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'INNER JOIN', 'OUTER JOIN',\n  'INSERT INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE FROM',\n  'CREATE TABLE', 'ALTER TABLE', 'DROP TABLE', 'TRUNCATE TABLE',\n  'INDEX', 'VIEW', 'FUNCTION', 'TRIGGER', 'CONSTRAINT',\n  'PRIMARY KEY', 'FOREIGN KEY', 'NOT NULL', 'UNIQUE', 'DEFAULT',\n  'COUNT', 'SUM', 'AVG', 'MIN', 'MAX', 'DISTINCT',\n  'AND', 'OR', 'IN', 'NOT IN', 'LIKE', 'BETWEEN',\n  'ASC', 'DESC', 'LIMIT', 'OFFSET', 'AS'\n];\n\nfunction getSQLCompletions(context: CompletionContext, schema?: TableSchema[]): CompletionResult | null {\n  // Only trigger after space or when explicitly requested\n  const triggerChar = context.matchBefore(/\\w*$/);\n  const previousChar = context.state.doc.sliceString(Math.max(0, context.pos - 1), context.pos);\n  \n  // Don't show completions while actively typing unless explicitly requested\n  if (!context.explicit && previousChar !== ' ' && previousChar !== '.') {\n    return null;\n  }\n\n  if (!triggerChar) return null;\n\n  const textBefore = context.state.doc.sliceString(0, context.pos);\n  const lastWord = textBefore.split(/\\s+/).pop()?.toUpperCase() || '';\n\n  let options = [];\n\n  // Always include keywords but with lower boost\n  options.push(...SQL_KEYWORDS.map(keyword => ({\n    label: keyword,\n    type: 'keyword',\n    boost: 0.5\n  })));\n\n  if (schema) {\n    // Add table names with higher boost after FROM or JOIN\n    if (['FROM', 'JOIN', 'UPDATE', 'INTO'].includes(lastWord)) {\n      options.push(...schema.map(table => ({\n        label: table.name,\n        type: 'type',\n        boost: 2,\n        info: `${table.columns.length} columns`\n      })));\n    }\n\n    // Add column names with highest boost after SELECT, WHERE, ORDER BY, or after a table name\n    const isAfterTable = schema.some(table => lastWord === table.name.toUpperCase());\n    if (['SELECT', 'WHERE', 'BY', 'ON'].includes(lastWord) || isAfterTable || previousChar === '.') {\n      schema.forEach(table => {\n        table.columns.forEach(column => {\n          options.push({\n            label: column.name,\n            type: 'property',\n            boost: 3,\n            info: `${table.name}.${column.name} (${column.type})`\n          });\n        });\n      });\n    }\n  }\n\n  return {\n    from: triggerChar.from,\n    options,\n    validFor: /^\\w*$/\n  };\n}\n\nfunction createSQLLinter() {\n  return linter((view) => {\n    const text = view.state.doc.toString();\n    if (!text.trim()) return [];\n    \n    const diagnostics: Diagnostic[] = [];\n    \n    // Basic SQL validation\n    if (!text.toLowerCase().match(/^(select|insert|update|delete|create|drop|alter|with)/)) {\n      diagnostics.push({\n        from: 0,\n        to: text.length,\n        severity: 'warning',\n        message: 'Query should start with a valid SQL command'\n      });\n    }\n\n    const singleQuotes = (text.match(/'/g) || []).length;\n    const doubleQuotes = (text.match(/\"/g) || []).length;\n    if (singleQuotes % 2 !== 0) {\n      diagnostics.push({\n        from: 0,\n        to: text.length,\n        severity: 'error',\n        message: 'Unmatched single quotes'\n      });\n    }\n    if (doubleQuotes % 2 !== 0) {\n      diagnostics.push({\n        from: 0,\n        to: text.length,\n        severity: 'error',\n        message: 'Unmatched double quotes'\n      });\n    }\n\n    return diagnostics;\n  }, {\n    delay: 300  // Reduced delay for more responsive feedback\n  });\n}\n\nconst lightTheme = EditorView.theme({\n  '&': {\n    backgroundColor: 'transparent',\n  },\n  '.cm-gutters': {\n    backgroundColor: 'transparent',\n    border: 'none',\n  },\n  '.cm-content': {\n    caretColor: '#000',\n  },\n  '&.cm-focused .cm-cursor': {\n    borderLeftColor: '#000',\n  },\n  '.cm-placeholder': {\n    color: '#999',\n  },\n});\n\nexport function SQLEditor({\n  value,\n  onChange,\n  placeholder = 'Enter your SQL query here...',\n  className = '',\n  height = '200px',\n  onError,\n  schema,\n}: SQLEditorProps) {\n  const { isDark } = useTheme();\n  const editorRef = useRef<HTMLDivElement>(null);\n  const viewRef = useRef<EditorView>();\n  const sqlLinter = useMemo(() => createSQLLinter(), []);\n  const isInternalChange = useRef(false);\n  \n  // Create compartments for dynamic configuration\n  const themeCompartment = useMemo(() => new Compartment(), []);\n  const lintCompartment = useMemo(() => new Compartment(), []);\n  const completionCompartment = useMemo(() => new Compartment(), []);\n\n  const createEditor = useCallback(() => {\n    if (!editorRef.current) return;\n\n    const baseExtensions: Extension[] = [\n      basicSetup,\n      sql(),\n      EditorView.updateListener.of((update: ViewUpdate) => {\n        if (update.docChanged) {\n          isInternalChange.current = true;\n          const newValue = update.state.doc.toString();\n          onChange(newValue);\n          // Reset the flag after the current call stack\n          setTimeout(() => {\n            isInternalChange.current = false;\n          }, 0);\n        }\n      }),\n      EditorView.theme({\n        '&': {\n          height,\n        },\n      }),\n      themeCompartment.of(isDark ? oneDark : lightTheme),\n      lintCompartment.of([lintGutter(), sqlLinter])\n    ];\n\n    // Add autocompletion in its own compartment if schema is provided\n    if (schema) {\n      baseExtensions.push(\n        completionCompartment.of(\n          autocompletion({\n            override: [context => getSQLCompletions(context, schema)],\n            closeOnBlur: true,\n            defaultKeymap: true,\n            maxRenderedOptions: 10,\n            activateOnTyping: false,\n            icons: false\n          })\n        )\n      );\n    }\n\n    const view = new EditorView({\n      doc: value,\n      extensions: baseExtensions,\n      parent: editorRef.current,\n    });\n\n    viewRef.current = view;\n\n    return () => {\n      view.destroy();\n    };\n  }, [onChange, height, isDark, schema, sqlLinter]);\n\n  // Handle theme changes\n  useEffect(() => {\n    const view = viewRef.current;\n    if (view) {\n      view.dispatch({\n        effects: themeCompartment.reconfigure(isDark ? oneDark : lightTheme)\n      });\n    }\n  }, [isDark]);\n\n  // Handle external value changes\n  useEffect(() => {\n    const view = viewRef.current;\n    if (!isInternalChange.current && view && view.state.doc.toString() !== value) {\n      const transaction = view.state.update({\n        changes: {\n          from: 0,\n          to: view.state.doc.length,\n          insert: value\n        },\n        selection: view.state.selection\n      });\n      view.dispatch(transaction);\n    }\n  }, [value]);\n\n  // Initialize editor\n  useEffect(() => {\n    if (editorRef.current) {\n      return createEditor();\n    }\n  }, [createEditor]);\n\n  return (\n    <div \n      ref={editorRef} \n      className={`overflow-hidden rounded-lg border border-light-border dark:border-dark-border ${className}`}\n      style={{ height }}\n    />\n  );\n}\n", "import { useEffect, useState } from 'react';\n\nexport function useTheme() {\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    // Check if user prefers dark mode\n    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setIsDark(darkModeMediaQuery.matches);\n\n    // Listen for changes in system dark mode preference\n    const listener = (e: MediaQueryListEvent) => setIsDark(e.matches);\n    darkModeMediaQuery.addEventListener('change', listener);\n\n    return () => darkModeMediaQuery.removeEventListener('change', listener);\n  }, []);\n\n  return { isDark };\n}\n", "import { useEffect, useRef, useState } from 'react';\nimport { useStreamingQuery } from '../hooks/useStreamingQuery';\nimport { LoadingSpinner } from './LoadingSpinner';\nimport { Alert } from './Alert';\nimport { EmptyState } from './EmptyState';\nimport { cn } from '../utils/cn';\nimport { VisualizationManager } from './DataVisualization';\n\ninterface StreamingQueryResultsProps {\n  sql: string;\n  connectionId?: string;\n  onComplete?: () => void;\n  className?: string;\n}\n\nexport function StreamingQueryResults({\n  sql,\n  connectionId,\n  onComplete,\n  className,\n}: StreamingQueryResultsProps) {\n  // Early return if no connectionId is provided\n  if (!connectionId) {\n    return (\n      <Alert\n        type=\"error\"\n        title=\"Connection Error\"\n        message=\"No connection ID provided. Please select a valid database connection.\"\n      />\n    );\n  }\n\n  const tableRef = useRef<HTMLDivElement>(null);\n  const [showVisualization, setShowVisualization] = useState(false);\n  const {\n    status,\n    fields,\n    rows,\n    progress,\n    totalRows,\n    error,\n    isConnected,\n    executeQuery,\n    cancelQuery,\n  } = useStreamingQuery({\n    onComplete,\n    debug: process.env.NODE_ENV === 'development',\n  });\n\n  useEffect(() => {\n    if (sql && connectionId && isConnected) {\n      executeQuery(sql, {\n        batchSize: 100,\n        maxRows: 1000,\n        includeProgress: true,\n      });\n\n      return () => {\n        cancelQuery();\n      };\n    }\n  }, [sql, connectionId, isConnected, executeQuery, cancelQuery]);\n\n  const renderStatus = () => {\n    if (error) {\n      return (\n        <Alert\n          type=\"error\"\n          title=\"Query Error\"\n          message={error}\n          className=\"mb-4\"\n        />\n      );\n    }\n\n    if (status === 'streaming' && progress < 100) {\n      return (\n        <div className=\"flex items-center space-x-2 mb-4 text-light-text-secondary dark:text-dark-text-secondary\">\n          <LoadingSpinner size=\"sm\" />\n          <span>\n            {progress > 0 \n              ? `Loading results (${Math.round(progress)}%${totalRows ? ` - ${rows.length} of ${totalRows} rows` : ''})` \n              : 'Starting query...'}\n          </span>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  if (!fields || !rows.length) {\n    if (status === 'started' || status === 'streaming') {\n      return (\n        <div className={cn(\"flex flex-col items-center justify-center p-8\", className)}>\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"mt-4 text-light-text-secondary dark:text-dark-text-secondary\">\n            Executing query...\n          </p>\n        </div>\n      );\n    }\n\n    return (\n      <div className={className}>\n        {renderStatus()}\n        <EmptyState\n          type=\"query\"\n          title=\"No Results\"\n          message={error ? \"An error occurred while executing the query.\" : \"Your query returned no results.\"}\n        />\n      </div>\n    );\n  }\n\n  const queryResult = {\n    columns: fields.map(field => ({\n      name: field.name,\n      type: field.dataType,\n    })),\n    rows,\n  };\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {renderStatus()}\n      \n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n          {rows.length} {rows.length === 1 ? 'row' : 'rows'}\n        </div>\n        <button\n          onClick={() => setShowVisualization(!showVisualization)}\n          className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-secondary dark:hover:bg-dark-bg-secondary rounded-md transition-colors\"\n        >\n          {showVisualization ? 'Show Table' : 'Show Visualization'}\n        </button>\n      </div>\n\n      {showVisualization ? (\n        <div className=\"rounded-lg border border-light-border dark:border-dark-border bg-light-bg-primary dark:bg-dark-bg-primary p-4\">\n          <VisualizationManager queryResult={queryResult} />\n        </div>\n      ) : (\n        <div\n          ref={tableRef}\n          className=\"overflow-x-auto rounded-lg border border-light-border dark:border-dark-border\"\n        >\n          <table className=\"min-w-full divide-y divide-light-border dark:divide-dark-border\">\n            <thead className=\"bg-light-bg-secondary dark:bg-dark-bg-secondary\">\n              <tr>\n                {fields.map((field, i) => (\n                  <th\n                    key={i}\n                    className=\"px-6 py-3 text-left text-xs font-medium text-light-text-secondary dark:text-dark-text-secondary uppercase tracking-wider whitespace-nowrap\"\n                  >\n                    {field.name}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-light-bg-primary dark:bg-dark-bg-primary divide-y divide-light-border dark:divide-dark-border\">\n              {rows.map((row, i) => (\n                <tr key={i}>\n                  {fields.map((field, j) => (\n                    <td\n                      key={j}\n                      className=\"px-6 py-4 whitespace-nowrap text-sm text-light-text-primary dark:text-dark-text-primary\"\n                    >\n                      {row[field.name]?.toString() ?? 'NULL'}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n", "import { useCallback, useEffect, useState } from 'react';\nimport { useWebSocket } from './useWebSocket';\nimport type { StreamingQueryMessage, StreamingQueryState, StreamingQueryOptions } from '../types/streaming';\nimport type { WebSocketMessage } from '../types/websocket';\n\nconst INITIAL_STATE: StreamingQueryState = {\n  queryId: '',\n  status: 'started',\n  rows: [],\n  progress: 0,\n  fields: [],\n};\n\ninterface UseStreamingQueryOptions {\n  onComplete?: (state: StreamingQueryState) => void;\n  onError?: (error: string) => void;\n  debug?: boolean;\n}\n\nexport function useStreamingQuery({ \n  onComplete, \n  onError,\n  debug = false \n}: UseStreamingQueryOptions = {}) {\n  const [state, setState] = useState<StreamingQueryState>(INITIAL_STATE);\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  const handleMessage = useCallback((message: WebSocketMessage) => {\n    if (message.type !== 'query_stream') return;\n\n    const streamMessage = message as StreamingQueryMessage;\n    \n    setState(prev => {\n      const newState = {\n        ...prev,\n        status: streamMessage.status,\n        queryId: streamMessage.queryId,\n      };\n\n      if (streamMessage.data) {\n        if (streamMessage.data.rows) {\n          newState.rows = [...prev.rows, ...streamMessage.data.rows];\n        }\n        if (streamMessage.data.fields) {\n          newState.fields = streamMessage.data.fields;\n        }\n        if (streamMessage.data.progress !== undefined) {\n          newState.progress = streamMessage.data.progress;\n        }\n        if (streamMessage.data.totalRows !== undefined) {\n          newState.totalRows = streamMessage.data.totalRows;\n        }\n        if (streamMessage.data.error) {\n          newState.error = streamMessage.data.error;\n          if (onError) onError(streamMessage.data.error);\n        }\n      }\n\n      if (debug) {\n        console.log('Streaming query state update:', newState);\n      }\n\n      if (streamMessage.status === 'completed' && onComplete) {\n        onComplete(newState);\n      }\n\n      return newState;\n    });\n  }, [debug, onComplete, onError]);\n\n  const { isConnected, sendMessage } = useWebSocket({\n    onMessage: handleMessage,\n    onError: (error) => {\n      setState(prev => ({ ...prev, status: 'error', error: error.message }));\n      if (onError) onError(error.message);\n    },\n    debug,\n  });\n\n  const executeQuery = useCallback((sql: string, options?: StreamingQueryOptions) => {\n    if (!isConnected) {\n      console.error('WebSocket not connected');\n      return;\n    }\n\n    setState(INITIAL_STATE);\n    \n    sendMessage({\n      type: 'execute_query',\n      sql,\n      options: {\n        batchSize: options?.batchSize || 100,\n        maxRows: options?.maxRows || 1000,\n        timeout: options?.timeout || 30000,\n        includeProgress: options?.includeProgress ?? true,\n      },\n    });\n  }, [isConnected, sendMessage]);\n\n  const cancelQuery = useCallback(() => {\n    if (!state.queryId || !isConnected) return;\n\n    sendMessage({\n      type: 'cancel_query',\n      queryId: state.queryId,\n    });\n  }, [isConnected, sendMessage, state.queryId]);\n\n  useEffect(() => {\n    if (isConnected && !isSubscribed) {\n      sendMessage({ type: 'subscribe', channel: 'query_stream' });\n      setIsSubscribed(true);\n    }\n  }, [isConnected, isSubscribed, sendMessage]);\n\n  return {\n    status: state.status,\n    fields: state.fields || [],\n    rows: state.rows,\n    progress: state.progress,\n    totalRows: state.totalRows,\n    error: state.error,\n    isConnected,\n    executeQuery,\n    cancelQuery,\n  };\n}\n", "import { useCallback, useEffect, useRef, useState } from 'react';\nimport type { WebSocketMessage, WebSocketClientMessage } from '../types/websocket';\n\ninterface UseWebSocketOptions {\n  onMessage?: (message: WebSocketMessage) => void;\n  onError?: (error: Error) => void;\n  debug?: boolean;\n}\n\nexport function useWebSocket({ onMessage, onError, debug = false }: UseWebSocketOptions = {}) {\n  const [isConnected, setIsConnected] = useState(false);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeout = useRef<NodeJS.Timeout>();\n  const reconnectAttempts = useRef(0);\n  const MAX_RECONNECT_ATTEMPTS = 5;\n  const RECONNECT_INTERVAL = 2000;\n\n  const connect = useCallback(() => {\n    if (ws.current?.readyState === WebSocket.OPEN) return;\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      if (debug) console.log('WebSocket connected');\n      setIsConnected(true);\n      reconnectAttempts.current = 0;\n    };\n\n    ws.current.onclose = () => {\n      if (debug) console.log('WebSocket disconnected');\n      setIsConnected(false);\n\n      if (reconnectAttempts.current < MAX_RECONNECT_ATTEMPTS) {\n        reconnectTimeout.current = setTimeout(() => {\n          reconnectAttempts.current++;\n          connect();\n        }, RECONNECT_INTERVAL * Math.pow(2, reconnectAttempts.current));\n      } else {\n        onError?.(new Error('Failed to connect to WebSocket server after multiple attempts'));\n      }\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      onError?.(new Error('WebSocket connection error'));\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data) as WebSocketMessage;\n        if (debug) console.log('Received WebSocket message:', message);\n        onMessage?.(message);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n  }, [debug, onError, onMessage]);\n\n  const sendMessage = useCallback((message: WebSocketClientMessage) => {\n    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket is not connected');\n      return;\n    }\n\n    try {\n      ws.current.send(JSON.stringify(message));\n      if (debug) console.log('Sent WebSocket message:', message);\n    } catch (error) {\n      console.error('Error sending WebSocket message:', error);\n      onError?.(new Error('Failed to send WebSocket message'));\n    }\n  }, [debug, onError]);\n\n  useEffect(() => {\n    connect();\n    return () => {\n      if (reconnectTimeout.current) {\n        clearTimeout(reconnectTimeout.current);\n      }\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [connect]);\n\n  return {\n    isConnected,\n    sendMessage,\n    socket: ws.current,\n  };\n}\n", "import { FolderIcon, TableCellsIcon, CircleStackIcon } from \"@heroicons/react/24/outline\";\n\ntype EmptyStateType = \"table\" | \"query\" | \"database\";\n\ninterface EmptyStateProps {\n  type: EmptyStateType;\n  title: string;\n  message: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nconst icons = {\n  table: TableCellsIcon,\n  query: CircleStackIcon,\n  database: FolderIcon,\n};\n\nexport function EmptyState({ type, title, message, action }: EmptyStateProps) {\n  const Icon = icons[type];\n\n  return (\n    <div className=\"flex flex-col items-center justify-center h-full p-8 text-center\">\n      <div className=\"flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-light-bg-tertiary dark:bg-dark-bg-tertiary\">\n        <Icon className=\"w-8 h-8 text-light-text-secondary dark:text-dark-text-secondary\" />\n      </div>\n      <h3 className=\"mb-2 text-lg font-medium text-light-text-primary dark:text-dark-text-primary\">\n        {title}\n      </h3>\n      <p className=\"mb-6 text-sm text-light-text-secondary dark:text-dark-text-secondary max-w-sm\">\n        {message}\n      </p>\n      {action && (\n        <button\n          onClick={action.onClick}\n          className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\"\n        >\n          {action.label}\n        </button>\n      )}\n    </div>\n  );\n}\n", "import { useMemo } from 'react';\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  Cell,\n  ComposedChart,\n} from 'recharts';\n\nexport type ChartType = 'bar' | 'line' | 'pie' | 'scatter' | 'area' | 'stacked-bar' | 'bubble' | 'heatmap';\n\nexport interface ChartData {\n  queryId?: string;\n  values: Record<string, any>[];\n  xField: string;\n  yField: string;\n  chartType: ChartType;\n  title?: string;\n  zField?: string; // For bubble charts\n  stackedFields?: string[]; // For stacked bar charts\n  customColors?: string[];\n}\n\ninterface ChartComponentProps {\n  data: ChartData;\n  height?: number;\n}\n\nconst DEFAULT_COLORS = [\n  '#8884d8',\n  '#82ca9d',\n  '#ffc658',\n  '#ff7300',\n  '#0088FE',\n  '#00C49F',\n  '#FFBB28',\n  '#FF8042',\n];\n\nexport function ChartComponent({ data, height = 400 }: ChartComponentProps) {\n  const { values, xField, yField, chartType, title, zField, stackedFields, customColors } = data;\n  const colors = customColors || DEFAULT_COLORS;\n\n  const chartData = useMemo(() => {\n    if (!values || values.length === 0) return [];\n    \n    if (chartType === 'heatmap') {\n      // Create correlation matrix for numeric fields\n      const numericFields = Object.keys(values[0]).filter(field => \n        !isNaN(Number(values[0][field]))\n      );\n      \n      return numericFields.flatMap((field1, i) => \n        numericFields.slice(i + 1).map(field2 => {\n          const correlation = calculateCorrelation(\n            values.map(v => Number(v[field1])),\n            values.map(v => Number(v[field2]))\n          );\n          return {\n            field1,\n            field2,\n            correlation\n          };\n        })\n      );\n    }\n\n    return values;\n  }, [values, xField, yField, chartType]);\n\n  if (!chartData || chartData.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-[400px] text-gray-500\">\n        No data available\n      </div>\n    );\n  }\n\n  const renderChart = () => {\n    switch (chartType) {\n      case 'bar':\n        return (\n          <BarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xField} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey={yField} fill={colors[0]} />\n          </BarChart>\n        );\n\n      case 'stacked-bar':\n        return (\n          <BarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xField} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {stackedFields?.map((field, index) => (\n              <Bar\n                key={field}\n                dataKey={field}\n                stackId=\"stack\"\n                fill={colors[index % colors.length]}\n              />\n            ))}\n          </BarChart>\n        );\n\n      case 'line':\n        return (\n          <LineChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xField} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey={yField} stroke={colors[0]} />\n          </LineChart>\n        );\n\n      case 'area':\n        return (\n          <AreaChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xField} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Area type=\"monotone\" dataKey={yField} fill={colors[0]} stroke={colors[0]} />\n          </AreaChart>\n        );\n\n      case 'pie':\n        return (\n          <PieChart>\n            <Pie\n              data={chartData}\n              dataKey={yField}\n              nameKey={xField}\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius={height ? height * 0.4 : 160}\n            >\n              {chartData.map((entry, index) => (\n                <Cell key={index} fill={colors[index % colors.length]} />\n              ))}\n            </Pie>\n            <Tooltip />\n            <Legend />\n          </PieChart>\n        );\n\n      case 'scatter':\n        return (\n          <ScatterChart>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xField} type=\"number\" />\n            <YAxis dataKey={yField} type=\"number\" />\n            <Tooltip />\n            <Legend />\n            <Scatter name={`${xField} vs ${yField}`} data={chartData} fill={colors[0]} />\n          </ScatterChart>\n        );\n\n      case 'bubble':\n        return (\n          <ScatterChart>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xField} type=\"number\" />\n            <YAxis dataKey={yField} type=\"number\" />\n            <Tooltip />\n            <Legend />\n            <Scatter\n              name={`${xField} vs ${yField}`}\n              data={chartData}\n              fill={colors[0]}\n              shape=\"circle\"\n            >\n              {chartData.map((entry, index) => (\n                <Cell\n                  key={index}\n                  fill={colors[index % colors.length]}\n                  r={zField ? Math.sqrt(entry[zField as keyof typeof entry] as number) * 2 : 5}\n                />\n              ))}\n            </Scatter>\n          </ScatterChart>\n        );\n\n      case 'heatmap':\n        return (\n          <div className=\"relative w-full h-full\">\n            <div className=\"absolute inset-0 grid\"\n                 style={{\n                   gridTemplateColumns: `repeat(${Math.ceil(Math.sqrt(chartData.length))}, 1fr)`,\n                   gap: '1px'\n                 }}>\n              {chartData.map((cell, index) => {\n                const intensity = (cell.correlation + 1) / 2; // normalize from [-1,1] to [0,1]\n                return (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-center p-2 text-xs\"\n                    style={{\n                      backgroundColor: `rgba(66, 146, 198, ${intensity})`,\n                      color: intensity > 0.6 ? 'white' : 'black'\n                    }}\n                    title={`${cell.field1} vs ${cell.field2}: ${cell.correlation.toFixed(2)}`}\n                  >\n                    {cell.correlation.toFixed(2)}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"w-full\">\n      {title && (\n        <h3 className=\"text-center text-lg font-medium mb-4 text-light-text-primary dark:text-dark-text-primary\">\n          {title}\n        </h3>\n      )}\n      <div style={{ width: '100%', height: height || 400 }}>\n        <ResponsiveContainer>\n          {renderChart() || <p>Error rendering chart</p>}\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateCorrelation(x: number[], y: number[]): number {\n  const n = x.length;\n  const meanX = x.reduce((a, b) => a + b) / n;\n  const meanY = y.reduce((a, b) => a + b) / n;\n  \n  const numerator = x.reduce((sum, xi, i) => \n    sum + (xi - meanX) * (y[i] - meanY), 0\n  );\n  \n  const denomX = Math.sqrt(x.reduce((sum, xi) => \n    sum + Math.pow(xi - meanX, 2), 0\n  ));\n  \n  const denomY = Math.sqrt(y.reduce((sum, yi) => \n    sum + Math.pow(yi - meanY, 2), 0\n  ));\n  \n  return numerator / (denomX * denomY);\n}\n", "import { useMemo, useState } from 'react';\nimport type { ChartType, ChartData } from './ChartComponent';\nimport { ChartComponent } from './ChartComponent';\nimport { ChartCustomizer } from './ChartCustomizer';\nimport { ChartSaveModal } from './ChartSaveModal';\nimport { SmartVisualization, type DataInsight } from './SmartVisualization';\nimport type { SavedChart } from '../../utils/chartStorage';\nimport { loadSavedCharts, deleteChart } from '../../utils/chartStorage';\n\nexport interface Column {\n  name: string;\n  type: string;\n}\n\nexport interface QueryResult {\n  columns: Column[];\n  rows: Record<string, any>[];\n}\n\ninterface VisualizationManagerProps {\n  queryResult: QueryResult;\n  queryId?: string;\n}\n\nfunction isNumeric(type: string): boolean {\n  return ['integer', 'decimal', 'float', 'double', 'numeric', 'real'].includes(type.toLowerCase());\n}\n\nfunction isDateType(type: string): boolean {\n  return ['date', 'timestamp', 'timestamptz'].includes(type.toLowerCase());\n}\n\nfunction isCategorical(values: any[], threshold = 20): boolean {\n  const uniqueValues = new Set(values);\n  return uniqueValues.size <= threshold;\n}\n\nfunction analyzeData(queryResult: QueryResult): ChartData[] {\n  const { columns, rows } = queryResult;\n  const suggestions: ChartData[] = [];\n\n  // Find columns by type\n  const numericColumns = columns.filter(col => isNumeric(col.type));\n  const dateColumns = columns.filter(col => isDateType(col.type));\n  const categoricalColumns = columns.filter(col => \n    !isNumeric(col.type) && !isDateType(col.type) &&\n    isCategorical(rows.map(row => row[col.name]))\n  );\n\n  // Time series charts (line and area)\n  dateColumns.forEach(dateCol => {\n    numericColumns.forEach(numCol => {\n      // Line chart\n      suggestions.push({\n        values: rows,\n        xField: dateCol.name,\n        yField: numCol.name,\n        chartType: 'line',\n        title: `${numCol.name} over time`,\n      });\n\n      // Area chart\n      suggestions.push({\n        values: rows,\n        xField: dateCol.name,\n        yField: numCol.name,\n        chartType: 'area',\n        title: `${numCol.name} area over time`,\n      });\n    });\n  });\n\n  // Bar and stacked bar charts for categorical data\n  categoricalColumns.forEach(catCol => {\n    numericColumns.forEach(numCol => {\n      // Regular bar chart\n      const aggregatedData = rows.reduce((acc, row) => {\n        const category = row[catCol.name];\n        if (!acc[category]) {\n          acc[category] = { count: 0, sum: 0 };\n        }\n        acc[category].count++;\n        acc[category].sum += Number(row[numCol.name]) || 0;\n        return acc;\n      }, {} as Record<string, { count: number; sum: number }>);\n\n      const chartData = Object.entries(aggregatedData).map(([category, data]) => ({\n        [catCol.name]: category,\n        [numCol.name]: data.sum / data.count, // average\n      }));\n\n      suggestions.push({\n        values: chartData,\n        xField: catCol.name,\n        yField: numCol.name,\n        chartType: 'bar',\n        title: `Average ${numCol.name} by ${catCol.name}`,\n      });\n\n      // Stacked bar chart when multiple numeric columns exist\n      if (numericColumns.length > 1) {\n        suggestions.push({\n          values: rows,\n          xField: catCol.name,\n          yField: numCol.name,\n          chartType: 'stacked-bar',\n          stackedFields: numericColumns.slice(0, 3).map(col => col.name), // Limit to 3 fields for readability\n          title: `Stacked ${numCol.name} by ${catCol.name}`,\n        });\n      }\n    });\n  });\n\n  // Pie charts for categorical columns\n  categoricalColumns.forEach(catCol => {\n    const aggregatedData = rows.reduce((acc, row) => {\n      const category = row[catCol.name];\n      if (!acc[category]) {\n        acc[category] = 0;\n      }\n      acc[category]++;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const chartData = Object.entries(aggregatedData).map(([category, count]) => ({\n      [catCol.name]: category,\n      count,\n    }));\n\n    if (Object.keys(aggregatedData).length <= 10) {\n      suggestions.push({\n        values: chartData,\n        xField: catCol.name,\n        yField: 'count',\n        chartType: 'pie',\n        title: `Distribution of ${catCol.name}`,\n      });\n    }\n  });\n\n  // Scatter and bubble charts for numeric pairs\n  if (numericColumns.length >= 2) {\n    for (let i = 0; i < numericColumns.length - 1; i++) {\n      for (let j = i + 1; j < numericColumns.length; j++) {\n        // Scatter plot\n        suggestions.push({\n          values: rows,\n          xField: numericColumns[i].name,\n          yField: numericColumns[j].name,\n          chartType: 'scatter',\n          title: `${numericColumns[i].name} vs ${numericColumns[j].name}`,\n        });\n\n        // Bubble chart with a third numeric dimension\n        if (numericColumns.length > 2) {\n          const zField = numericColumns.find((_, idx) => idx !== i && idx !== j)?.name;\n          if (zField) {\n            suggestions.push({\n              values: rows,\n              xField: numericColumns[i].name,\n              yField: numericColumns[j].name,\n              zField,\n              chartType: 'bubble',\n              title: `${numericColumns[i].name} vs ${numericColumns[j].name} (size: ${zField})`,\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // Heatmap for correlation matrix (when multiple numeric columns exist)\n  if (numericColumns.length > 2) {\n    suggestions.push({\n      values: rows,\n      xField: 'field1',\n      yField: 'field2',\n      chartType: 'heatmap',\n      title: 'Correlation Matrix',\n    });\n  }\n\n  return suggestions;\n}\n\nexport function VisualizationManager({ queryResult, queryId }: VisualizationManagerProps) {\n  const suggestions = useMemo(() => analyzeData(queryResult), [queryResult]);\n  const [selectedChart, setSelectedChart] = useState<ChartData | SavedChart | null>(\n    suggestions.length > 0 ? suggestions[0] : null\n  );\n  const [showCustomizer, setShowCustomizer] = useState(false);\n  const [showSaveModal, setShowSaveModal] = useState(false);\n  const [savedCharts, setSavedCharts] = useState<SavedChart[]>(() => loadSavedCharts());\n  const [selectedSavedChart, setSelectedSavedChart] = useState<SavedChart | null>(null);\n\n  const handleSaveChart = (savedChart: SavedChart) => {\n    setSavedCharts(loadSavedCharts());\n    setSelectedSavedChart(savedChart);\n  };\n\n  const handleDeleteChart = (chartId: string) => {\n    if (deleteChart(chartId)) {\n      setSavedCharts(loadSavedCharts());\n      if (selectedSavedChart?.id === chartId) {\n        setSelectedSavedChart(null);\n      }\n    }\n  };\n\n  const handleChartSelect = (chart: ChartData | SavedChart) => {\n    setSelectedChart(chart);\n    if ('id' in chart) {\n      setSelectedSavedChart(chart);\n    } else {\n      setSelectedSavedChart(null);\n    }\n  };\n\n  if (!suggestions.length) {\n    return (\n      <div className=\"text-gray-500 dark:text-gray-400\">\n        No visualizations available for this query result\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Smart Insights */}\n      <div>\n        <h2 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n          Smart Insights\n        </h2>\n        <SmartVisualization \n          queryResult={queryResult}\n          onInsightFound={(insight: DataInsight) => {\n            // Optionally handle insights, e.g., save them or show notifications\n            console.log('Found insight:', insight);\n          }}\n        />\n      </div>\n\n      {/* Manual Visualization */}\n      <div>\n        <h2 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n          Custom Visualizations\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {suggestions.map((chartData, index) => (\n            <button\n              key={`${chartData.chartType}-${index}`}\n              onClick={() => handleChartSelect(chartData)}\n              className={`p-4 rounded-lg border transition-colors ${\n                selectedChart === chartData\n                  ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'\n                  : 'border-light-border dark:border-dark-border hover:bg-light-bg-secondary dark:hover:bg-dark-bg-secondary'\n              }`}\n            >\n              <ChartComponent data={chartData} height={200} />\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n          {suggestions.length} suggested visualizations\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setShowCustomizer(!showCustomizer)}\n            className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-secondary dark:hover:bg-dark-bg-secondary rounded-md transition-colors\"\n          >\n            {showCustomizer ? 'Hide Customizer' : 'Customize Chart'}\n          </button>\n          {selectedChart && (\n            <button\n              onClick={() => setShowSaveModal(true)}\n              className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-md transition-colors\"\n            >\n              Save Chart\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n        <div className={showCustomizer ? 'lg:col-span-2' : 'lg:col-span-3'}>\n          {selectedChart && (\n            <ChartComponent\n              key={`${selectedChart.chartType}-${selectedChart.xField}-${selectedChart.yField}`}\n              data={selectedChart}\n              height={400}\n            />\n          )}\n        </div>\n        \n        {showCustomizer && selectedChart && (\n          <div className=\"lg:col-span-1\">\n            <ChartCustomizer\n              chartData={selectedChart}\n              onUpdate={setSelectedChart}\n            />\n          </div>\n        )}\n      </div>\n\n      {savedCharts.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold text-light-text-primary dark:text-dark-text-primary mb-2\">\n            Saved Charts\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {savedCharts.map((chart) => (\n              <div\n                key={chart.id}\n                className=\"relative group rounded-lg border border-light-border dark:border-dark-border p-4\"\n              >\n                <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDeleteChart(chart.id);\n                    }}\n                    className=\"p-1 text-light-text-secondary dark:text-dark-text-secondary hover:text-red-600 dark:hover:text-red-400\"\n                  >\n                    <span className=\"sr-only\">Delete chart</span>\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </div>\n                <button\n                  onClick={() => handleChartSelect(chart)}\n                  className=\"w-full text-left\"\n                >\n                  <h4 className=\"font-medium text-light-text-primary dark:text-dark-text-primary\">\n                    {chart.name}\n                  </h4>\n                  {chart.description && (\n                    <p className=\"mt-1 text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n                      {chart.description}\n                    </p>\n                  )}\n                  <div className=\"mt-2\">\n                    <ChartComponent data={chart} height={150} />\n                  </div>\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {showSaveModal && selectedChart && (\n        <ChartSaveModal\n          chart={{ ...selectedChart, queryId }}\n          existingChart={selectedSavedChart || undefined}\n          onSave={handleSaveChart}\n          onClose={() => setShowSaveModal(false)}\n        />\n      )}\n    </div>\n  );\n}\n", "import { type ChartType, type ChartData } from './ChartComponent';\n\ninterface ChartCustomizerProps {\n  chartData: ChartData;\n  onUpdate: (updatedData: ChartData) => void;\n}\n\nconst CHART_TYPE_OPTIONS: { value: ChartType; label: string }[] = [\n  { value: 'bar', label: 'Bar Chart' },\n  { value: 'line', label: 'Line Chart' },\n  { value: 'pie', label: 'Pie Chart' },\n  { value: 'scatter', label: 'Scatter Plot' },\n];\n\nconst COLOR_PRESETS = [\n  '#8884d8',\n  '#82ca9d',\n  '#ffc658',\n  '#ff7300',\n  '#0088fe',\n  '#00c49f',\n  '#ffbb28',\n  '#ff8042',\n];\n\nexport function ChartCustomizer({ chartData, onUpdate }: ChartCustomizerProps) {\n  const { chartType, xField, yField, title, color } = chartData;\n\n  const handleChartTypeChange = (newType: ChartType) => {\n    onUpdate({ ...chartData, chartType: newType });\n  };\n\n  const handleColorChange = (newColor: string) => {\n    onUpdate({ ...chartData, color: newColor });\n  };\n\n  const handleTitleChange = (newTitle: string) => {\n    onUpdate({ ...chartData, title: newTitle });\n  };\n\n  return (\n    <div className=\"space-y-4 p-4 bg-light-bg-secondary dark:bg-dark-bg-secondary rounded-lg\">\n      <div>\n        <label className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary mb-1\">\n          Chart Type\n        </label>\n        <div className=\"flex flex-wrap gap-2\">\n          {CHART_TYPE_OPTIONS.map(option => (\n            <button\n              key={option.value}\n              onClick={() => handleChartTypeChange(option.value)}\n              className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${\n                chartType === option.value\n                  ? 'bg-light-bg-tertiary dark:bg-dark-bg-tertiary text-light-text-primary dark:text-dark-text-primary'\n                  : 'bg-light-bg-primary dark:bg-dark-bg-primary text-light-text-secondary dark:text-dark-text-secondary hover:bg-light-bg-secondary dark:hover:bg-dark-bg-secondary'\n              }`}\n            >\n              {option.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary mb-1\">\n          Chart Title\n        </label>\n        <input\n          type=\"text\"\n          value={title || ''}\n          onChange={e => handleTitleChange(e.target.value)}\n          placeholder=\"Enter chart title\"\n          className=\"w-full px-3 py-2 rounded-md bg-light-bg-primary dark:bg-dark-bg-primary border border-light-border dark:border-dark-border text-light-text-primary dark:text-dark-text-primary placeholder-light-text-secondary dark:placeholder-dark-text-secondary focus:outline-none focus:ring-2 focus:ring-primary-500\"\n        />\n      </div>\n\n      <div>\n        <label className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary mb-1\">\n          Color\n        </label>\n        <div className=\"flex flex-wrap gap-2\">\n          {COLOR_PRESETS.map(presetColor => (\n            <button\n              key={presetColor}\n              onClick={() => handleColorChange(presetColor)}\n              className={`w-8 h-8 rounded-full border-2 transition-all ${\n                color === presetColor\n                  ? 'border-primary-500 scale-110'\n                  : 'border-transparent hover:scale-105'\n              }`}\n              style={{ backgroundColor: presetColor }}\n            />\n          ))}\n          <input\n            type=\"color\"\n            value={color}\n            onChange={e => handleColorChange(e.target.value)}\n            className=\"w-8 h-8 rounded-full cursor-pointer\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary mb-1\">\n            X-Axis\n          </label>\n          <div className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n            {xField}\n          </div>\n        </div>\n        <div>\n          <label className=\"block text-sm font-medium text-light-text-primary dark:text-dark-text-primary mb-1\">\n            Y-Axis\n          </label>\n          <div className=\"text-sm text-light-text-secondary dark:text-dark-text-secondary\">\n            {yField}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { useState } from 'react';\nimport type { ChartData } from './ChartComponent';\nimport type { SavedChart } from '../../utils/chartStorage';\nimport { saveChart, updateChart } from '../../utils/chartStorage';\n\ninterface ChartSaveModalProps {\n  chart: ChartData;\n  existingChart?: SavedChart;\n  onSave: (savedChart: SavedChart) => void;\n  onClose: () => void;\n}\n\nexport function ChartSaveModal({\n  chart,\n  existingChart,\n  onSave,\n  onClose,\n}: ChartSaveModalProps) {\n  const [name, setName] = useState(existingChart?.name || '');\n  const [description, setDescription] = useState(existingChart?.description || '');\n  const [error, setError] = useState('');\n\n  const handleSave = () => {\n    if (!name.trim()) {\n      setError('Please enter a name for the chart');\n      return;\n    }\n\n    try {\n      let savedChart: SavedChart;\n      if (existingChart) {\n        savedChart = updateChart(existingChart.id, {\n          ...chart,\n          name,\n          description,\n        })!;\n      } else {\n        savedChart = saveChart({\n          ...chart,\n          name,\n          description,\n        });\n      }\n      onSave(savedChart);\n      onClose();\n    } catch (err) {\n      setError('Failed to save chart. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\n          {existingChart ? 'Update Chart' : 'Save Chart'}\n        </h2>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label\n              htmlFor=\"chart-name\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\"\n            >\n              Chart Name *\n            </label>\n            <input\n              id=\"chart-name\"\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500\"\n              placeholder=\"Enter chart name\"\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"chart-description\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\"\n            >\n              Description\n            </label>\n            <textarea\n              id=\"chart-description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"w-full px-3 py-2 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary-500\"\n              placeholder=\"Enter chart description\"\n              rows={3}\n            />\n          </div>\n\n          {error && (\n            <p className=\"text-sm text-red-600 dark:text-red-400\">{error}</p>\n          )}\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleSave}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-md transition-colors\"\n            >\n              {existingChart ? 'Update' : 'Save'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import type { ChartData } from '../components/DataVisualization';\n\nexport interface SavedChart extends ChartData {\n  id: string;\n  name: string;\n  description?: string;\n  createdAt: string;\n  updatedAt: string;\n  queryId?: string;\n}\n\nexport interface ChartStorage {\n  charts: SavedChart[];\n  version: number;\n}\n\nconst STORAGE_KEY = 'data-studio-saved-charts';\nconst CURRENT_VERSION = 1;\n\n/**\n * Load saved charts from local storage\n */\nexport function loadSavedCharts(): SavedChart[] {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (!stored) {\n      return [];\n    }\n\n    const data = JSON.parse(stored) as ChartStorage;\n    if (data.version !== CURRENT_VERSION) {\n      // Handle version migrations here if needed\n      return [];\n    }\n\n    return data.charts;\n  } catch (error) {\n    console.error('Error loading saved charts:', error);\n    return [];\n  }\n}\n\n/**\n * Save a chart to local storage\n */\nexport function saveChart(chart: Omit<SavedChart, 'id' | 'createdAt' | 'updatedAt'>): SavedChart {\n  const charts = loadSavedCharts();\n  const now = new Date().toISOString();\n  \n  const newChart: SavedChart = {\n    ...chart,\n    id: crypto.randomUUID(),\n    createdAt: now,\n    updatedAt: now,\n  };\n\n  const updatedCharts = [...charts, newChart];\n  \n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify({\n      charts: updatedCharts,\n      version: CURRENT_VERSION,\n    }));\n  } catch (error) {\n    console.error('Error saving chart:', error);\n  }\n\n  return newChart;\n}\n\n/**\n * Update an existing saved chart\n */\nexport function updateChart(chartId: string, updates: Partial<SavedChart>): SavedChart | null {\n  const charts = loadSavedCharts();\n  const chartIndex = charts.findIndex(c => c.id === chartId);\n  \n  if (chartIndex === -1) {\n    return null;\n  }\n\n  const updatedChart: SavedChart = {\n    ...charts[chartIndex],\n    ...updates,\n    id: chartId, // Ensure ID cannot be changed\n    updatedAt: new Date().toISOString(),\n  };\n\n  charts[chartIndex] = updatedChart;\n\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify({\n      charts: charts,\n      version: CURRENT_VERSION,\n    }));\n  } catch (error) {\n    console.error('Error updating chart:', error);\n    return null;\n  }\n\n  return updatedChart;\n}\n\n/**\n * Delete a saved chart\n */\nexport function deleteChart(chartId: string): boolean {\n  const charts = loadSavedCharts();\n  const filteredCharts = charts.filter(c => c.id !== chartId);\n\n  if (filteredCharts.length === charts.length) {\n    return false;\n  }\n\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify({\n      charts: filteredCharts,\n      version: CURRENT_VERSION,\n    }));\n    return true;\n  } catch (error) {\n    console.error('Error deleting chart:', error);\n    return false;\n  }\n}\n", "import { useMemo } from 'react';\nimport type { QueryResult } from './VisualizationManager';\nimport { ChartComponent, type ChartData, type ChartType } from './ChartComponent';\n\ninterface SmartVisualizationProps {\n  queryResult: QueryResult;\n  onInsightFound?: (insight: DataInsight) => void;\n}\n\nexport interface DataInsight {\n  type: 'anomaly' | 'correlation' | 'trend' | 'distribution';\n  description: string;\n  confidence: number;\n  visualization?: ChartData;\n}\n\ninterface ColumnProfile {\n  name: string;\n  type: string;\n  uniqueCount: number;\n  nullCount: number;\n  min?: number | string;\n  max?: number | string;\n  mean?: number;\n  median?: number;\n  mode?: any;\n  distribution?: Record<string, number>;\n  outliers?: number[];\n}\n\nfunction profileData(queryResult: QueryResult): ColumnProfile[] {\n  const { columns, rows } = queryResult;\n  \n  return columns.map(column => {\n    const values = rows.map(row => row[column.name]).filter((val): val is number | string => val != null);\n    const profile: ColumnProfile = {\n      name: column.name,\n      type: column.type,\n      uniqueCount: new Set(values).size,\n      nullCount: rows.length - values.length,\n    };\n\n    if (isNumeric(column.type)) {\n      const numericValues = values.map(val => typeof val === 'number' ? val : Number(val));\n      profile.min = Math.min(...numericValues);\n      profile.max = Math.max(...numericValues);\n      profile.mean = numericValues.reduce((a, b) => a + b, 0) / numericValues.length;\n      \n      // Calculate outliers using IQR method\n      const sorted = [...numericValues].sort((a, b) => a - b);\n      const q1 = sorted[Math.floor(sorted.length * 0.25)];\n      const q3 = sorted[Math.floor(sorted.length * 0.75)];\n      const iqr = q3 - q1;\n      profile.outliers = numericValues.filter(v => v < q1 - 1.5 * iqr || v > q3 + 1.5 * iqr);\n    } else if (isDateType(column.type)) {\n      const dateValues = values.map(v => new Date(v));\n      profile.min = dateValues.reduce((min, curr) => curr < new Date(min) ? curr.toISOString() : min.toString(), dateValues[0].toISOString());\n      profile.max = dateValues.reduce((max, curr) => curr > new Date(max) ? curr.toISOString() : max.toString(), dateValues[0].toISOString());\n    } else {\n      // Categorical data\n      profile.distribution = values.reduce((acc, val) => {\n        acc[val.toString()] = (acc[val.toString()] || 0) + 1;\n        return acc;\n      }, {} as Record<string, number>);\n      \n      // Find mode\n      profile.mode = Object.entries(profile.distribution)\n        .reduce((a, b) => a[1] > b[1] ? a : b)[0];\n    }\n\n    return profile;\n  });\n}\n\nfunction findInsights(profiles: ColumnProfile[], queryResult: QueryResult): DataInsight[] {\n  const insights: DataInsight[] = [];\n  const { rows } = queryResult;\n\n  // Find anomalies in numeric columns\n  profiles.forEach(profile => {\n    if (profile.outliers && profile.outliers.length > 0) {\n      insights.push({\n        type: 'anomaly',\n        description: `Found ${profile.outliers.length} outliers in ${profile.name}`,\n        confidence: 0.8,\n        visualization: {\n          chartType: 'scatter',\n          xField: profile.name,\n          yField: 'count',\n          values: profile.outliers.map(value => ({ [profile.name]: value, count: 1 })),\n          title: `Outliers in ${profile.name}`\n        }\n      });\n    }\n  });\n\n  // Find correlations between numeric columns\n  const numericProfiles = profiles.filter(p => isNumeric(p.type));\n  for (let i = 0; i < numericProfiles.length; i++) {\n    for (let j = i + 1; j < numericProfiles.length; j++) {\n      const col1 = numericProfiles[i];\n      const col2 = numericProfiles[j];\n      const correlation = calculateCorrelation(\n        rows.map(r => Number(r[col1.name])),\n        rows.map(r => Number(r[col2.name]))\n      );\n      \n      if (Math.abs(correlation) > 0.7) {\n        insights.push({\n          type: 'correlation',\n          description: `Strong ${correlation > 0 ? 'positive' : 'negative'} correlation (${correlation.toFixed(2)}) between ${col1.name} and ${col2.name}`,\n          confidence: Math.abs(correlation),\n          visualization: {\n            chartType: 'scatter',\n            xField: col1.name,\n            yField: col2.name,\n            values: rows,\n            title: `Correlation between ${col1.name} and ${col2.name}`\n          }\n        });\n      }\n    }\n  }\n\n  // Find trends in time series data\n  const dateProfiles = profiles.filter(p => isDateType(p.type));\n  const numericColumns = profiles.filter(p => isNumeric(p.type));\n  \n  dateProfiles.forEach(dateProfile => {\n    numericColumns.forEach(numericProfile => {\n      const values = rows\n        .map(row => ({\n          date: new Date(row[dateProfile.name]),\n          value: Number(row[numericProfile.name])\n        }))\n        .filter(v => !isNaN(v.value) && !isNaN(v.date.getTime()))\n        .sort((a, b) => a.date.getTime() - b.date.getTime());\n\n      if (values.length < 2) return;\n\n      // Simple trend detection using linear regression\n      const xValues = values.map((_, i) => i);\n      const yValues = values.map(v => v.value);\n      const correlation = calculateCorrelation(xValues, yValues);\n      \n      if (Math.abs(correlation) > 0.5) {\n        insights.push({\n          type: 'trend',\n          description: `${correlation > 0 ? 'Upward' : 'Downward'} trend detected in ${numericProfile.name} over time`,\n          confidence: Math.abs(correlation),\n          visualization: {\n            chartType: 'line',\n            xField: dateProfile.name,\n            yField: numericProfile.name,\n            values: rows,\n            title: `Trend in ${numericProfile.name} over time`\n          }\n        });\n      }\n    });\n  });\n\n  // Find interesting distributions\n  profiles.forEach(profile => {\n    if (profile.distribution) {\n      const values = Object.entries(profile.distribution);\n      if (values.length > 1 && values.length <= 10) {\n        insights.push({\n          type: 'distribution',\n          description: `Distribution analysis of ${profile.name}`,\n          confidence: 0.9,\n          visualization: {\n            chartType: 'pie',\n            xField: profile.name,\n            yField: 'count',\n            values: values.map(([key, count]) => ({ [profile.name]: key, count })),\n            title: `Distribution of ${profile.name}`\n          }\n        });\n      }\n    }\n  });\n\n  return insights;\n}\n\nfunction calculateCorrelation(x: number[], y: number[]): number {\n  const n = x.length;\n  const sumX = x.reduce((a, b) => a + b, 0);\n  const sumY = y.reduce((a, b) => a + b, 0);\n  const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n  const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\n  const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);\n\n  const numerator = n * sumXY - sumX * sumY;\n  const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));\n\n  return denominator === 0 ? 0 : numerator / denominator;\n}\n\nfunction isNumeric(type: string): boolean {\n  return ['integer', 'decimal', 'float', 'double', 'numeric', 'real'].includes(type.toLowerCase());\n}\n\nfunction isDateType(type: string): boolean {\n  return ['date', 'timestamp', 'timestamptz'].includes(type.toLowerCase());\n}\n\nexport function SmartVisualization({ queryResult, onInsightFound }: SmartVisualizationProps) {\n  const profiles = useMemo(() => profileData(queryResult), [queryResult]);\n  const insights = useMemo(() => findInsights(profiles, queryResult), [profiles, queryResult]);\n\n  // Notify parent component of insights\n  useMemo(() => {\n    insights.forEach(insight => onInsightFound?.(insight));\n  }, [insights, onInsightFound]);\n\n  return (\n    <div className=\"space-y-8\">\n      {insights.map((insight, index) => (\n        <div key={index} className=\"bg-white dark:bg-gray-800 shadow rounded-lg p-6\">\n          <div className=\"mb-4\">\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n              {insight.type.charAt(0).toUpperCase() + insight.type.slice(1)} Insight\n            </h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              {insight.description}\n            </p>\n            <div className=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">\n              Confidence: {(insight.confidence * 100).toFixed(1)}%\n            </div>\n          </div>\n          {insight.visualization && (\n            <div className=\"h-80\">\n              <ChartComponent data={insight.visualization} height={320} />\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n", "import { json, redirect } from '@remix-run/node';\nimport type { ActionFunctionArgs } from '@remix-run/node';\nimport { getSession, commitSession } from '~/services/session.server';\nimport { db } from '~/lib/db/db.server';\nimport { databaseConnections } from '~/lib/db/schema/connections';\nimport { eq } from 'drizzle-orm';\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const session = await getSession(request.headers.get('Cookie'));\n  const formData = await request.formData();\n  const connectionId = formData.get('connectionId') as string;\n\n  if (!connectionId) {\n    return json({ error: 'Connection ID is required' }, { status: 400 });\n  }\n\n  // Verify connection exists and is not archived\n  const connection = await db.query.databaseConnections.findFirst({\n    where: eq(databaseConnections.id, connectionId),\n  });\n\n  if (!connection || connection.archived) {\n    return json({ error: 'Invalid connection ID' }, { status: 400 });\n  }\n\n  // Store the active connection ID in the session\n  session.set('activeConnectionId', connectionId);\n\n  // Redirect back to the previous page with the new session\n  return redirect(request.headers.get('Referer') || '/', {\n    headers: {\n      'Set-Cookie': await commitSession(session),\n    },\n  });\n}\n", "import { json } from '@remix-run/node';\nimport type { LoaderFunctionArgs } from '@remix-run/node';\nimport { db } from '~/lib/db/db.server';\nimport { databaseConnections } from '~/lib/db/schema/connections';\nimport { eq } from 'drizzle-orm';\nimport { getSession } from '~/services/session.server';\n\n// Key for storing active connection in session\nconst ACTIVE_CONNECTION_KEY = 'activeConnectionId';\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const session = await getSession(request.headers.get('Cookie'));\n  const activeConnectionId = session.get(ACTIVE_CONNECTION_KEY);\n\n  // Get active connection details if exists\n  let activeConnection = null;\n  if (activeConnectionId) {\n    activeConnection = await db.query.databaseConnections.findFirst({\n      where: eq(databaseConnections.id, activeConnectionId),\n    });\n  }\n\n  // Get all available connections\n  const connections = await db.query.databaseConnections.findMany({\n    where: eq(databaseConnections.archived, false),\n    orderBy: (connections, { desc }) => [desc(connections.updatedAt)],\n  });\n\n  return json({\n    connections,\n    activeConnection,\n  });\n}\n\nexport type ConnectionState = Awaited<ReturnType<typeof loader>>;\n", "import type { ActionFunctionArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { register } from \"../lib/auth/auth.server\";\n\ninterface ActionErrors {\n  email?: string;\n  password?: string;\n  name?: string;\n  signup?: string;\n}\n\ninterface ActionData {\n  errors?: ActionErrors;\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const confirmPassword = formData.get('confirmPassword');\n  const name = formData.get('name');\n  const redirectTo = formData.get('redirectTo') || '/';\n\n  if (\n    typeof email !== 'string' ||\n    typeof password !== 'string' ||\n    typeof confirmPassword !== 'string' ||\n    typeof name !== 'string' ||\n    typeof redirectTo !== 'string'\n  ) {\n    return json<ActionData>({ \n      errors: { signup: 'Invalid form submission' } \n    }, { status: 400 });\n  }\n\n  if (password !== confirmPassword) {\n    return json<ActionData>({ \n      errors: { password: 'Passwords do not match' } \n    });\n  }\n\n  return register(request, formData);\n}\n\nexport default function Register() {\n  const actionData = useActionData<ActionData>();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') || '/';\n\n  return (\n    <>\n      <h2 className=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\">\n        Create your account\n      </h2>\n      \n      <div className=\"mt-8\">\n        <Form method=\"post\" className=\"space-y-6\">\n          <input \n            type=\"hidden\" \n            name=\"redirectTo\" \n            value={redirectTo} \n          />\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm\"\n              />\n              {actionData && actionData.errors?.email && (\n                <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.email}</p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n              Full name\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                autoComplete=\"name\"\n                required\n                className=\"block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm\"\n              />\n              {actionData?.errors?.name && (\n                <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.name}</p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                required\n                className=\"block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n              Confirm Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                required\n                className=\"block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm\"\n              />\n              {actionData?.errors?.password && (\n                <p className=\"mt-2 text-sm text-red-600\">{actionData.errors.password}</p>\n              )}\n            </div>\n          </div>\n\n          {actionData?.errors?.signup && (\n            <div className=\"rounded-md bg-red-50 p-4\">\n              <p className=\"text-sm text-red-600\">{actionData.errors.signup}</p>\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"flex w-full justify-center rounded-md border border-transparent bg-cyan-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2\"\n            >\n              Sign up\n            </button>\n          </div>\n        </Form>\n\n        <div className=\"mt-6\">\n          <div className=\"relative\">\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-2 text-gray-600\">Already have an account?</span>\n            </div>\n          </div>\n\n          <div className=\"mt-2 text-center\">\n            <Link\n              to={{\n                pathname: '/login',\n                search: searchParams.toString(),\n              }}\n              className=\"font-medium text-cyan-600 hover:text-cyan-500\"\n            >\n              Sign in instead\n            </Link>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n", "import { json, type ActionFunctionArgs } from '@remix-run/node';\nimport { z } from 'zod';\nimport { db } from '../lib/db/db.server';\nimport { ConnectionConfig, databaseConnections, NewDatabaseConnection, organizationMembers } from '../lib/db/schema';\nimport { requireUser } from '../lib/auth/session.server';\nimport { eq } from 'drizzle-orm';\nimport { ConnectionManager } from '../lib/db/connection-manager.server';\n\nconst connectionSchema = z.object({\n  name: z.string().min(1),\n  type: z.enum([\"POSTGRES\", \"MYSQL\", \"SQLITE\", \"MSSQL\", \"ORACLE\", \"MONGODB\", \"REDIS\"]),\n  credentials: z.object({\n    host: z.string().optional(),\n    port: z.union([z.string(), z.number()]).optional(),\n    database: z.string().optional(),\n    user: z.string().optional(),\n    password: z.string().optional(),\n    ssl: z.boolean().optional(),\n    filepath: z.string().optional(),\n  }),\n});\n\nconst connectionTestSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  type: z.enum([\"POSTGRES\", \"MYSQL\", \"SQLITE\", \"MSSQL\", \"ORACLE\", \"MONGODB\", \"REDIS\"]),\n  host: z.string().optional(),\n  port: z.union([z.string(), z.number()]).optional(),\n  database: z.string().optional(),\n  username: z.string().optional(),\n  password: z.string().optional(),\n  ssl: z.boolean().optional(),\n  filepath: z.string().optional(),\n});\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n\n  switch (request.method) {\n    case 'POST': {\n      if (request.headers.get('is-test') === 'true') {\n        try {\n          // Parse the connection data\n          const res = await request.json();\n          const data = connectionTestSchema.parse(res);\n  \n          // Normalize port to number if it's a string\n          const port = typeof data.port === 'string' ? parseInt(data.port, 10) : data.port;\n  \n          // Prepare connection configuration based on type\n          const connectionConfig = {\n            type: data.type.toLowerCase(),\n            config: {\n              type: data.type.toLowerCase(),\n              host: data.host,\n              port: port,\n              database: data.database,\n              username: data.username,\n              password: data.password,\n              ssl: data.ssl,\n              filepath: data.filepath,\n            },\n          };\n  \n          // Test the connection using ConnectionManager\n          const manager = ConnectionManager.getInstance();\n          await manager.testConnection({\n            type: connectionConfig.type,\n            config: connectionConfig.config as ConnectionConfig,\n          });\n  \n          return json({ success: true, message: \"Connection successful\" });\n        } catch (error) {\n          console.error(\"Connection test error:\", error);\n          return json({ \n            error: error instanceof Error ? error.message : \"Failed to test connection\" \n          }, { status: 400 });\n        }\n      }\n\n      const data = connectionSchema.parse(await request.json());\n      \n      // Get organization ID from the user's active organization\n      const orgMember = await db.query.organizationMembers.findFirst({\n        where: eq(organizationMembers.userId, user.id),\n      });\n\n      if (!orgMember) {\n        return json({ error: 'No organization found' }, { status: 404 });\n      }\n\n      const newConnection: NewDatabaseConnection = {\n        name: data.name,\n        type: data.type,\n        organizationId: orgMember.organizationId,\n        config: { type: data.type, ...data.credentials } as ConnectionConfig,\n        createdById: user.id,\n      };\n      // Create the connection\n      const [connection] = await db.insert(databaseConnections)\n        .values(newConnection)\n        .returning();\n\n      // Test the connection\n      try {\n        const manager = ConnectionManager.getInstance();\n        await manager.getConnection(connection.id);\n      } catch (error) {\n        // If connection fails, delete the record\n        await db.delete(databaseConnections)\n          .where(eq(databaseConnections.id, connection.id));\n        \n        return json({ \n          error: error instanceof Error ? error.message : \"Connection test failed\" \n        }, { status: 400 });\n      }\n\n      return json(connection);\n    }\n\n    case 'PUT': {\n      const updateSchema = z.object({ \n        id: z.string(),\n        name: z.string().min(1),\n        credentials: z.object({\n          host: z.string().optional(),\n          port: z.union([z.string(), z.number()]).optional(),\n          database: z.string().optional(),\n          user: z.string().optional(),\n          password: z.string().optional(),\n          ssl: z.boolean().optional(),\n          filepath: z.string().optional(),\n        }),\n      });\n      \n      const { id, ...updateData } = updateSchema.parse(await request.json());\n\n      // Verify user has access to the connection\n      const connection = await db.query.databaseConnections.findFirst({\n        where: eq(databaseConnections.id, id),\n        with: {\n          organization: {\n            with: {\n              members: {\n                where: eq(organizationMembers.userId, user.id),\n              },\n            },\n          },\n        },\n      });\n\n      if (!connection || !connection.organization.members.length) {\n        return json({ error: 'Connection not found' }, { status: 404 });\n      }\n\n      // Update the connection\n      const [updated] = await db.update(databaseConnections)\n        .set({\n          name: updateData.name,\n          config: { ...connection.config, ...updateData.credentials } as ConnectionConfig,\n          updatedAt: new Date(),\n        })\n        .where(eq(databaseConnections.id, id))\n        .returning();\n\n      return json(updated);\n    }\n\n    case 'DELETE': {\n      const deleteSchema = z.object({ id: z.string() });\n      const { id } = deleteSchema.parse(await request.json());\n\n      // Verify user has access to the connection\n      const connection = await db.query.databaseConnections.findFirst({\n        where: eq(databaseConnections.id, id),\n        with: {\n          organization: {\n            with: {\n              members: {\n                where: eq(organizationMembers.userId, user.id),\n              },\n            },\n          },\n        },\n      });\n\n      if (!connection || !connection.organization.members.length) {\n        return json({ error: 'Connection not found' }, { status: 404 });\n      }\n\n      // Close the connection if it's active\n      const manager = ConnectionManager.getInstance();\n      await manager.closeConnection(id);\n\n      // Delete the connection\n      await db.delete(databaseConnections)\n        .where(eq(databaseConnections.id, id));\n\n      return json({ success: true });\n    }\n\n    default:\n      return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport { Outlet, useLoaderData } from \"@remix-run/react\";\nimport { getUser } from \"../lib/auth/session.server\";\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\nimport AuthenticatedLayout from \"../components/AuthenticatedLayout\";\nimport type { User } from \"../lib/auth/types\";\nimport { listConnections } from \"../lib/connections/config.server\";\nimport type { DatabaseConnection } from \"../lib/connections/config.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await getUser(request);\n\n  if (!user) {\n    const url = new URL(request.url);\n    return redirect(`/login?redirectTo=${encodeURIComponent(url.pathname)}`);\n  }\n\n  // If user has no organizations, redirect to create one\n  if (user.organizations.length === 0) {\n    return redirect(\"/organizations/new\");\n  }\n  // Get connections for the current organization\n  const connections = await listConnections(user.currentOrganization);\n  return json({ user, connections });\n}\n\ntype LoaderData = {\n  user: User;\n  connections: DatabaseConnection[];\n};\n\nexport default function AuthenticatedRoot() {\n  const { user, connections } = useLoaderData<LoaderData>();\n  \n  return (\n    <AuthenticatedLayout user={user as unknown as User} connections={connections as unknown as DatabaseConnection[]}>\n      <Outlet />\n    </AuthenticatedLayout>\n  );\n}\n", "import { Link, useLocation } from \"@remix-run/react\";\nimport { Menu, Transition } from \"@headlessui/react\";\nimport { Fragment } from \"react\";\nimport { TableCellsIcon as TableIcon, CircleStackIcon as DatabaseIcon, UserCircleIcon, PlusIcon } from \"@heroicons/react/24/outline\";\nimport { Form } from \"@remix-run/react\";\nimport { clsx } from \"clsx\";\nimport type { User } from \"../lib/auth/types\";\nimport type { DatabaseConnection } from \"../lib/connections/config.server\";\nimport { CreateOrgDialog, CreateConnectionDialog } from \"./modals/AuthModals\";\n\ninterface AuthenticatedLayoutProps {\n  user: User;\n  connections: DatabaseConnection[];\n  children: React.ReactNode;\n}\n\nexport default function AuthenticatedLayout({ user, connections, children }: AuthenticatedLayoutProps) {\n  const location = useLocation();\n\n  const navigation = [\n    { name: 'Dashboard', href: '/dashboard', icon: TableIcon },\n    { name: 'Tables', href: '/tables', icon: TableIcon },\n    { name: 'Databases', href: '/databases', icon: DatabaseIcon },\n    { name: 'Run Query', href: '/query', icon: DatabaseIcon },\n  ];\n\n  const userNavigation = [\n    { name: 'Your Profile', href: '/profile' },\n    { name: 'Organizations', href: '/organizations' },\n    { name: 'Settings', href: '/settings' },\n  ];\n\n  // Show create organization message if user has no organizations\n  if (user.organizations.length === 0) {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center bg-light-bg-secondary dark:bg-dark-bg-primary p-4\">\n        <div className=\"w-full max-w-md text-center\">\n          <h1 className=\"text-2xl font-bold text-light-text-primary dark:text-dark-text-primary mb-4\">\n            Welcome to Data Studio\n          </h1>\n          <p className=\"text-light-text-secondary dark:text-dark-text-secondary mb-8\">\n            Create your first organization to get started\n          </p>\n          <CreateOrgDialog />\n        </div>\n      </div>\n    );\n  }\n\n  // Show create connection message if user has no connections\n  if (connections.length === 0) {\n    return (\n      <div className=\"flex min-h-screen flex-col items-center justify-center bg-light-bg-secondary dark:bg-dark-bg-primary p-4\">\n        <div className=\"w-full max-w-md text-center\">\n          <h1 className=\"text-2xl font-bold text-light-text-primary dark:text-dark-text-primary mb-4\">\n            Connect Your First Database\n          </h1>\n          <p className=\"text-light-text-secondary dark:text-dark-text-secondary mb-8\">\n            Add your first database connection to start exploring your data\n          </p>\n          <CreateConnectionDialog />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-light-bg-secondary dark:bg-dark-bg-primary\">\n      {/* Sidebar */}\n      <div className=\"w-[297px] p-4\">\n        <div className=\"flex h-full flex-col rounded-2xl bg-light-bg-primary dark:bg-dark-bg-secondary shadow-lg\">\n          <div className=\"flex flex-1 flex-col overflow-y-auto pt-5 pb-4\">\n            <div className=\"flex flex-shrink-0 items-center px-4\">\n              <h1 className=\"text-xl font-bold text-light-text-primary dark:text-dark-text-primary\">Data Studio</h1>\n            </div>\n            <nav className=\"mt-5 flex-1 space-y-1 px-2\">\n              {navigation.map((item) => {\n                const isActive = location.pathname === item.href;\n                return (\n                  <Link\n                    key={item.name}\n                    to={item.href}\n                    className={clsx(\n                      isActive\n                        ? 'bg-light-bg-tertiary dark:bg-dark-bg-tertiary text-light-text-primary dark:text-dark-text-primary'\n                        : 'text-light-text-secondary dark:text-dark-text-secondary hover:bg-light-bg-secondary dark:hover:bg-dark-bg-tertiary',\n                      'group flex items-center px-3 py-2 text-sm font-medium rounded-xl transition-colors'\n                    )}\n                  >\n                    <item.icon\n                      className={clsx(\n                        isActive\n                          ? 'text-light-text-primary dark:text-dark-text-primary'\n                          : 'text-light-text-secondary dark:text-dark-text-secondary group-hover:text-light-text-primary dark:group-hover:text-dark-text-primary',\n                        'mr-3 flex-shrink-0 h-5 w-5'\n                      )}\n                      aria-hidden=\"true\"\n                    />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          <div className=\"flex flex-shrink-0 border-t border-light-border dark:border-dark-border p-4 space-y-3 flex-col\">\n            <Menu as=\"div\" className=\"relative\">\n              <Menu.Button className=\"flex items-center w-full px-4 py-2 text-sm font-medium text-light-text-primary dark:text-dark-text-primary hover:bg-light-bg-tertiary dark:hover:bg-dark-bg-tertiary rounded-lg transition-colors\">\n                <UserCircleIcon className=\"h-5 w-5 mr-2\" />\n                <span className=\"flex-1 text-left\">{user.name}</span>\n              </Menu.Button>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute left-0 right-0 mt-2 origin-top-right rounded-md bg-white dark:bg-dark-bg-tertiary shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                  <div className=\"py-1\">\n                    {userNavigation.map((item) => (\n                      <Menu.Item key={item.name}>\n                        {({ active }) => (\n                          <Link\n                            to={item.href}\n                            className={clsx(\n                              active ? 'bg-gray-100 dark:bg-dark-bg-secondary' : '',\n                              'block px-4 py-2 text-sm text-gray-700 dark:text-dark-text-primary'\n                            )}\n                          >\n                            {item.name}\n                          </Link>\n                        )}\n                      </Menu.Item>\n                    ))}\n                    <Menu.Item>\n                      {({ active }) => (\n                        <Form action=\"/logout\" method=\"post\">\n                          <button\n                            type=\"submit\"\n                            className={clsx(\n                              active ? 'bg-gray-100 dark:bg-dark-bg-secondary' : '',\n                              'block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-dark-text-primary'\n                            )}\n                          >\n                            Sign out\n                          </button>\n                        </Form>\n                      )}\n                    </Menu.Item>\n                  </div>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 p-4\">\n        <div className=\"overflow-auto p-4 flex h-full flex-col rounded-2xl bg-light-bg-primary dark:bg-dark-bg-secondary shadow-lg\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n", "import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"../ui/dialog\";\nimport { Button } from \"../ui/button\";\nimport { PlusIcon } from \"@heroicons/react/24/outline\";\nimport { useFetcher } from \"@remix-run/react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Form as ShadForm,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"../ui/form\";\nimport { Input } from \"../ui/input\";\nimport { Textarea } from \"../ui/textarea\";\nimport { useState, useEffect } from \"react\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"../ui/alert\";\nimport { CheckCircle2 } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ExclamationCircleIcon } from \"@heroicons/react/24/solid\";\n\nconst CONNECTION_TYPES = [\n  \"POSTGRES\", \n  \"MYSQL\", \n  \"SQLITE\", \n  \"MSSQL\", \n  \"ORACLE\", \n  \"MONGODB\", \n  \"REDIS\"\n] as const;\n\nconst BaseConnectionSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100),\n  type: z.enum(CONNECTION_TYPES),\n});\n\nconst StandardConnectionSchema = BaseConnectionSchema.extend({\n  type: z.enum([\"POSTGRES\", \"MYSQL\", \"MSSQL\", \"ORACLE\"]),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.coerce.number().min(1, \"Port is required\"),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.boolean().optional().default(false),\n});\n\nconst MongoDBConnectionSchema = BaseConnectionSchema.extend({\n  type: z.literal(\"MONGODB\"),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.coerce.number().min(1, \"Port is required\"),\n  database: z.string().min(1, \"Database name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  ssl: z.boolean().optional().default(false),\n  authSource: z.string().optional(),\n  replicaSet: z.string().optional(),\n});\n\nconst RedisConnectionSchema = BaseConnectionSchema.extend({\n  type: z.literal(\"REDIS\"),\n  host: z.string().min(1, \"Host is required\"),\n  port: z.coerce.number().min(1, \"Port is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  database: z.coerce.number().optional(),\n  ssl: z.boolean().optional().default(false),\n});\n\nconst SQLiteConnectionSchema = BaseConnectionSchema.extend({\n  type: z.literal(\"SQLITE\"),\n  filepath: z.string().min(1, \"File path is required\"),\n});\n\nconst CreateConnectionSchema = z.discriminatedUnion(\"type\", [\n  StandardConnectionSchema,\n  MongoDBConnectionSchema,\n  RedisConnectionSchema,\n  SQLiteConnectionSchema,\n]);\n\ntype ConnectionFormSchema = z.infer<typeof CreateConnectionSchema>;\n\nexport function CreateConnectionDialog() {\n  const [open, setOpen] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [testing, setTesting] = useState(false);\n  const [connectionSuccess, setConnectionSuccess] = useState(false);\n  const fetcher = useFetcher<{ connection?: any; error?: string }>();\n  \n  const form = useForm<ConnectionFormSchema>({\n    resolver: zodResolver(CreateConnectionSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"POSTGRES\",\n      host: \"localhost\",\n      port: Number(5432),\n      database: \"\",\n      username: \"\",\n      password: \"\",\n      ssl: false,\n    },\n  });\n\n  async function testConnection(data: ConnectionFormSchema) {\n    setTesting(true);\n    setError(null);\n    setConnectionSuccess(false);\n    \n    try {\n      const response = await fetch(\"/api/connections\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"is-test\": \"true\",\n        },\n        body: JSON.stringify({\n          ...data,\n          // Normalize port to string\n          port: String(data['port' as keyof ConnectionFormSchema]),\n        }),\n      });\n      \n      const result = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(result.error || \"Failed to test connection\");\n      }\n      \n      setConnectionSuccess(true);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"Failed to test connection\");\n    } finally {\n      setTesting(false);\n    }\n  }\n\n  function onSubmit(data: ConnectionFormSchema) {\n    setError(null);\n    fetcher.submit(\n      { \n        ...data,\n        // Convert port to number to ensure proper serialization\n        port: Number(data['port' as keyof ConnectionFormSchema]),\n      }, \n      {\n        method: \"POST\",\n        action: \"/connections/new\",\n        encType: \"application/x-www-form-urlencoded\",\n      }\n    );\n  }\n\n  // Effect to handle fetcher state and errors\n  useEffect(() => {\n    if (fetcher.state === \"idle\") {\n      if (fetcher.data?.error) {\n        // Set error if the server returns an error\n        setError(fetcher.data.error);\n      } else if (fetcher.data?.connection) {\n        // Successfully created connection\n        setOpen(false);\n        setConnectionSuccess(true);\n      }\n    }\n  }, [fetcher.state, fetcher.data]);\n\n  // Watch form changes to reset connection success\n  useEffect(() => {\n    // Reset connection success if form changes or error is present\n    if (error || Object.keys(form.formState.errors).length > 0) {\n      setConnectionSuccess(false);\n    }\n  }, [\n    form.formState.isDirty, \n    form.formState.errors, \n    error, \n    setConnectionSuccess\n  ]);\n\n  const connectionType = form.watch(\"type\");\n\n  return (\n    <Dialog \n      open={open} \n      onOpenChange={(isOpen) => {\n        setOpen(isOpen);\n        if (!isOpen) {\n          // Reset states when dialog is closed\n          setError(null);\n          setConnectionSuccess(false);\n        }\n      }}\n    >\n      <DialogTrigger asChild>\n        <Button className=\"inline-flex items-center\">\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Add Connection\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px] bg-light-bg-primary dark:bg-dark-bg-secondary\">\n        <DialogHeader>\n          <DialogTitle className=\"text-light-text-primary dark:text-dark-text-primary\">\n            Add New Database Connection\n          </DialogTitle>\n        </DialogHeader>\n        {error && (\n          <Alert variant=\"destructive\" className=\"flex items-center space-x-2\">\n             <div className=\"flex items-center\">\n              <ExclamationCircleIcon className=\"h-5 w-5 mr-2\" />\n              <AlertDescription>{error}</AlertDescription>\n            </div>\n          </Alert>\n        )}\n        <AnimatePresence>\n          {connectionSuccess && (\n            <motion.div\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Alert \n                variant=\"default\" \n                className=\"flex items-center space-x-2\"\n              >\n                <div className=\"flex items-center\">\n                  <CheckCircle2 className=\"h-5 w-5 mr-2 text-green-500\" />\n                  <AlertDescription className=\"text-green-700\">\n                    Connected!\n                  </AlertDescription>\n                </div>\n              </Alert>\n            </motion.div>\n          )}\n        </AnimatePresence>\n        <ShadForm {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Connection Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Database Type</FormLabel>\n                  <FormControl>\n                    <select\n                      {...field}\n                      className=\"w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                    >\n                      {CONNECTION_TYPES.map(type => (\n                        <option key={type} value={type}>{type}</option>\n                      ))}\n                    </select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {(connectionType === \"POSTGRES\" || \n              connectionType === \"MYSQL\" || \n              connectionType === \"MSSQL\" || \n              connectionType === \"ORACLE\" ||\n              connectionType === \"MONGODB\" ||\n              connectionType === \"REDIS\") && (\n              <>\n                <FormField\n                  control={form.control}\n                  name=\"host\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Host</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"port\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Port</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          {...field} \n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"database\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Database Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"ssl\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <input \n                          type=\"checkbox\" \n                          checked={field.value} \n                          onChange={(e) => field.onChange(e.target.checked)} \n                          className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n                        />\n                      </FormControl>\n                      <FormLabel>Use SSL</FormLabel>\n                    </FormItem>\n                  )}\n                />\n              </>\n            )}\n\n            {connectionType === \"SQLITE\" && (\n              <FormField\n                control={form.control}\n                name=\"filepath\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>File Path</FormLabel>\n                    <FormControl>\n                      <Input {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"flex space-x-2\">\n              <Button \n                type=\"button\" \n                variant=\"secondary\" \n                onClick={() => form.handleSubmit(testConnection)()}\n                disabled={testing}\n              >\n                {testing ? \"Testing...\" : \"Test Connection\"}\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1\"\n                disabled={fetcher.state === \"submitting\"}\n              >\n                {fetcher.state === \"submitting\" ? \"Creating...\" : \"Create Connection\"}\n              </Button>\n            </div>\n          </form>\n        </ShadForm>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport function CreateOrgDialog() {\n  const [open, setOpen] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const fetcher = useFetcher();\n\n  const form = useForm({\n    resolver: zodResolver(\n      z.object({\n        name: z.string().min(1, \"Organization name is required\"),\n        description: z.string().optional(),\n      })\n    ),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  function onSubmit(data: { name: string; description?: string }) {\n    fetcher.submit(data, {\n      method: \"POST\",\n      action: \"/organizations/new\",\n    });\n    setOpen(false);\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"inline-flex items-center\">\n          <PlusIcon className=\"h-5 w-5 mr-2\" />\n          Create Organization\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px] bg-light-bg-primary dark:bg-dark-bg-secondary\">\n        <DialogHeader>\n          <DialogTitle className=\"text-light-text-primary dark:text-dark-text-primary\">\n            Create New Organization\n          </DialogTitle>\n        </DialogHeader>\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        <ShadForm {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 mt-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Organization Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\" className=\"w-full\">\n              Create Organization\n            </Button>\n          </form>\n        </ShadForm>\n      </DialogContent>\n    </Dialog>\n  );\n}\n", "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"../../utils/cn\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n", "import { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { login } from \"../lib/auth/auth.server\";\nimport { getUser } from \"../lib/auth/session.server\";\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\n\ninterface LoginActionData {\n  error?: string;\n}\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await getUser(request);\n  console.log('Login loader - User:', user);\n\n  // If user is already authenticated, redirect to dashboard\n  if (user) {\n    return redirect(\"/dashboard\");\n  }\n\n  return json({});\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  console.log('Login action started');\n  console.log('Request method:', request.method);\n  console.log('Request headers:', Object.fromEntries(request.headers.entries()));\n  \n  const formData = await request.formData();\n  console.log('Form data entries:', Object.fromEntries(formData.entries()));\n  \n  const email = formData.get('email');\n  const password = formData.get('password');\n  const redirectTo = formData.get('redirectTo') || '/dashboard';\n\n  console.log('Extracted values:', { email, redirectTo });\n\n  if (\n    typeof email !== 'string' ||\n    typeof password !== 'string' ||\n    typeof redirectTo !== 'string'\n  ) {\n    console.log('Invalid form data types');\n    return json<LoginActionData>(\n      { error: 'Invalid form submission' }, \n      { status: 400 }\n    );\n  }\n\n  console.log('Calling login function');\n  const response = await login(request, formData);\n  console.log('Login response type:', response instanceof Response ? 'Response' : 'Object');\n  \n  // If there are errors, return them\n  if ('errors' in response) {\n    console.log('Login returned errors:', response.errors);\n    return json<LoginActionData>({ error: response.errors.email || 'Login failed' });\n  }\n  \n  // Otherwise, response should be a redirect\n  console.log('Login successful, returning redirect response');\n  return response;\n}\n\nexport default function Login() {\n  const actionData = useActionData<LoginActionData>();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo') || '/dashboard';\n\n  return (\n    <>\n      <h2 className=\"mt-6 text-center text-3xl font-bold tracking-tight text-gray-900\">\n        Sign in to your account\n      </h2>\n      \n      <div className=\"mt-8\">\n        <Form \n          method=\"post\" \n          className=\"space-y-6\"\n          encType=\"application/x-www-form-urlencoded\"\n        >\n          <input \n            type=\"hidden\" \n            name=\"redirectTo\" \n            value={redirectTo} \n          />\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                required\n                className=\"block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 placeholder-gray-400 shadow-sm focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm\"\n              />\n            </div>\n          </div>\n\n          {actionData?.error && (\n            <div className=\"rounded-md bg-red-50 p-4\">\n              <p className=\"text-sm text-red-600\">{actionData.error}</p>\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <input\n                id=\"remember-me\"\n                name=\"remember-me\"\n                type=\"checkbox\"\n                className=\"h-4 w-4 rounded border-gray-300 text-cyan-600 focus:ring-cyan-500\"\n              />\n              <label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-700\">\n                Remember me\n              </label>\n            </div>\n\n            <div className=\"text-sm\">\n              <a href=\"#\" className=\"font-medium text-cyan-600 hover:text-cyan-500\">\n                Forgot your password?\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              className=\"flex w-full justify-center rounded-md border border-transparent bg-cyan-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2\"\n            >\n              Sign in\n            </button>\n          </div>\n        </Form>\n\n        <div className=\"mt-6\">\n          <div className=\"relative\">\n            <div className=\"relative flex justify-center text-sm\">\n              <span className=\"px-2 text-gray-600\">Don't have an account?</span>\n            </div>\n          </div>\n\n          <div className=\"mt-2 text-center\">\n            <Link\n              to={{\n                pathname: '/register',\n                search: searchParams.toString(),\n              }}\n              className=\"font-medium text-cyan-600 hover:text-cyan-500\"\n            >\n              Sign up\n            </Link>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData, useSearchParams } from \"@remix-run/react\";\nimport { TabView } from \"../components/TabView\";\nimport { DataView } from \"../components/DataView\";\nimport { EmptyState } from \"../components/EmptyState\";\nimport { RowDetailsSidebar } from \"../components/RowDetailsSidebar\";\nimport { useCallback, useState } from \"react\";\nimport { isNumber, startCase } from \"lodash-es\";\nimport { useClient } from \"../hooks/useClient\";\nimport type { TableDataResponse, Column } from \"../types\";\nimport { fetchTableData } from \"../utils/api.server\";\nimport { fetchSchema } from \"../utils/api.server\";\nimport { useTableUpdates } from \"../hooks/useTableUpdates\";\n\ninterface LoaderData {\n  tableName: string;\n  data: TableDataResponse;\n  columns: Column[];\n}\n\nexport async function loader({ params, request }: LoaderFunctionArgs) {\n  const tableName = params.tableName;\n  if (!tableName) {\n    throw new Error(\"Table name is required\");\n  }\n\n  const url = new URL(request.url);\n  const sortBy = url.searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = url.searchParams.get(\"sortOrder\") as \"asc\" | \"desc\" | undefined;\n\n  const data = await fetchTableData(tableName, sortBy, sortOrder);\n  const schema = await fetchSchema();\n  const tableSchema = schema.find(t => t.name === tableName);\n  \n  if (!tableSchema) {\n    throw new Error(`Table ${tableName} not found`);\n  }\n\n  return json({ \n    tableName, \n    data,\n    columns: tableSchema.columns\n  });\n}\n\nexport default function TablePage() {\n  const { tableName, data: initialData, columns } = useLoaderData<LoaderData>();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [selectedRow, setSelectedRow] = useState<number | null>(null);\n  const client = useClient();\n\n  // Use real-time updates\n  const liveData = useTableUpdates(tableName, initialData);\n\n  const activeTab = searchParams.get(\"tab\") || \"content\";\n  const sortBy = searchParams.get(\"sortBy\") || undefined;\n  const sortOrder = (searchParams.get(\"sortOrder\") as \"asc\" | \"desc\") || undefined;\n\n  const handleSort = useCallback((columnId: string) => {\n    setSearchParams(prev => {\n      const newParams = new URLSearchParams(prev);\n      newParams.set(\"sortBy\", columnId);\n      newParams.set(\"sortOrder\", prev.get(\"sortBy\") === columnId && prev.get(\"sortOrder\") === \"asc\" ? \"desc\" : \"asc\");\n      return newParams;\n    });\n  }, [setSearchParams]);\n\n  const handleTabChange = useCallback((tabId: string) => {\n    setSearchParams(prev => {\n      const newParams = new URLSearchParams(prev);\n      newParams.set(\"tab\", tabId);\n      return newParams;\n    });\n  }, [setSearchParams]);\n\n  const handleEdit = useCallback(async (rowIndex: number, newData: Record<string, unknown>) => {\n    if (!tableName) return;\n    try {\n      const response = await fetch(`/api/tables/${tableName}/rows/${rowIndex}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update row: ${response.statusText}`);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }, [tableName]);\n\n  const handleDelete = useCallback(async (rowIndex: number) => {\n    if (!tableName) return;\n\n    try {\n      const response = await fetch(`/api/tables/${tableName}/rows/${rowIndex}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete row: ${response.statusText}`);\n      }\n\n      if (selectedRow === rowIndex) {\n        setSelectedRow(null);\n      }\n    } catch (err) {\n      throw err;\n    }\n  }, [tableName, selectedRow]);\n\n  const formatCellValue = useCallback((value: unknown): string => {\n    if (value === null) return \"NULL\";\n    if (value === undefined) return \"\";\n    if (typeof value === \"object\") return JSON.stringify(value);\n    return String(value);\n  }, []);\n\n  const tabs = [\n    { id: \"content\", label: \"Content\" },\n    { id: \"structure\", label: \"Structure\" },\n    { id: \"indexes\", label: \"Indexes\" },\n    { id: \"foreign-keys\", label: \"Foreign Keys\" },\n  ];\n\n  const renderTabContent = () => {\n    if (!client) {\n      return null;\n    }\n\n    switch (activeTab) {\n      case \"content\":\n        if (liveData.data.length === 0) {\n          return (\n            <EmptyState\n              type=\"table\"\n              title=\"No Data\"\n              message=\"This table is empty\"\n            />\n          );\n        }\n        return (\n          <DataView\n            columns={columns}\n            rows={liveData.data}\n            sortBy={sortBy}\n            sortOrder={sortOrder}\n            onSort={handleSort}\n            formatCellValue={formatCellValue}\n            isEditable={true}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            selectedRow={isNumber(selectedRow) ? selectedRow : undefined}\n            onRowSelect={setSelectedRow}\n            isLoading={false}\n            error={undefined}\n          />\n        );\n      case \"structure\":\n        if (columns.length === 0) {\n          return (\n            <EmptyState\n              type=\"database\"\n              title=\"No Columns\"\n              message=\"This table has no columns defined\"\n            />\n          );\n        }\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Name</th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Type</th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Nullable</th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Default</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                  {columns.map((column, idx) => (\n                    <tr key={idx} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">{column.name}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{column.type}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{column.nullable ? 'Yes' : 'No'}</td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{column.defaultValue || '-'}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"flex-none p-4 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n          {startCase(tableName)}\n        </h1>\n      </div>\n\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <div className=\"flex-none border-b border-gray-200 dark:border-gray-700\">\n          <TabView \n            tabs={tabs} \n            activeTab={activeTab}\n            onTabChange={handleTabChange}\n          />\n        </div>\n        <>\n          <div className=\"flex-1 min-h-0 p-4 overflow-y-auto\">\n            {renderTabContent()}\n          </div>\n          <RowDetailsSidebar\n            row={selectedRow !== null ? liveData.data[selectedRow] : null}\n            columns={columns}\n            isOpen={selectedRow !== null}\n            onClose={() => setSelectedRow(null)}\n            formatCellValue={formatCellValue}\n          />\n        </>\n      </div>\n    </div>\n  );\n}\n", "import { startCase } from \"lodash-es\";\nimport { cn } from \"../utils/cn\";\n\ninterface Tab {\n  id: string;\n  label: string;\n}\n\ninterface TabViewProps {\n  tabs: Tab[];\n  activeTab: string;\n  onTabChange: (tabId: string) => void;\n}\n\ninterface DataViewProps {\n  columns: string[];\n  rows: any[];\n  currentPage: number;\n  totalPages: number;\n  pageSize: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onPageChange: (page: number) => void;\n  onSort: (column: string) => void;\n  formatCellValue: (value: any) => string;\n}\n\nexport function TabView({ tabs, activeTab, onTabChange }: TabViewProps) {\n  return (\n    <div className=\"bg-light-bg-primary dark:bg-dark-bg-secondary px-6\">\n      <div className=\"flex\">\n        {tabs.map((tab) => {\n          const isActive = activeTab === tab.id;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={cn(\n                \"px-6 py-3 text-sm font-medium border-b-2\",\n                isActive\n                  ? \"border-primary-500 text-primary-600 dark:text-primary-400\"\n                  : \"border-transparent text-light-text-secondary dark:text-dark-text-secondary hover:text-light-text-primary hover:border-light-border dark:hover:text-dark-text-primary dark:hover:border-dark-border\"\n              )}\n            >\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport function DataView({\n  columns,\n  rows,\n  currentPage,\n  totalPages,\n  pageSize,\n  sortBy,\n  sortOrder,\n  onPageChange,\n  onSort,\n  formatCellValue,\n}: DataViewProps) {\n  return (\n    <div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              {columns.map((column) => (\n                <th\n                  key={column}\n                  scope=\"col\"\n                  className=\"group px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer\"\n                  onClick={() => onSort(column)}\n                >\n                  <div className=\"flex items-center space-x-1\">\n                    <span>{startCase(column.toLowerCase())}</span>\n                    <span className=\"invisible group-hover:visible\">\n                      {sortBy === column ? (\n                        <span>{sortOrder === \"asc\" ? \"\u2191\" : \"\u2193\"}</span>\n                      ) : (\n                        \"\u2195\"\n                      )}\n                    </span>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800\">\n            {rows.map((row, rowIndex) => (\n              <tr key={rowIndex} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                {columns.map((column) => (\n                  <td\n                    key={column}\n                    className=\"px-6 py-4 whitespace-pre-wrap text-sm text-gray-900 dark:text-gray-300 font-mono\"\n                  >\n                    {formatCellValue(row[column])}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n", "import { startCase } from \"lodash-es\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport type { Column } from \"../types\";\nimport {\n  createColumnHelper,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n  type SortingState,\n  flexRender,\n} from '@tanstack/react-table';\nimport { cn } from \"../utils/cn\";\n\ninterface DataViewProps {\n  columns: Column[];\n  rows: Record<string, unknown>[];\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  onSort: (column: string) => void;\n  formatCellValue: (value: unknown) => string;\n  onEdit?: (rowIndex: number, data: Record<string, unknown>) => void;\n  onDelete?: (rowIndex: number) => void;\n  isEditable?: boolean;\n  selectedRow?: number;\n  onRowSelect?: (index: number | null) => void;\n  isLoading?: boolean;\n  error?: string;\n}\n\nexport function DataView({\n  columns,\n  rows,\n  sortBy,\n  sortOrder,\n  onSort,\n  formatCellValue,\n  onEdit,\n  onDelete,\n  isEditable = false,\n  selectedRow,\n  onRowSelect,\n  isLoading = false,\n  error = '',\n}: DataViewProps) {\n  const [editingCell, setEditingCell] = useState<[number, string] | null>(null);\n  const [editedValue, setEditedValue] = useState<string | null>(null);\n  const [editError, setEditError] = useState<string | null>(null);\n\n  const handleStartEditing = useCallback((rowIndex: number, columnId: string) => {\n    if (!isEditable) return;\n    setEditingCell([rowIndex, columnId]);\n    setEditedValue(formatCellValue(rows[rowIndex]?.[columnId]));\n    setEditError(null);\n  }, [rows, isEditable, formatCellValue]);\n\n  const handleStopEditing = useCallback(() => {\n    setEditingCell(null);\n    setEditedValue(null);\n    setEditError(null);\n  }, []);\n\n  const handleKeyDown = useCallback(async (\n    e: React.KeyboardEvent<HTMLInputElement>,\n    rowIndex: number,\n    columnId: string\n  ) => {\n    if (e.key === \"Escape\") {\n      handleStopEditing();\n    } else if (e.key === \"Enter\") {\n      try {\n        const value = (e.target as HTMLInputElement).value;\n        const newData = {\n          ...rows[rowIndex],\n          [columnId]: value,\n        };\n\n        await onEdit?.(rowIndex, newData);\n        handleStopEditing();\n      } catch (error) {\n        setEditError(error instanceof Error ? error.message : 'Failed to update value');\n      }\n    }\n  }, [rows, onEdit, handleStopEditing]);\n\n  const handleSort = useCallback((columnId: string) => {\n    onSort(columnId);\n  }, [onSort]);\n\n  const handleRowClick = useCallback((rowIndex: number) => {\n    onRowSelect?.(selectedRow === rowIndex ? null : rowIndex);\n  }, [selectedRow, onRowSelect]);\n\n  const handleDelete = useCallback(async (e: React.MouseEvent, rowIndex: number) => {\n    e.stopPropagation();\n    if (!window.confirm('Are you sure you want to delete this row?')) return;\n    \n    try {\n      await onDelete?.(rowIndex);\n    } catch (error) {\n      console.error('Failed to delete row:', error);\n      // Show error toast or notification here\n    }\n  }, [onDelete]);\n\n  const columnHelper = createColumnHelper<Record<string, unknown>>();\n\n  const tableColumns = useMemo(() => \n    columns.map(col => \n      columnHelper.accessor(col.name, {\n        header: () => startCase(col.name),\n        cell: info => {\n          const rowIndex = info.row.index;\n          const columnId = col.name;\n          const isEditing = editingCell?.[0] === rowIndex && editingCell?.[1] === columnId;\n          const value = info.getValue();\n\n          if (isEditing) {\n            return (\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={editedValue || \"\"}\n                  onChange={e => setEditedValue(e.target.value)}\n                  onKeyDown={e => handleKeyDown(e, rowIndex, columnId)}\n                  onBlur={() => handleStopEditing()}\n                  className={cn(\n                    \"w-full px-2 py-1 bg-white dark:bg-gray-800 border rounded-md focus:outline-none focus:ring-2\",\n                    editError \n                      ? \"border-red-500 dark:border-red-400 focus:ring-red-500 dark:focus:ring-red-400\" \n                      : \"border-primary-500 dark:border-primary-400 focus:ring-primary-500 dark:focus:ring-primary-400\"\n                  )}\n                  autoFocus\n                />\n                {editError && (\n                  <div className=\"absolute left-0 right-0 -bottom-6 text-xs text-red-500 dark:text-red-400\">\n                    {editError}\n                  </div>\n                )}\n              </div>\n            );\n          }\n\n          return (\n            <div\n              className={cn(\n                \"cursor-pointer\",\n                isEditable && \"hover:bg-primary-50 dark:hover:bg-primary-900/20\"\n              )}\n              onClick={() => handleStartEditing(rowIndex, columnId)}\n            >\n              {formatCellValue(value)}\n            </div>\n          );\n        },\n      })\n    ),\n    [columns, formatCellValue, editingCell, editedValue, handleKeyDown, handleStartEditing, isEditable, editError]\n  );\n\n  const sorting = useMemo<SortingState>(() => \n    sortBy ? [{ id: sortBy, desc: sortOrder === \"desc\" }] : [],\n    [sortBy, sortOrder]\n  );\n\n  const [sortingState, setSorting] = useState<SortingState>(sorting);\n\n  const table = useReactTable({\n    data: rows,\n    columns: tableColumns,\n    state: {\n      sorting: sortingState,\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  if (error) {\n    return (\n      <div className=\"border rounded-lg border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/50 p-4\">\n        <div className=\"text-red-700 dark:text-red-300\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border rounded-lg border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 h-full flex flex-col relative\">\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-white/50 dark:bg-gray-900/50 flex items-center justify-center z-10\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-primary-500 rounded-full animate-bounce [animation-delay:-0.3s]\"></div>\n            <div className=\"w-2 h-2 bg-primary-500 rounded-full animate-bounce [animation-delay:-0.15s]\"></div>\n            <div className=\"w-2 h-2 bg-primary-500 rounded-full animate-bounce\"></div>\n          </div>\n        </div>\n      )}\n\n      {rows.length === 0 ? (\n        <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n          <div className=\"text-gray-500 dark:text-gray-400 mb-2\">No data available</div>\n          <div className=\"text-sm text-gray-400 dark:text-gray-500\">This table is empty</div>\n        </div>\n      ) : (\n        <div className=\"overflow-auto flex-1 relative rounded-lg\">\n          <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n            <thead className=\"sticky top-0 text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-800 dark:text-gray-400\">\n              <tr>\n                {table.getAllColumns().map(column => (\n                  <th\n                    key={column.id}\n                    scope=\"col\"\n                    className=\"px-6 py-3 cursor-pointer select-none whitespace-nowrap bg-gray-50 dark:bg-gray-800\"\n                    onClick={() => handleSort(column.id)}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <span>{startCase(column.id)}</span>\n                      {sortingState[0]?.id === column.id && (\n                        <span className=\"text-gray-400\">\n                          {sortingState[0].desc ? \"\u2193\" : \"\u2191\"}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n                {isEditable && (\n                  <th scope=\"col\" className=\"px-6 py-3 bg-gray-50 dark:bg-gray-800 w-24\">\n                    <span className=\"sr-only\">Actions</span>\n                  </th>\n                )}\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              {table.getRowModel().rows.map((row, rowIndex) => (\n                <tr\n                  key={rowIndex}\n                  className={cn(\n                    \"bg-white dark:bg-gray-900\",\n                    selectedRow === rowIndex && \"bg-primary-50 dark:bg-primary-900/20\",\n                    \"hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer border-b dark:border-gray-700\"\n                  )}\n                  onClick={() => handleRowClick(rowIndex)}\n                >\n                  {row.getAllCells().map((cell) => (\n                    <td \n                      key={cell.id} \n                      className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\"\n                    >\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </td>\n                  ))}\n                  {isEditable && (\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <button\n                        onClick={(e) => handleDelete(e, rowIndex)}\n                        className=\"text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300\"\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}\n", "import { useEffect, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { XMarkIcon } from \"@heroicons/react/24/outline\";\nimport { startCase } from \"lodash-es\";\nimport { cn } from \"../utils/cn\";\nimport type { Column } from \"../types\";\n\ninterface RowDetailsSidebarProps {\n  row: Record<string, unknown> | null;\n  columns: Column[];\n  isOpen: boolean;\n  onClose: () => void;\n  formatCellValue: (value: unknown) => string;\n}\n\nexport function RowDetailsSidebar({\n  row,\n  columns,\n  isOpen,\n  onClose,\n  formatCellValue,\n}: RowDetailsSidebarProps) {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n    return () => setMounted(false);\n  }, []);\n\n  if (!mounted) return null;\n\n  const sidebarContent = (\n    <>\n      <div\n        className={cn(\n          \"fixed inset-0 bg-black/30 transition-opacity duration-300 ease-in-out z-40\",\n          isOpen ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n        )}\n        onClick={onClose}\n      />\n      <div\n        className={cn(\n          \"m-6 border rounded-lg fixed inset-y-0 right-0 w-96 bg-white dark:bg-gray-900 shadow-xl transform transition-transform duration-300 ease-in-out z-50 flex flex-col\",\n          isOpen ? \"translate-x-0\" : \"translate-x-full\"\n        )}\n      >\n        <div className=\" rounded-lg flex-none px-4 py-3 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between bg-gray-50 dark:bg-gray-800\">\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100\">Row Details</h3>\n          <button\n            onClick={onClose}\n            className=\"p-1 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n          >\n            <XMarkIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n        {row && (\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"p-4 space-y-4\">\n              {columns.map((column) => (\n                <div \n                  key={column.name}\n                  className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden\"\n                >\n                  <div className=\"px-4 py-2 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                        {startCase(column.name)}\n                      </span>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400 font-mono\">\n                        {column.type}\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"px-4 py-3 bg-white dark:bg-gray-900\">\n                    <div className=\"font-mono text-sm text-gray-900 dark:text-gray-100 break-words\">\n                      {formatCellValue(row[column.name])}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return createPortal(sidebarContent, document.body);\n}\n", "import { useState, useEffect } from 'react';\n\nexport function useClient() {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  return isClient;\n}\n", "import { useEffect, useState, useCallback } from \"react\";\nimport { useWebSocket } from \"./useWebSocket\";\nimport type { TableUpdate, TableUpdateMessage, WebSocketMessage } from \"../types/websocket\";\n\ninterface TableDataResponse {\n  data: Record<string, unknown>[];\n  totalRows: number;\n  page?: number;\n  pageSize?: number;\n}\n\nexport function useTableUpdates(tableName: string, initialData: TableDataResponse): TableDataResponse {\n  const [data, setData] = useState<TableDataResponse>(initialData);\n  \n  const handleMessage = useCallback((message: WebSocketMessage) => {\n    if (message.type === 'table:update') {\n      const update = (message as TableUpdateMessage).update;\n      if (update.table !== tableName) return;\n\n      setData(prevData => {\n        const newData = { ...prevData };\n\n        switch (update.type) {\n          case 'INSERT':\n            newData.data = [update.data, ...newData.data];\n            newData.totalRows = (newData.totalRows || 0) + 1;\n            break;\n\n          case 'UPDATE':\n            if (update.primaryKey) {\n              newData.data = newData.data.map(row => {\n                // Check if this is the row to update by comparing primary key values\n                const isMatch = Object.entries(update.primaryKey!).every(\n                  ([key, value]) => row[key] === value\n                );\n                return isMatch ? { ...row, ...update.data } : row;\n              });\n            }\n            break;\n\n          case 'DELETE':\n            if (update.primaryKey) {\n              newData.data = newData.data.filter(row => {\n                // Remove row if primary key matches\n                return !Object.entries(update.primaryKey!).every(\n                  ([key, value]) => row[key] === value\n                );\n              });\n              newData.totalRows = Math.max(0, (newData.totalRows || 0) - 1);\n            }\n            break;\n        }\n\n        return newData;\n      });\n    }\n  }, [tableName]);\n\n  const { socket, isConnected: connected } = useWebSocket({\n    onMessage: handleMessage,\n    debug: false\n  });\n\n  useEffect(() => {\n    if (!socket || !connected) return;\n\n    // Subscribe to table updates\n    socket.send(JSON.stringify({\n      type: 'subscribe:table',\n      tableName\n    }));\n\n    return () => {\n      socket.send(JSON.stringify({\n        type: 'unsubscribe:table',\n        tableName\n      }));\n    };\n  }, [socket, connected, tableName]);\n\n  return data;\n}\n", "import type { ActionFunctionArgs } from '@remix-run/node';\nimport { json } from '@remix-run/node';\nimport { requireUser } from '../lib/auth/session.server';\nimport { QueryEngine } from '../lib/db/query-engine.server';\nimport { db } from '../lib/db/db.server';\nimport { queries } from '../lib/db/schema';\nimport type { ConnectionConfig as ManagerConnectionConfig } from '../lib/db/connection-manager.server';\nimport { getConnection } from '../lib/connections/config.server';\n\nfunction convertToManagerConfig(connection: Awaited<ReturnType<typeof getConnection>>): ManagerConnectionConfig {\n  if (!connection) throw new Error('Connection not found');\n  \n  if (connection.type === 'SQLITE') {\n    throw new Error('SQLite connections are not supported for queries');\n  }\n\n  if (!connection.config) {\n    throw new Error('Connection config is missing');\n  }\n\n  return {\n    host: connection.config.host || '',\n    port: Number(connection.config.port) || 5555,\n    database: connection.config.database || '',\n    user: connection.config.username || '',\n    password: connection.config.password || '',\n    ssl: connection.config.ssl || false,\n  };\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const user = await requireUser(request);\n  const organizationId = user.currentOrganization?.id;\n\n  if (!organizationId) {\n    return json({\n      error: 'No organization selected',\n    }, { status: 400 });\n  }\n\n  if (request.method !== 'POST') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  const formData = await request.formData();\n\n  try {\n    const connectionId = formData.get('connectionId')?.toString();\n    const sql = formData.get('sql')?.toString();\n\n    if (!connectionId || !sql) {\n      return json({\n        error: 'Missing required fields',\n      }, { status: 400 });\n    }\n\n    // Get connection config\n    const connection = await getConnection(connectionId, organizationId);\n    if (!connection) {\n      return json({\n        error: 'Connection not found',\n      }, { status: 404 });\n    }\n\n    const config = convertToManagerConfig(connection);\n    const queryEngine = new QueryEngine(config);\n    const queryId = await queryEngine.startStreamingQuery(sql, {\n      userId: user.id,\n      organizationId,\n      connectionId,\n      timeout: 30000,\n      maxRows: 1000,\n    });\n\n    try {\n      // Record query in database\n      await db.insert(queries).values({\n        status: 'success',\n        userId: user.id,\n        organizationId,\n        connectionId,\n        sql,\n        executionTimeMs: '0', // TODO: Add actual execution time\n        rowCount: '0', // TODO: Add actual row count\n      });\n    } catch (e) {\n      console.error('Failed to record query:', e);\n    }\n\n    return json({ queryId });\n  } catch (e) {\n    console.error('Query error:', e);\n    \n    try {\n      if (e instanceof Error) {\n        await db.insert(queries).values({\n          status: 'error',\n          userId: user.id,\n          organizationId: organizationId,\n          connectionId: formData.get('connectionId')?.toString() || '',\n          sql: formData.get('sql')?.toString() || '',\n          error: e.message,\n          executionTimeMs: '0', // TODO: Add actual execution time\n        });\n      }\n    } catch (dbError) {\n      console.error('Failed to record query error:', dbError);\n    }\n\n    return json({\n      error: e instanceof Error ? e.message : 'Unknown error occurred',\n    }, { status: 400 });\n  }\n}\n\nexport async function loader() {\n  return json({ error: 'Method not allowed' }, { status: 405 });\n}\n", "import { json, redirect } from \"@remix-run/node\";\nimport { Outlet } from \"@remix-run/react\";\nimport { getUser } from \"../lib/auth/session.server\";\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\nimport PublicLayout from \"../components/PublicLayout\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await getUser(request);\n\n  // If user is already authenticated, redirect to home\n  if (user) {\n    return redirect(\"/\");\n  }\n\n  return json({});\n}\n\nexport default function PublicRoot() {\n  return (\n    <PublicLayout>\n      <Outlet />\n    </PublicLayout>\n  );\n}\n", "import { type ReactNode } from \"react\";\n\ninterface AuthBackgroundProps {\n  children: ReactNode;\n}\n\nexport function AuthBackground({ children }: AuthBackgroundProps) {\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"relative\">\n        {children}\n      </div>\n    </div>\n  );\n}\n", "import type { ReactNode } from \"react\";\nimport { AuthBackground } from \"./auth/AuthBackground\";\n\ninterface PublicLayoutProps {\n  children: ReactNode;\n}\n\nexport default function PublicLayout({ children }: PublicLayoutProps) {\n  return (\n    <AuthBackground>\n      <div className=\"flex min-h-screen flex-col justify-center py-12 sm:px-6 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n          <img\n            className=\"mx-auto h-20 w-auto\"\n            src=\"/assets/logo.svg\"\n            alt=\"Data Studio\"\n          />\n        </div>\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </AuthBackground>\n  );\n}\n", "import { redirect } from \"@remix-run/node\";\nimport type { LoaderFunctionArgs } from \"@remix-run/node\";\nimport { getUser } from \"../lib/auth/session.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const user = await getUser(request);\n  console.log('Root route - User:', user);\n\n  // If user is authenticated, redirect to the authenticated dashboard\n  if (user) {\n    return redirect(\"/dashboard\");\n  }\n\n  // Otherwise, redirect to login with the current URL as the redirect target\n  const url = new URL(request.url);\n  return redirect(`/login?redirectTo=${encodeURIComponent(url.pathname)}`);\n}\n", "export default {'entry':{'module':'/build/entry.client-FIBSCGS6.js','imports':['/build/_shared/chunk-HFL5RBFE.js','/build/_shared/chunk-5HJ5W42R.js','/build/_shared/chunk-5AMMY4CW.js','/build/_shared/chunk-VR3K4436.js','/build/_shared/chunk-EUZDHSKU.js','/build/_shared/chunk-HNQ2CC4V.js','/build/_shared/chunk-OQMXYTN7.js','/build/_shared/chunk-73CLBT4D.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-RZ5HMXXB.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/$tableName':{'id':'routes/$tableName','parentId':'root','path':':tableName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/$tableName-2JXTIUIP.js','imports':['/build/_shared/chunk-ZUQYZB2S.js','/build/_shared/chunk-A76TNURT.js','/build/_shared/chunk-XLPEMQTH.js','/build/_shared/chunk-6IDXSROD.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated':{'id':'routes/_authenticated','parentId':'root','path':undefined,'index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated-HCU64SNG.js','imports':['/build/_shared/chunk-P5VHH4C5.js','/build/_shared/chunk-XLPEMQTH.js','/build/_shared/chunk-MKEFVW5L.js','/build/_shared/chunk-ISBWANBB.js','/build/_shared/chunk-MBZHZ3QK.js','/build/_shared/chunk-56RQJV2B.js','/build/_shared/chunk-6IDXSROD.js','/build/_shared/chunk-HIM7WSXF.js','/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-XZT67IW3.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.connections.$id.edit':{'id':'routes/_authenticated.connections.$id.edit','parentId':'routes/_authenticated','path':'connections/:id/edit','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.connections.$id.edit-DFHSZMVN.js','imports':['/build/_shared/chunk-KTTDCJ2N.js','/build/_shared/chunk-6FPJFVLV.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.connections._index':{'id':'routes/_authenticated.connections._index','parentId':'routes/_authenticated','path':'connections','index':true,'caseSensitive':undefined,'module':'/build/routes/_authenticated.connections._index-NO65WDBW.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.connections.new':{'id':'routes/_authenticated.connections.new','parentId':'routes/_authenticated','path':'connections/new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.connections.new-MHCU3IRA.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.dashboard':{'id':'routes/_authenticated.dashboard','parentId':'routes/_authenticated','path':'dashboard','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.dashboard-LPUPMXBP.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations':{'id':'routes/_authenticated.organizations','parentId':'routes/_authenticated','path':'organizations','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations-RQJNNAFZ.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.$id':{'id':'routes/_authenticated.organizations.$id','parentId':'routes/_authenticated.organizations','path':':id','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.$id-MWI3PJ5F.js','imports':['/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-TTCSSDXQ.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.$orgId.connections':{'id':'routes/_authenticated.organizations.$orgId.connections','parentId':'routes/_authenticated.organizations','path':':orgId/connections','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.$orgId.connections-QOCDXYCS.js','imports':['/build/_shared/chunk-HIM7WSXF.js','/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-TE4QQH4Q.js','/build/_shared/chunk-6FPJFVLV.js','/build/_shared/chunk-TTCSSDXQ.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.$orgId.connections.new':{'id':'routes/_authenticated.organizations.$orgId.connections.new','parentId':'routes/_authenticated.organizations.$orgId.connections','path':'new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.$orgId.connections.new-UOPVN3RR.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.$orgId.invite':{'id':'routes/_authenticated.organizations.$orgId.invite','parentId':'routes/_authenticated.organizations','path':':orgId/invite','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.$orgId.invite-BF7AEZ2J.js','imports':['/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-TE4QQH4Q.js','/build/_shared/chunk-KTTDCJ2N.js','/build/_shared/chunk-6FPJFVLV.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.$orgId.members':{'id':'routes/_authenticated.organizations.$orgId.members','parentId':'routes/_authenticated.organizations','path':':orgId/members','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.$orgId.members-LMPF2ES4.js','imports':['/build/_shared/chunk-TE4QQH4Q.js','/build/_shared/chunk-KTTDCJ2N.js','/build/_shared/chunk-6FPJFVLV.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations._index':{'id':'routes/_authenticated.organizations._index','parentId':'routes/_authenticated.organizations','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations._index-F2KBZVHB.js','imports':['/build/_shared/chunk-TTCSSDXQ.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.new':{'id':'routes/_authenticated.organizations.new','parentId':'routes/_authenticated.organizations','path':'new','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.new-Y74T6HO5.js','imports':['/build/_shared/chunk-MKEFVW5L.js','/build/_shared/chunk-MBZHZ3QK.js','/build/_shared/chunk-56RQJV2B.js','/build/_shared/chunk-6IDXSROD.js','/build/_shared/chunk-3XRQ6YKL.js','/build/_shared/chunk-TTCSSDXQ.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.organizations.select':{'id':'routes/_authenticated.organizations.select','parentId':'routes/_authenticated.organizations','path':'select','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.organizations.select-NIQPBJUT.js','imports':['/build/_shared/chunk-TE4QQH4Q.js','/build/_shared/chunk-KTTDCJ2N.js','/build/_shared/chunk-6FPJFVLV.js','/build/_shared/chunk-53RMLL4R.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.profile':{'id':'routes/_authenticated.profile','parentId':'routes/_authenticated','path':'profile','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.profile-SX5QMDCG.js','imports':['/build/_shared/chunk-GZXQHIWS.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.query':{'id':'routes/_authenticated.query','parentId':'routes/_authenticated','path':'query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.query-WVH3CPUF.js','imports':['/build/_shared/chunk-ZUQYZB2S.js','/build/_shared/chunk-6WNVFGCP.js','/build/_shared/chunk-A76TNURT.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_authenticated.schema':{'id':'routes/_authenticated.schema','parentId':'routes/_authenticated','path':'schema','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_authenticated.schema-PZRHCVOS.js','imports':['/build/_shared/chunk-6WNVFGCP.js','/build/_shared/chunk-A76TNURT.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-XAJWDSTR.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_public':{'id':'routes/_public','parentId':'root','path':undefined,'index':undefined,'caseSensitive':undefined,'module':'/build/routes/_public-BT75EH2U.js','imports':['/build/_shared/chunk-53RMLL4R.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_public.login':{'id':'routes/_public.login','parentId':'routes/_public','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_public.login-VSDB7RZ2.js','imports':['/build/_shared/chunk-GZXQHIWS.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_public.register':{'id':'routes/_public.register','parentId':'routes/_public','path':'register','index':undefined,'caseSensitive':undefined,'module':'/build/routes/_public.register-ITJW2VGK.js','imports':['/build/_shared/chunk-GZXQHIWS.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.connections':{'id':'routes/api.connections','parentId':'root','path':'api/connections','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.connections-J7SU3HO6.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/api.query':{'id':'routes/api.query','parentId':'root','path':'api/query','index':undefined,'caseSensitive':undefined,'module':'/build/routes/api.query-KVUF34GV.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/connections.change':{'id':'routes/connections.change','parentId':'root','path':'connections/change','index':undefined,'caseSensitive':undefined,'module':'/build/routes/connections.change-GXY3P64O.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/connections.state':{'id':'routes/connections.state','parentId':'root','path':'connections/state','index':undefined,'caseSensitive':undefined,'module':'/build/routes/connections.state-3ABGUISV.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'dae2d644','hmr':{'runtime':'/build/_shared/chunk-EUZDHSKU.js','timestamp':1733343289092},'url':'/build/manifest-DAE2D644.js'};", "\nimport * as entryServer from \"/Users/jacob/projects/data-studio/packages/web/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/_authenticated.organizations.$orgId.connections.new.tsx\";\nimport * as route2 from \"./routes/_authenticated.organizations.$orgId.connections.tsx\";\nimport * as route3 from \"./routes/_authenticated.organizations.$orgId.members.tsx\";\nimport * as route4 from \"./routes/_authenticated.organizations.$orgId.invite.tsx\";\nimport * as route5 from \"./routes/_authenticated.connections.$id.edit.tsx\";\nimport * as route6 from \"./routes/_authenticated.organizations._index.tsx\";\nimport * as route7 from \"./routes/_authenticated.organizations.select.tsx\";\nimport * as route8 from \"./routes/_authenticated.connections._index.tsx\";\nimport * as route9 from \"./routes/_authenticated.organizations.$id.tsx\";\nimport * as route10 from \"./routes/_authenticated.organizations.new.tsx\";\nimport * as route11 from \"./routes/_authenticated.connections.new.tsx\";\nimport * as route12 from \"./routes/_authenticated.organizations.tsx\";\nimport * as route13 from \"./routes/_authenticated.dashboard.tsx\";\nimport * as route14 from \"./routes/_authenticated.profile.tsx\";\nimport * as route15 from \"./routes/_authenticated.schema.tsx\";\nimport * as route16 from \"./routes/_authenticated.query.tsx\";\nimport * as route17 from \"./routes/connections.change.ts\";\nimport * as route18 from \"./routes/connections.state.ts\";\nimport * as route19 from \"./routes/_public.register.tsx\";\nimport * as route20 from \"./routes/api.connections.ts\";\nimport * as route21 from \"./routes/_authenticated.tsx\";\nimport * as route22 from \"./routes/_public.login.tsx\";\nimport * as route23 from \"./routes/$tableName.tsx\";\nimport * as route24 from \"./routes/api.query.ts\";\nimport * as route25 from \"./routes/_public.tsx\";\nimport * as route26 from \"./routes/_index.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"v3_routeConfig\":false,\"v3_singleFetch\":false,\"v3_lazyRouteDiscovery\":false,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/_authenticated.organizations.$orgId.connections.new\": {\n      id: \"routes/_authenticated.organizations.$orgId.connections.new\",\n      parentId: \"routes/_authenticated.organizations.$orgId.connections\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/_authenticated.organizations.$orgId.connections\": {\n      id: \"routes/_authenticated.organizations.$orgId.connections\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: \":orgId/connections\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/_authenticated.organizations.$orgId.members\": {\n      id: \"routes/_authenticated.organizations.$orgId.members\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: \":orgId/members\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/_authenticated.organizations.$orgId.invite\": {\n      id: \"routes/_authenticated.organizations.$orgId.invite\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: \":orgId/invite\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/_authenticated.connections.$id.edit\": {\n      id: \"routes/_authenticated.connections.$id.edit\",\n      parentId: \"routes/_authenticated\",\n      path: \"connections/:id/edit\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/_authenticated.organizations._index\": {\n      id: \"routes/_authenticated.organizations._index\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/_authenticated.organizations.select\": {\n      id: \"routes/_authenticated.organizations.select\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: \"select\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/_authenticated.connections._index\": {\n      id: \"routes/_authenticated.connections._index\",\n      parentId: \"routes/_authenticated\",\n      path: \"connections\",\n      index: true,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/_authenticated.organizations.$id\": {\n      id: \"routes/_authenticated.organizations.$id\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: \":id\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/_authenticated.organizations.new\": {\n      id: \"routes/_authenticated.organizations.new\",\n      parentId: \"routes/_authenticated.organizations\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/_authenticated.connections.new\": {\n      id: \"routes/_authenticated.connections.new\",\n      parentId: \"routes/_authenticated\",\n      path: \"connections/new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/_authenticated.organizations\": {\n      id: \"routes/_authenticated.organizations\",\n      parentId: \"routes/_authenticated\",\n      path: \"organizations\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/_authenticated.dashboard\": {\n      id: \"routes/_authenticated.dashboard\",\n      parentId: \"routes/_authenticated\",\n      path: \"dashboard\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    },\n  \"routes/_authenticated.profile\": {\n      id: \"routes/_authenticated.profile\",\n      parentId: \"routes/_authenticated\",\n      path: \"profile\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route14\n    },\n  \"routes/_authenticated.schema\": {\n      id: \"routes/_authenticated.schema\",\n      parentId: \"routes/_authenticated\",\n      path: \"schema\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route15\n    },\n  \"routes/_authenticated.query\": {\n      id: \"routes/_authenticated.query\",\n      parentId: \"routes/_authenticated\",\n      path: \"query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route16\n    },\n  \"routes/connections.change\": {\n      id: \"routes/connections.change\",\n      parentId: \"root\",\n      path: \"connections/change\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route17\n    },\n  \"routes/connections.state\": {\n      id: \"routes/connections.state\",\n      parentId: \"root\",\n      path: \"connections/state\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route18\n    },\n  \"routes/_public.register\": {\n      id: \"routes/_public.register\",\n      parentId: \"routes/_public\",\n      path: \"register\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route19\n    },\n  \"routes/api.connections\": {\n      id: \"routes/api.connections\",\n      parentId: \"root\",\n      path: \"api/connections\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route20\n    },\n  \"routes/_authenticated\": {\n      id: \"routes/_authenticated\",\n      parentId: \"root\",\n      path: undefined,\n      index: undefined,\n      caseSensitive: undefined,\n      module: route21\n    },\n  \"routes/_public.login\": {\n      id: \"routes/_public.login\",\n      parentId: \"routes/_public\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route22\n    },\n  \"routes/$tableName\": {\n      id: \"routes/$tableName\",\n      parentId: \"root\",\n      path: \":tableName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route23\n    },\n  \"routes/api.query\": {\n      id: \"routes/api.query\",\n      parentId: \"root\",\n      path: \"api/query\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route24\n    },\n  \"routes/_public\": {\n      id: \"routes/_public\",\n      parentId: \"root\",\n      path: undefined,\n      index: undefined,\n      caseSensitive: undefined,\n      module: route25\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route26\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "jsxDEV", "loader", "json", "redirect", "redirect", "text", "timestamp", "pgTable", "uuid", "uuidv4", "pgTable", "uuid", "uuidv4", "text", "timestamp", "text", "timestamp", "pgTable", "uuid", "uuidv4", "pgTable", "uuid", "uuidv4", "text", "timestamp", "text", "timestamp", "pgTable", "uuid", "uuidv4", "pgTable", "uuid", "text", "timestamp", "eq", "and", "eq", "organizations", "and", "redirect", "redirect", "z", "jsxDEV", "z", "loader", "json", "redirect", "action", "loader", "json", "Form", "uuidv4", "eq", "and", "uuidv4", "eq", "and", "eq", "eq", "db", "eq", "z", "useState", "Form", "jsxDEV", "pkg", "Pool", "pool", "jsxDEV", "z", "loader", "eq", "json", "action", "useState", "Form", "loader", "json", "useLoaderData", "eq", "jsxDEV", "loader", "members", "json", "useLoaderData", "action", "loader", "json", "redirect", "Form", "useActionData", "useParams", "eq", "z", "jsxDEV", "loader", "action", "json", "redirect", "useActionData", "useParams", "Form", "action", "loader", "json", "redirect", "Form", "useActionData", "useLoaderData", "eq", "and", "z", "ConnectionSchema", "createConnection", "Fragment", "jsxDEV", "loader", "json", "action", "redirect", "ConnectionSchema", "useLoaderData", "useActionData", "Form", "loader", "json", "Link", "useLoaderData", "jsxDEV", "loader", "organizations", "json", "useLoaderData", "Link", "action", "loader", "json", "redirect", "Form", "useActionData", "useLoaderData", "Link", "eq", "jsxDEV", "loader", "redirect", "eq", "json", "action", "organizations", "useLoaderData", "useActionData", "Form", "Link", "loader", "json", "Link", "useLoaderData", "jsxDEV", "loader", "json", "useLoaderData", "Link", "loader", "json", "useLoaderData", "z", "jsxDEV", "loader", "json", "useLoaderData", "action", "loader", "json", "redirect", "useActionData", "z", "jsxDEV", "React", "Slot", "React", "cva", "jsxDEV", "cva", "jsxDEV", "Form", "Slot", "React", "jsxDEV", "React", "jsxDEV", "jsxDEV", "z", "loader", "json", "action", "redirect", "Form", "useActionData", "action", "NewConnectionPage", "json", "redirect", "Form", "useActionData", "useNavigation", "useForm", "zodResolver", "z", "React", "jsxDEV", "jsxDEV", "React", "Check", "jsxDEV", "Check", "jsxDEV", "action", "json", "ConnectionSchema", "createConnection", "redirect", "z", "NewConnectionPage", "useActionData", "useNavigation", "useForm", "zodResolver", "Form", "loader", "json", "Outlet", "jsxDEV", "loader", "json", "Outlet", "loader", "json", "Link", "jsxDEV", "action", "loader", "json", "Form", "useActionData", "useLoaderData", "eq", "eq", "eq", "z", "jsxDEV", "loader", "json", "action", "useLoaderData", "useActionData", "Form", "loader", "json", "useLoaderData", "useCallback", "useEffect", "useState", "jsxDEV", "useState", "forwardRef", "jsxDEV", "Button", "forwardRef", "jsxDEV", "useState", "Button", "useCallback", "useEffect", "useState", "useState", "useEffect", "useCallback", "jsxDEV", "useState", "useCallback", "useEffect", "useMemo", "pkg", "Pool", "pool", "pool", "jsxDEV", "jsxDEV", "loader", "json", "useLoaderData", "action", "loader", "useState", "format", "jsxDEV", "jsxDEV", "Icon", "json", "useLoaderData", "uuidv4", "sql", "useEffect", "useState", "useCallback", "useEffect", "useRef", "useMemo", "jsxDEV", "text", "useEffect", "useRef", "useState", "useCallback", "useEffect", "useState", "useCallback", "useEffect", "useRef", "useState", "useState", "useCallback", "sql", "useEffect", "jsxDEV", "action", "Icon", "useMemo", "jsxDEV", "entry", "useMemo", "useState", "jsxDEV", "useState", "jsxDEV", "useState", "useMemo", "jsxDEV", "calculateCorrelation", "useMemo", "jsxDEV", "isNumeric", "isDateType", "useMemo", "useState", "jsxDEV", "sql", "useRef", "useState", "useEffect", "Fragment", "jsxDEV", "loader", "json", "action", "useState", "useLoaderData", "format", "action", "json", "redirect", "db", "databaseConnections", "eq", "loader", "json", "db", "databaseConnections", "eq", "getSession", "connections", "action", "json", "Form", "Link", "useActionData", "Fragment", "jsxDEV", "action", "json", "useActionData", "Form", "Link", "action", "json", "z", "eq", "z", "action", "data", "json", "eq", "loader", "json", "redirect", "Outlet", "useLoaderData", "Link", "Transition", "Fragment", "Form", "clsx", "React", "jsxDEV", "Dialog", "jsxDEV", "useFetcher", "useForm", "zodResolver", "z", "useState", "useEffect", "React", "cva", "jsxDEV", "cva", "Alert", "Fragment", "jsxDEV", "BaseConnectionSchema", "z", "StandardConnectionSchema", "MongoDBConnectionSchema", "RedisConnectionSchema", "SQLiteConnectionSchema", "CreateConnectionSchema", "useState", "useFetcher", "useForm", "zodResolver", "testConnection", "useEffect", "Dialog", "Alert", "Form", "jsxDEV", "Link", "clsx", "Transition", "Fragment", "Form", "jsxDEV", "loader", "redirect", "json", "useLoaderData", "Outlet", "action", "loader", "json", "redirect", "Form", "Link", "useActionData", "useSearchParams", "Fragment", "jsxDEV", "loader", "redirect", "json", "action", "useActionData", "useSearchParams", "Form", "Link", "loader", "json", "useLoaderData", "useSearchParams", "jsxDEV", "startCase", "useCallback", "useMemo", "useState", "jsxDEV", "useState", "useCallback", "error", "useMemo", "startCase", "useEffect", "useState", "startCase", "Fragment", "jsxDEV", "useState", "useEffect", "startCase", "useCallback", "useState", "startCase", "useState", "useEffect", "useEffect", "useState", "useCallback", "useState", "useCallback", "useEffect", "Fragment", "jsxDEV", "loader", "json", "useLoaderData", "useSearchParams", "useState", "useCallback", "startCase", "action", "loader", "json", "action", "json", "sql", "loader", "loader", "json", "redirect", "Outlet", "jsxDEV", "jsxDEV", "jsxDEV", "loader", "redirect", "json", "Outlet", "loader", "redirect", "loader", "redirect"]
}
